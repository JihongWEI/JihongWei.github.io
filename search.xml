<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Linux下搭建Windows与office的KMS服务器]]></title>
      <url>http://blublu.xyz/programer/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAWindows%E4%B8%8Eoffice%E7%9A%84KMS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>因为各种各样原因，在世界范围内，充斥着不少的破解激活的windows系统。微软对此也是睁一只眼闭一只眼，否则以微软的尿性完全可以弄个复杂一万倍的激活机制出来打击Windows的盗版。（但计算机的本质决定了只要你有激活机制，就永远有办法破解掉）所以打击严厉盗版…你懂的</p>
<p>至于为什么在天朝盗版遍地飞，中国现行法律规定：非商用目的使用盗版软件，比如个人使用盗版Windows，“不违法”，微软不能把你怎么样。</p>
<blockquote>
<p>法律依据应该是这条:<br>《计算机软件保护条例》第十七条：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬。</p>
</blockquote>
<p>事实上，Windows的盗版范围并没有想象中的那么大，欧美国家用的几乎都是正版，而国内因为各大OEM厂商都预装了正版的Windows系统，所以盗版也仅仅只是一些第三方DIY机型或者散户们图省事直接装的盗版的Windows。</p>
<p>每次在一些没有OEM授权的电脑上或者升级新版Windows的时候（用作学习用途），总是需要一些工具绕开激活机制。为了图方便，所以搭建了这个KMS激活服务器，一劳永逸。</p>
<p><strong>所以以下所说的全部内容仅可用于学习所需，如有侵权，请联系我删除</strong></p>
<p><strong>服务器端口：1688</strong></p>
<h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3><p>使用root用户登录，分别运行以下3条命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -c http://mirrors.tintsoft.com/software/vlmcsd/vlmcsd.sh</div><div class="line">chmod +x vlmcsd.sh</div><div class="line">./vlmcsd.sh 2&gt;&amp;1 | tee vlmcsd.log</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装过程如图所示：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-08-122307.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-08-122154.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-08-122206.jpg" alt=""></p>
<h3 id="卸载方法："><a href="#卸载方法：" class="headerlink" title="卸载方法："></a>卸载方法：</h3><p>使用 root 用户登录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vlmcsd.sh uninstall</div></pre></td></tr></table></figure>
<h3 id="查看安装状态"><a href="#查看安装状态" class="headerlink" title="查看安装状态"></a>查看安装状态</h3><p>安装完成后即已后台启动 vlmcsd ，运行以下命令查看状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/vlmcsd status</div></pre></td></tr></table></figure>
<h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">启动：/etc/init.d/vlmcsd start</div><div class="line">停止：/etc/init.d/vlmcsd stop</div><div class="line">重启：/etc/init.d/vlmcsd restart</div><div class="line">状态：/etc/init.d/vlmcsd status</div></pre></td></tr></table></figure>
<h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>如果你的服务器开启了防火墙，请执行以下语句添加例外</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/sbin/iptables -I INPUT -p tcp --dport 1688 -j ACCEPT</div><div class="line">/sbin/iptables-save</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解计算机系统-第三章课后作业]]></title>
      <url>http://blublu.xyz/computer-principle/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E4%B8%89%E7%AB%A0%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      <content type="html"><![CDATA[<h6 id="3-54"><a href="#3-54" class="headerlink" title="3.54"></a>3.54</h6><p>一个函数的原型为<br><code>int decode2(int x, int y, int z);</code></p>
<p>将这个函数编译成 IA32 汇编代码。代码体如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">movl    16(%ebp), %edx</div><div class="line">subl    12(%ebp), %edx</div><div class="line">movl    %edx, %eax</div><div class="line">sall    $15, %eax</div><div class="line">sarl    $15, %eax</div><div class="line">xorl    8(%ebp), %edx</div><div class="line">imull   %edx, %eax</div><div class="line"># x at %ebp+8, y at %ebp+12, z at %ebp+16</div></pre></td></tr></table></figure>
<p>参数 x、y 和 z 存放在存储器中相对于寄存器 %ebp 中地址偏移量为 8、12 和 16的地方。代码将返回值存放在寄存器 %eax 中。写出等价于我们汇编代码的 decode2 的 C 代码。</p>
<p><strong>答：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">sal</th>
<th style="text-align:center">算术左移指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sar</td>
<td style="text-align:center">算术右移指令</td>
</tr>
<tr>
<td style="text-align:center">xor</td>
<td style="text-align:center">异或指令</td>
</tr>
<tr>
<td style="text-align:center">imul</td>
<td style="text-align:center">有符号数乘法指令</td>
</tr>
</tbody>
</table>
<p>所以根据以上汇编代码可以得到等价的C代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = z-y;</div><div class="line">    <span class="keyword">return</span> (temp ^ x) * (temp &lt;&lt; <span class="number">15</span> &gt;&gt; <span class="number">15</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h6 id="3-56"><a href="#3-56" class="headerlink" title="3.56"></a>3.56</h6><p>考虑下面的汇编代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">movl    8(%ebp), %esi</div><div class="line">movl    12(%ebp), %ebx</div><div class="line">movl    $1431655765, %edi</div><div class="line">movl    $-2147483648, %edx</div><div class="line">.L2:</div><div class="line">movl    %edx, %eax</div><div class="line">andl    %esi, %eax</div><div class="line">xorl    %eax, %edi</div><div class="line">movl    %ebx, %ecx</div><div class="line">shrl    %cl, %edx</div><div class="line">testl   %edx, %edx</div><div class="line">jne     .L2</div><div class="line">movl    %edi, %eax</div><div class="line"># x at %ebp+8, n at %ebp+12</div></pre></td></tr></table></figure>
<p>以上代码是以下整体形式的 C 代码编译产生的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">____</span>;</div><div class="line">    <span class="keyword">int</span> mask;</div><div class="line">    <span class="keyword">for</span> (mask = <span class="number">____</span>; mask <span class="number">____</span>; mask = <span class="number">____</span>) &#123;</div><div class="line">        result ^= <span class="number">____</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你的任务是填写这个 C 代码中缺失的部分，得到一个程序等价于产生的汇编代码。回想一下，这个函数的结果是在寄存器 %eax 中返回的。你会发现以下工作很有帮助：检查循环之前、之中和之后的汇编代码，形成一个寄存器和程序变量之间一致的映射。</p>
<p>A. 哪个寄存器保存着程序值 x、n、result 和 mask？<br>B. result 和 mask 的初始值是什么？<br>C. mask 的测试条件是什么？<br>D. mask 是如何被修改的？<br>E. result 是如何被修改的？<br>F. 填写这段 C 代码中所有缺失的部分。</p>
<p><strong>答：</strong><br>A. </p>
<table>
<thead>
<tr>
<th style="text-align:center">寄存器</th>
<th style="text-align:center">对应的程序变量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">esi</td>
<td style="text-align:center">x</td>
</tr>
<tr>
<td style="text-align:center">ebx</td>
<td style="text-align:center">n</td>
</tr>
<tr>
<td style="text-align:center">edi</td>
<td style="text-align:center">result</td>
</tr>
<tr>
<td style="text-align:center">edx</td>
<td style="text-align:center">mask</td>
</tr>
</tbody>
</table>
<p>B.result的初始值为<code>0x55555555</code>，mask的初始值为<code>0x8fffffff</code><br>C.根据<code>testl   %edx, %edx</code> 与 <code>jne     .L2</code>语句可知mask的测试条件是 <code>mask!=0</code><br>D.根据<code>movl    %edx, %eax</code>、<code>movl    %ebx, %ecx</code> 与 <code>shrl    %cl, %edx</code>语句可以知道，mask右移的位数为cl，也就是n的低八位，所以相当于<code>mask = (unsigned)mask &gt;&gt; n&amp;0xff</code>，因为若mask不强转为unsigned类型，移位之后会被符号位（1）填充，mask != 0将一直成立，for循环会死循环。<br>E.根据<code>andl    %esi, %eax</code> 与 <code>xorl    %eax, %edi</code>语句可以得到 result ^= (x &amp; mask)<br>F.完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0x55555555</span>;</div><div class="line">    <span class="keyword">int</span> mask;</div><div class="line">    <span class="keyword">for</span> (mask = <span class="number">0x8fffffff</span>; mask != <span class="number">0</span>; mask = (<span class="keyword">unsigned</span>)mask &gt;&gt; n&amp;<span class="number">0xff</span>) &#123;</div><div class="line">        result ^= (x &amp; mask);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h6 id="3-58"><a href="#3-58" class="headerlink" title="3.58"></a>3.58</h6><p>下面的代码是在一个开关语句中根据枚举类型值进行分支选择的例子。回忆一下，C语言中枚举类型只是一种引入一组与整数值相对应的名字的方法。默认情况下，值是从 0 向上依次赋给名字的。在我们的代码中，省略了与各种情况标号相对应的动作。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Enumerated type creates set of constants numbered 0 and upward */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; MODE_A, MODE_B, MODE_C, MODE_D, MODE_E &#125; <span class="keyword">mode_t</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch3</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2, <span class="keyword">mode_t</span> action)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MODE_A:</div><div class="line">        <span class="keyword">case</span> MODE_B:</div><div class="line">        <span class="keyword">case</span> MODE_C:</div><div class="line">        <span class="keyword">case</span> MODE_D:</div><div class="line">        <span class="keyword">case</span> MODE_E:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>产生的实现各个动作的汇编代码部分如下所示。注释指明了参数位置，寄存器值，以及各个跳转目的的情况标号。寄存器 %edx 对应于程序变量 result，并被初始化为-1。<strong>填写 C 代码中缺失的部分。注意那些会落入其他情况中的情况。</strong></p>
<p>Arguments: p1 at %ebp+8, p2 at %ebp+12, action at %ebp+16<br>Registers: result in %edx (initialized to -1)<br>The jump targets:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.L17:                   # MODE_E</div><div class="line">movl  $17, %edx</div><div class="line">jmp   .L19</div><div class="line">.L13:                   # MODE_A</div><div class="line">movl  8(%ebp), %eax</div><div class="line">movl  (%eax), %edx</div><div class="line">movl  12(%ebp), %ecx</div><div class="line">movl  (%ecx), %eax</div><div class="line">movl  8(%ebp), %ecx</div><div class="line">movl  %eax, (%ecx)</div><div class="line">jmp   .L19</div><div class="line">.L14:                   # MODE_B</div><div class="line">movl  12(%ebp), %edx</div><div class="line">movl  (%edx), %eax</div><div class="line">movl  %eax, %edx</div><div class="line">movl  8(%ebp), %ecx</div><div class="line">addl  (%ecx), %edx</div><div class="line">movl  12(%ebp), %eax</div><div class="line">movl  %edx, (%eax)</div><div class="line">jmp   .L19</div><div class="line">.L15:                   # MODE_C</div><div class="line">movl  12(%ebp), %edx</div><div class="line">movl  $15, (%edx)</div><div class="line">movl  8(%ebp), %ecx</div><div class="line">movl  (%ecx), %edx</div><div class="line">jmp   .L19</div><div class="line">.L16:                   # MODE_D</div><div class="line">movl  8(%ebp), %edx</div><div class="line">movl  (%edx), %eax</div><div class="line">movl  12(%ebp), %ecx</div><div class="line">movl  %eax, (%ecx)</div><div class="line">movl  $17, %edx</div><div class="line">.L19:                   # default</div><div class="line">movl  %edx, %eax      # Set return value</div><div class="line">     上面的代码实现了 switch 语句的各个分支</div></pre></td></tr></table></figure>
<p><strong>答：</strong><br>根据汇编代码填写的C代码缺失部分如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; MODE_A, MODE_B, MODE_C, MODE_D, MODE_E &#125; <span class="keyword">mode_t</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">switch3</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2, <span class="keyword">mode_t</span> action)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MODE_A:</div><div class="line">            result = *p1;</div><div class="line">            *p1 = *p2;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MODE_B:</div><div class="line">            result = p2;</div><div class="line">            result = *p2;</div><div class="line">            result += *p1;</div><div class="line">            *p2 = result;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MODE_C:</div><div class="line">            *p2 = <span class="number">15</span>;</div><div class="line">            result = *p1;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MODE_D:</div><div class="line">            *p2 = *p1;</div><div class="line">            result = <span class="number">17</span>; </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MODE_E:</div><div class="line">            result = <span class="number">17</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h6 id="3-62"><a href="#3-62" class="headerlink" title="3.62"></a>3.62</h6><p>下面的代码转置一个 MxM 矩阵的元素，这里 M 是一个用 #define 定义的常数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">(<span class="keyword">int</span> A[M][M])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">int</span> t = A[i][j];</div><div class="line">            A[i][j] = A[j][i];</div><div class="line">            A[j][i] = t;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当用优化等级 -O2 编译时，GCC 为这个函数的内部循环产生下面的代码：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.L3:</div><div class="line">movl (%ebx), %eax</div><div class="line">movl (%esi,%ecx,<span class="number">4</span>), %edx</div><div class="line">movl %eax, (%esi,%ecx,<span class="number">4</span>)</div><div class="line">addl $<span class="number">1</span>, %ecx</div><div class="line">movl %edx, (%ebx)</div><div class="line">addl $<span class="number">76</span>, %ebx</div><div class="line">cmpl %edi, %ecx</div><div class="line">jl   .L3</div></pre></td></tr></table></figure>
<p>A. M 的值是多少？<br>B. 哪个寄存器保存着程序值 i 和 j？<br>C. 写 transpose 的一个 C 代码版本，使用在这个循环中出现的优化。在你的代码中，使用参数 M，而不要使用常数值。</p>
<p><strong>答：</strong><br>A. M 的值为19<br>B. ecx寄存器保存着j的值，edi寄存器保存着i的值。(cmpl s2,s1指令，s1-s2差关系)<br>C. 代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">(<span class="keyword">int</span> A[M][M], <span class="keyword">int</span> M)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;M; i++)&#123;</div><div class="line">        <span class="keyword">int</span> *p = &amp;A[i][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">int</span> temp = A[i][j];</div><div class="line">            A[i][j] = *p;</div><div class="line">            *p = temp;</div><div class="line">            p += <span class="number">19</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h6 id="3-66"><a href="#3-66" class="headerlink" title="3.66"></a>3.66</h6><p>你负责维护一个大型的 C 程序时，遇到下面这样的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">     <span class="keyword">int</span> left;</div><div class="line">     a_struct a[CNT];</div><div class="line">     <span class="keyword">int</span> right;</div><div class="line">&#125; b_struct;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i, b_struct *bp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = bp-&gt;left + bp-&gt;right;</div><div class="line">    a_struct *ap = &amp;bp-&gt;a[i];</div><div class="line">    ap-&gt;x[ap-&gt;idx] = n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译时常数 CNT 和结构 a_struct 的声明在一个你没有访问权限的文件中。幸好，你有代码的’.o’版本，可以用 objdump 程序来反汇编这些文件，得到下面的反汇编代码：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">00000000</span> &lt;test&gt;:</div><div class="line"><span class="number">0</span>:  <span class="number">55</span>                   push %ebp</div><div class="line"><span class="number">1</span>:  <span class="number">89</span> e5                mov %esp, %ebp</div><div class="line"><span class="number">3</span>:  <span class="number">53</span>                   push %ebx</div><div class="line"><span class="number">4</span>:  <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>             mov <span class="number">0x8</span>(%ebp), %eax</div><div class="line"><span class="number">7</span>:  <span class="number">8</span>b <span class="number">4</span>d <span class="number">0</span>c             mov <span class="number">0xc</span>(%ebp), %ecx</div><div class="line">a:  <span class="number">6</span>b d8 <span class="number">1</span>c             imul $<span class="number">0x1c</span>, %eax, %ebx</div><div class="line">d:  <span class="number">8</span>d <span class="number">14</span> c5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> lea <span class="number">0x0</span>(,%eax,<span class="number">8</span>), %edx</div><div class="line"><span class="number">14</span>: <span class="number">29</span> c2                sub %eax, %edx</div><div class="line"><span class="number">16</span>: <span class="number">03</span> <span class="number">54</span> <span class="number">19</span> <span class="number">04</span>          add <span class="number">0x4</span>(%ecx,%ebx,<span class="number">1</span>), %edx</div><div class="line"><span class="number">1</span>a: <span class="number">8</span>b <span class="number">81</span> c3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    mov <span class="number">0xc8</span>(%ecx), %eax</div><div class="line"><span class="number">20</span>: <span class="number">03</span> <span class="number">01</span>                add (%ecx), %eax</div><div class="line"><span class="number">22</span>: <span class="number">89</span> <span class="number">44</span> <span class="number">91</span> <span class="number">08</span>          mov %eax, <span class="number">0x8</span>(%ecx,%edx,<span class="number">4</span>)</div><div class="line"><span class="number">25</span>: <span class="number">5</span>b                   pop %ebx</div><div class="line"><span class="number">27</span>: <span class="number">5</span>d                   pop %ebp</div><div class="line"><span class="number">28</span>: c3                   ret</div></pre></td></tr></table></figure>
<p>运用你的逆向工程技术，推断下列的内容：<br>A. CNT 的值<br>B. 结构 a_struct 的完整声明。假设这个结构只有字段 idx 和 x。</p>
<p><strong>答：</strong><br>A. CNT的值为7<br>B. a_struct的完整声明如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> a_struct&#123;</div><div class="line">    <span class="keyword">int</span> idx;</div><div class="line">    <span class="keyword">int</span> x[<span class="number">6</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整段代码顺序看不容易理解，所以倒序推导。首先根据第13行<code>mov %eax, 0x8(%ecx,%edx,4)</code>可知道其等价于C代码中的<code>ap-&gt;x[ap-&gt;idx] = n</code>语句。那么自然而然%eax就是n了，后面<code>%ecx + %edx*4 + 8</code>语句就是<code>a[i]-&gt;x[ap-&gt;idx]</code>。再根据第6行<code>mov 0xc(%ebp), %ecx</code>语句可知%ecx就是<code>bp</code>指针。所以<code>%edx*4 + 8</code>就相当于对于<code>bp</code>指针的偏移量。<br>再往上看第11行<code>mov 0xc8(%ecx), %eax</code>还有第12行<code>add (%ecx), %eax</code>，其实就相当于C代码中的<code>int n = bp-&gt;left + bp-&gt;right</code>。由此可知bp-&gt;right相对于bp-left偏移了0xc8(200)个字节。那么<code>a[CNT]</code>的空间就应该为<code>200-4=196</code>字节。<br>再看看第7行<code>imul $0x1c, %eax, %ebx</code>，可以猜想到ebx应该存放的是相对于a[0]地址的偏移量，28*i。由于i是下标，所以很显然就可以得到<code>196/28=7</code>个<code>a_struct</code>数组，且<code>a_struct</code>结构体占用的空间为 28 字节。</p>
<table>
<thead>
<tr>
<th style="text-align:center">int left</th>
<th style="text-align:center">4字节</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a[0]</td>
<td style="text-align:center">28字节</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">a[6]</td>
<td style="text-align:center">28字节</td>
</tr>
<tr>
<td style="text-align:center">int right</td>
<td style="text-align:center">4字节</td>
</tr>
</tbody>
</table>
<p>整个内存空间如上所示。</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d:  <span class="number">8</span>d <span class="number">14</span> c5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> lea <span class="number">0x0</span>(,%eax,<span class="number">8</span>), %edx</div><div class="line"><span class="number">14</span>: <span class="number">29</span> c2                sub %eax, %edx</div><div class="line"><span class="number">16</span>: <span class="number">03</span> <span class="number">54</span> <span class="number">19</span> <span class="number">04</span>          add <span class="number">0x4</span>(%ecx,%ebx,<span class="number">1</span>), %edx<span class="comment">//7i+idx</span></div></pre></td></tr></table></figure>
<p>根据这三条语句以及之前得出的<code>%edx*4 + 8</code>为x[a[i]-&gt;idx]相对于bp的偏移量，7i为相对于<code>left</code>的偏移量，idx为相对于<code>idx</code>的偏移量。最后+8是把<code>left</code>还有<code>idx</code>的偏移量算上。<br>综上推测，整个汇编满足<code>void test(int i, b_struct *bp)</code>函数所表达的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浮点数除0与整数除0的问题]]></title>
      <url>http://blublu.xyz/computer-principle/%E6%B5%AE%E7%82%B9%E6%95%B0%E9%99%A40%E4%B8%8E%E6%95%B4%E6%95%B0%E9%99%A40%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="整数的除运算"><a href="#整数的除运算" class="headerlink" title="整数的除运算"></a>整数的除运算</h2><p>代码一：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a = <span class="number">0x80000000</span>;</div><div class="line">	<span class="keyword">int</span> b = a/<span class="number">-1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b );</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码二：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a = <span class="number">0x80000000</span>;</div><div class="line">	<span class="keyword">int</span> b = a/<span class="number">-1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b );</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>虽然以上两段代码看起来的功能都是一样的，就是变量 a 除以 -1 。但是实际运行起来的结果却迥然不同。<br><strong>第一段代码的结果：</strong><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122347.jpg" alt=""><br><strong>第二段代码的结果：</strong><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122401.jpg" alt=""><br>和我们预想的两段代码的结果一致预期不符。为了弄清楚原因，反汇编是最好的选择。<br>第一段代码的汇编代码：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">0804840</span>b &lt;main&gt;:</div><div class="line"><span class="number">804840</span>b:   <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">04</span>             lea    <span class="number">0x4</span>(%esp),%ecx</div><div class="line"><span class="number">804840</span>f:   <span class="number">83</span> e4 f0                and    $<span class="number">0xfffffff0</span>,%esp</div><div class="line"><span class="number">8048412</span>:   ff <span class="number">71</span> fc                pushl  <span class="number">-0x4</span>(%ecx)</div><div class="line"><span class="number">8048415</span>:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048416</span>:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048418</span>:   <span class="number">51</span>                      push   %ecx</div><div class="line"><span class="number">8048419</span>:   <span class="number">83</span> ec <span class="number">14</span>                sub    $<span class="number">0x14</span>,%esp</div><div class="line"><span class="number">804841</span>c:   c7 <span class="number">45</span> f0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span>    movl   $<span class="number">0x80000000</span>,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048423</span>:   <span class="number">8</span>b <span class="number">45</span> f0                mov    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048426</span>:   f7 d8                   neg    %eax</div><div class="line"><span class="number">8048428</span>:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">804842</span>b:   <span class="number">83</span> ec <span class="number">08</span>                sub    $<span class="number">0x8</span>,%esp</div><div class="line"><span class="number">804842</span>e:   ff <span class="number">75</span> f4                pushl  <span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048431</span>:   <span class="number">68</span> d0 <span class="number">84</span> <span class="number">04</span> <span class="number">08</span>          push   $<span class="number">0x80484d0</span></div><div class="line"><span class="number">8048436</span>:   e8 a5 fe ff ff          call   <span class="number">80482e0</span> &lt;printf@plt&gt;</div><div class="line"><span class="number">804843</span>b:   <span class="number">83</span> c4 <span class="number">10</span>                add    $<span class="number">0x10</span>,%esp</div><div class="line"><span class="number">804843</span>e:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048443</span>:   <span class="number">8</span>b <span class="number">4</span>d fc                mov    <span class="number">-0x4</span>(%ebp),%ecx</div><div class="line"><span class="number">8048446</span>:   c9                      leave  </div><div class="line"><span class="number">8048447</span>:   <span class="number">8</span>d <span class="number">61</span> fc                lea    <span class="number">-0x4</span>(%ecx),%esp</div><div class="line"><span class="number">804844</span>a:   c3                      ret    </div><div class="line"><span class="number">804844</span>b:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">804844</span>d:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">804844</span>f:   <span class="number">90</span>                      nop</div></pre></td></tr></table></figure>
<p>第二段代码的汇编代码：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="number">0804840</span>b &lt;main&gt;:</div><div class="line"><span class="number">804840</span>b:   <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">04</span>             lea    <span class="number">0x4</span>(%esp),%ecx</div><div class="line"><span class="number">804840</span>f:   <span class="number">83</span> e4 f0                and    $<span class="number">0xfffffff0</span>,%esp</div><div class="line"><span class="number">8048412</span>:   ff <span class="number">71</span> fc                pushl  <span class="number">-0x4</span>(%ecx)</div><div class="line"><span class="number">8048415</span>:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048416</span>:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048418</span>:   <span class="number">51</span>                      push   %ecx</div><div class="line"><span class="number">8048419</span>:   <span class="number">83</span> ec <span class="number">14</span>                sub    $<span class="number">0x14</span>,%esp</div><div class="line"><span class="number">804841</span>c:   c7 <span class="number">45</span> ec <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span>    movl   $<span class="number">0x80000000</span>,<span class="number">-0x14</span>(%ebp)</div><div class="line"><span class="number">8048423</span>:   c7 <span class="number">45</span> f0 ff ff ff ff    movl   $<span class="number">0xffffffff</span>,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">804842</span>a:   <span class="number">8</span>b <span class="number">45</span> ec                mov    <span class="number">-0x14</span>(%ebp),%eax</div><div class="line"><span class="number">804842</span>d:   <span class="number">99</span>                      cltd   </div><div class="line"><span class="number">804842</span>e:   f7 <span class="number">7</span>d f0                idivl  <span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048431</span>:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048434</span>:   <span class="number">83</span> ec <span class="number">08</span>                sub    $<span class="number">0x8</span>,%esp</div><div class="line"><span class="number">8048437</span>:   ff <span class="number">75</span> f4                pushl  <span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">804843</span>a:   <span class="number">68</span> e0 <span class="number">84</span> <span class="number">04</span> <span class="number">08</span>          push   $<span class="number">0x80484e0</span></div><div class="line"><span class="number">804843</span>f:   e8 <span class="number">9</span>c fe ff ff          call   <span class="number">80482e0</span> &lt;printf@plt&gt;</div><div class="line"><span class="number">8048444</span>:   <span class="number">83</span> c4 <span class="number">10</span>                add    $<span class="number">0x10</span>,%esp</div><div class="line"><span class="number">8048447</span>:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">804844</span>c:   <span class="number">8</span>b <span class="number">4</span>d fc                mov    <span class="number">-0x4</span>(%ebp),%ecx</div><div class="line"><span class="number">804844</span>f:   c9                      leave  </div><div class="line"><span class="number">8048450</span>:   <span class="number">8</span>d <span class="number">61</span> fc                lea    <span class="number">-0x4</span>(%ecx),%esp</div><div class="line"><span class="number">8048453</span>:   c3                      ret    </div><div class="line"><span class="number">8048454</span>:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048456</span>:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048458</span>:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">804845</span>a:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">804845</span>c:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">804845</span>e:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div></pre></td></tr></table></figure>
<p>通过对比可以看到，第一段代码的汇编代码中是直接用<code>neg</code>指令对变量a进行求相反数（全部按位取反再+1，也就是求相反数的补码）得到结果，而同时又因为符号位溢出了，所以导致相反数的补码与自身补码一致，所以结果不变，依然为-2147483648。而第二段中是用<code>idivl</code>指令做除法运算的。按2进制的除法运算规则0x80000000这个数(十进制为-2147483648)它除以-1应该为十进制的2147483648。但是%eax这个寄存器是32位的，它能存储的最大数字是2147483647，导致的结果就是真实的值无法存入%eax这个寄存器里面，便出现了上述与代码一截然不同的结果。</p>
<hr>
<h2 id="整数除0与浮点数除0的问题"><a href="#整数除0与浮点数除0的问题" class="headerlink" title="整数除0与浮点数除0的问题"></a>整数除0与浮点数除0的问题</h2><p>依然通过两段代码来探讨这两个问题：<br>代码一：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//代码一</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a/b );</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码二：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//代码二</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> x=<span class="number">1.0</span>,y=<span class="number">-1.0</span>,z=<span class="number">0.0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%f,%f\n"</span>, x/z,y/z);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码一的结果：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-123246.jpg" alt=""><br>代码二的结果：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-124516.jpg" alt=""></p>
<p>可以看到，整数除0与浮点数除0的结果是不相同的，整数除0会报异常，而浮点数除0则会得到inf的结果。</p>
<p><strong>代码一汇编代码：</strong></p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="number">0804840</span>b &lt;main&gt;:</div><div class="line"><span class="number">804840</span>b:   <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">04</span>             lea    <span class="number">0x4</span>(%esp),%ecx</div><div class="line"><span class="number">804840</span>f:   <span class="number">83</span> e4 f0                and    $<span class="number">0xfffffff0</span>,%esp</div><div class="line"><span class="number">8048412</span>:   ff <span class="number">71</span> fc                pushl  <span class="number">-0x4</span>(%ecx)</div><div class="line"><span class="number">8048415</span>:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048416</span>:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048418</span>:   <span class="number">51</span>                      push   %ecx</div><div class="line"><span class="number">8048419</span>:   <span class="number">83</span> ec <span class="number">14</span>                sub    $<span class="number">0x14</span>,%esp</div><div class="line"><span class="number">804841</span>c:   c7 <span class="number">45</span> f0 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x1</span>,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048423</span>:   c7 <span class="number">45</span> f4 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x0</span>,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">804842</span>a:   <span class="number">8</span>b <span class="number">45</span> f0                mov    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">804842</span>d:   <span class="number">99</span>                      cltd   </div><div class="line"><span class="number">804842</span>e:   f7 <span class="number">7</span>d f4                idivl  <span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048431</span>:   <span class="number">83</span> ec <span class="number">08</span>                sub    $<span class="number">0x8</span>,%esp</div><div class="line"><span class="number">8048434</span>:   <span class="number">50</span>                      push   %eax</div><div class="line"><span class="number">8048435</span>:   <span class="number">68</span> d0 <span class="number">84</span> <span class="number">04</span> <span class="number">08</span>          push   $<span class="number">0x80484d0</span></div><div class="line"><span class="number">804843</span>a:   e8 a1 fe ff ff          call   <span class="number">80482e0</span> &lt;printf@plt&gt;</div><div class="line"><span class="number">804843</span>f:   <span class="number">83</span> c4 <span class="number">10</span>                add    $<span class="number">0x10</span>,%esp</div><div class="line"><span class="number">8048442</span>:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048447</span>:   <span class="number">8</span>b <span class="number">4</span>d fc                mov    <span class="number">-0x4</span>(%ebp),%ecx</div><div class="line"><span class="number">804844</span>a:   c9                      leave  </div><div class="line"><span class="number">804844</span>b:   <span class="number">8</span>d <span class="number">61</span> fc                lea    <span class="number">-0x4</span>(%ecx),%esp</div><div class="line"><span class="number">804844</span>e:   c3                      ret    </div><div class="line"><span class="number">804844</span>f:   <span class="number">90</span>                      nop</div></pre></td></tr></table></figure>
<p><strong>代码二的汇编代码：</strong></p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="number">0804840</span>b &lt;main&gt;:</div><div class="line"> <span class="number">804840</span>b:   <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">04</span>             lea    <span class="number">0x4</span>(%esp),%ecx</div><div class="line"> <span class="number">804840</span>f:   <span class="number">83</span> e4 f0                and    $<span class="number">0xfffffff0</span>,%esp</div><div class="line"> <span class="number">8048412</span>:   ff <span class="number">71</span> fc                pushl  <span class="number">-0x4</span>(%ecx)</div><div class="line"> <span class="number">8048415</span>:   <span class="number">55</span>                      push   %ebp</div><div class="line"> <span class="number">8048416</span>:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"> <span class="number">8048418</span>:   <span class="number">51</span>                      push   %ecx</div><div class="line"> <span class="number">8048419</span>:   <span class="number">83</span> ec <span class="number">24</span>                sub    $<span class="number">0x24</span>,%esp</div><div class="line"> <span class="number">804841</span>c:   d9 e8                   fld1   <span class="comment">//将1.0压入ST(0)中</span></div><div class="line"> <span class="number">804841</span>e:   dd <span class="number">5</span>d e0                fstpl  <span class="number">-0x20</span>(%ebp)<span class="comment">//将ST(0)中的数据以浮点数形式存入-0x20(%ebp)地址中，且进行出栈操作</span></div><div class="line"> <span class="number">8048421</span>:   d9 e8                   fld1   <span class="comment">//将1.0压入ST(0)中</span></div><div class="line"> <span class="number">8048423</span>:   d9 e0                   fchs   <span class="comment">//取 ST(0) 符号位的反</span></div><div class="line"> <span class="number">8048425</span>:   dd <span class="number">5</span>d e8                fstpl  <span class="number">-0x18</span>(%ebp)<span class="comment">//将ST(0)中的数据以浮点数形式存入-0x18(%ebp)地址中，且进行出栈操作</span></div><div class="line"> <span class="number">8048428</span>:   d9 ee                   fldz   <span class="comment">//将0.0压入ST(0)中</span></div><div class="line"> <span class="number">804842</span>a:   dd <span class="number">5</span>d f0                fstpl  <span class="number">-0x10</span>(%ebp)<span class="comment">//将ST(0)中的数据以浮点数形式存入-0x10(%ebp)地址中，且进行出栈操作</span></div><div class="line"> <span class="number">804842</span>d:   dd <span class="number">45</span> e8                fldl   <span class="number">-0x18</span>(%ebp)<span class="comment">//将浮点数-0x18(%ebp)压入ST(0)中</span></div><div class="line"> <span class="number">8048430</span>:   dc <span class="number">75</span> f0                fdivl  <span class="number">-0x10</span>(%ebp)<span class="comment">//将 ST(0) 除以 -0x10(%ebp)，结果存储到 ST(0)</span></div><div class="line"> <span class="number">8048433</span>:   dd <span class="number">45</span> e0                fldl   <span class="number">-0x20</span>(%ebp)<span class="comment">//将浮点数-0x18(%ebp)压入ST(0)中，当ST(0)存在数据时，执行压栈操作后，ST(0)中的数据将装入ST(1)中</span></div><div class="line"> <span class="number">8048436</span>:   dc <span class="number">75</span> f0                fdivl  <span class="number">-0x10</span>(%ebp)<span class="comment">//将 ST(0) 除以 -0x10(%ebp)，结果存储到 ST(0)</span></div><div class="line"> <span class="number">8048439</span>:   d9 c9                   fxch   %st(<span class="number">1</span>)<span class="comment">//ST(0)与ST(1)交换数据</span></div><div class="line"> <span class="number">804843</span>b:   <span class="number">83</span> ec <span class="number">0</span>c                sub    $<span class="number">0xc</span>,%esp</div><div class="line"> <span class="number">804843</span>e:   <span class="number">8</span>d <span class="number">64</span> <span class="number">24</span> f8             lea    <span class="number">-0x8</span>(%esp),%esp</div><div class="line"> <span class="number">8048442</span>:   dd <span class="number">1</span>c <span class="number">24</span>                fstpl  (%esp)<span class="comment">//将ST(0)中的数据以浮点数形式存入(%esp)中,之后ST(1)的数据会自动转入ST(0)中</span></div><div class="line"> <span class="number">8048445</span>:   <span class="number">8</span>d <span class="number">64</span> <span class="number">24</span> f8             lea    <span class="number">-0x8</span>(%esp),%esp</div><div class="line"> <span class="number">8048449</span>:   dd <span class="number">1</span>c <span class="number">24</span>                fstpl  (%esp)<span class="comment">//将ST(0)中的数据以浮点数形式存入(%esp)中</span></div><div class="line"> <span class="number">804844</span>c:   <span class="number">68</span> f0 <span class="number">84</span> <span class="number">04</span> <span class="number">08</span>          push   $<span class="number">0x80484f0</span></div><div class="line"> <span class="number">8048451</span>:   e8 <span class="number">8</span>a fe ff ff          call   <span class="number">80482e0</span> &lt;printf@plt&gt;</div><div class="line"> <span class="number">8048456</span>:   <span class="number">83</span> c4 <span class="number">20</span>                add    $<span class="number">0x20</span>,%esp</div><div class="line"> <span class="number">8048459</span>:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"> <span class="number">804845</span>e:   <span class="number">8</span>b <span class="number">4</span>d fc                mov    <span class="number">-0x4</span>(%ebp),%ecx</div><div class="line"> <span class="number">8048461</span>:   c9                      leave  </div><div class="line"> <span class="number">8048462</span>:   <span class="number">8</span>d <span class="number">61</span> fc                lea    <span class="number">-0x4</span>(%ecx),%esp</div><div class="line"> <span class="number">8048465</span>:   c3                      ret    </div><div class="line"> <span class="number">8048466</span>:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"> <span class="number">8048468</span>:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"> <span class="number">804846</span>a:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"> <span class="number">804846</span>c:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"> <span class="number">804846</span>e:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div></pre></td></tr></table></figure>
<p>可以看到，整数除0与浮点数除0所用的指令是不相同的。</p>
<p><strong>浮点数是如何做除法的？</strong><br>浮点寄存器是通过栈结构来实现的，由ST(0)～ST(7)共8个栈空间组成，每个浮点寄存器占8字节。每次使用浮点寄存器都是率先使用ST(0)，而不能越过ST(0)直接使用ST(1)。浮点寄存器的使用就是压栈、出栈的过程。当ST(0)存在数据时，执行压栈操作后，ST(0)中的数据将装入ST(1)中，如无出栈操作，将顺序地向下压栈，直到将浮点寄存器占满。<br>若浮点数寄存器已满，此时再有数据压栈，则栈中的数据将会从ST(7)开始依次出栈转存入内存。</p>
<p>代码2是浮点数除0，计算机用浮点数表示0的时候并不能做到精确的保存，一方面为浮点数除法提供了可能，另一方面一个数除以过于靠近0的数可能会导致结果过大而溢出，所以计算机对这类的计算作出了统一处理。用inf(011111111110…0)和-inf(111111111110…0)作为这类结果。</p>
<p>因为浮点数使用FPU计算的原因，所以才导致了以上整数除 0 出现异常，而浮点数除 0 会得到<code>inf</code> 与<code>-inf</code>的结果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解计算机系统-拆炸弹实验]]></title>
      <url>http://blublu.xyz/computer-principle/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E6%8B%86%E7%82%B8%E5%BC%B9%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>查看bomb.c文件里的main函数，可以发现它在分析完命令行的参数完成之后调用了initialize_bomb()函数，之后输出了两个语句。紧接着就是read_line()函数，显然这个是读取我们所需要的字符，接着就是phase_1()与phase_defused()函数了。再往下看，可以看出分别调用了phase_1 ~ phase_6六个函数，这应该就是每个拆除炸弹的阶段函数了。<br>通过<code>objdump -d bomb &gt; bomb.s</code>把反汇编代码输出到bomb.s文件上，方便查找。<br>接下来就是逐个阶段的分析了</p>
<h6 id="phase1"><a href="#phase1" class="headerlink" title="phase1"></a>phase1</h6><p>首先找到phase_1函数的汇编代码如下:</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048</span>f61 &lt;phase_1&gt;:</div><div class="line"><span class="number">8048</span>f61:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048</span>f62:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048</span>f64:   <span class="number">83</span> ec <span class="number">18</span>                sub    $<span class="number">0x18</span>,%esp</div><div class="line"><span class="number">8048</span>f67:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">5</span>c a1 <span class="number">04</span>    movl   $<span class="number">0x804a15c</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048</span>f6e:   <span class="number">08</span> </div><div class="line"><span class="number">8048</span>f6f:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>f72:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048</span>f75:   e8 <span class="number">31</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">8048</span>fab &lt;strings_not_equal&gt;</div><div class="line"><span class="number">8048</span>f7a:   <span class="number">85</span> c0                   test   %eax,%eax</div><div class="line"><span class="number">8048</span>f7c:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>f83 &lt;phase_1+<span class="number">0x22</span>&gt;</div><div class="line"><span class="number">8048</span>f7e:   e8 <span class="number">4</span>e <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>f83:   c9                      leave  </div><div class="line"><span class="number">8048</span>f84:   c3                      ret    </div><div class="line"><span class="number">8048</span>f85:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f86:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f87:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f88:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f89:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8a:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8b:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8c:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8d:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8e:   <span class="number">90</span>                      nop</div><div class="line"><span class="number">8048</span>f8f:   <span class="number">90</span>                      nop</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>看完整段代码可以发现主要入栈了两个地址上的函数（调用函数）：<code>call   8048fab &lt;strings_not_equal&gt;</code>与<code>call   80490d1 &lt;explode_bomb&gt;</code>。根据字面意思可以猜测出大概的逻辑为:比较输入的字符是否与源字符相等，不相等则拆炸弹失败。根据后面的<code>test   %eax,%eax</code>指令我们也可以看到，eax寄存器里的值必须为0，这样test之后值才会为0，ZF才会置1，je(等同于jz)才会跳转。也就是说<strings_not_equal>必须返回0才能继续进行。<br>再往上看可以看到<code>movl   $0x804a15c,0x4(%esp)</code>指令，把立即数（0x804a15c地址里的值）送入0x4(%esp)中;再往下就可以看到<code>mov    0x8(%ebp),%eax</code>指令，可以假设前一条指令是把源字符送入0x4(%esp)中，而后一条就是把我们输入的指令送入%esp中。所以我们可以在gdb里用x /s 0x804a15c查看0x804a15c地址里的内容：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122443.jpg" alt=""><br><code>We have to stand with our North Korean allies.</code>应该就是拆炸弹所需的密钥了，可以把bomb跑起来试试看第一条密钥是否正确。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122457.jpg" alt=""><br>可以看到炸弹已经拆除了。</strings_not_equal></p>
<hr>
<h6 id="phase2"><a href="#phase2" class="headerlink" title="phase2"></a>phase2</h6><p>phase_2的汇编代码如下：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048</span>d6a &lt;phase_2&gt;:</div><div class="line"><span class="number">8048</span>d6a:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048</span>d6b:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048</span>d6d:   <span class="number">56</span>                      push   %esi</div><div class="line"><span class="number">8048</span>d6e:   <span class="number">53</span>                      push   %ebx</div><div class="line"><span class="number">8048</span>d6f:   <span class="number">83</span> ec <span class="number">30</span>                sub    $<span class="number">0x30</span>,%esp</div><div class="line"><span class="number">8048</span>d72:   <span class="number">8</span>d <span class="number">45</span> e0                lea    <span class="number">-0x20</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d75:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">04</span>             mov    %eax,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048</span>d79:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d7c:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048</span>d7f:   e8 <span class="number">87</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">804910</span>b &lt;read_six_numbers&gt;</div><div class="line"><span class="number">8048</span>d84:   <span class="number">83</span> <span class="number">7</span>d e0 <span class="number">00</span>             cmpl   $<span class="number">0x0</span>,<span class="number">-0x20</span>(%ebp)</div><div class="line"><span class="number">8048</span>d88:   <span class="number">75</span> <span class="number">06</span>                   jne    <span class="number">8048</span>d90 &lt;phase_2+<span class="number">0x26</span>&gt;</div><div class="line"><span class="number">8048</span>d8a:   <span class="number">83</span> <span class="number">7</span>d e4 <span class="number">01</span>             cmpl   $<span class="number">0x1</span>,<span class="number">-0x1c</span>(%ebp)</div><div class="line"><span class="number">8048</span>d8e:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>d95 &lt;phase_2+<span class="number">0x2b</span>&gt;</div><div class="line"><span class="number">8048</span>d90:   e8 <span class="number">3</span>c <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>d95:   <span class="number">8</span>d <span class="number">5</span>d e8                lea    <span class="number">-0x18</span>(%ebp),%ebx</div><div class="line"><span class="number">8048</span>d98:   <span class="number">8</span>d <span class="number">75</span> f8                lea    <span class="number">-0x8</span>(%ebp),%esi</div><div class="line"><span class="number">8048</span>d9b:   <span class="number">8</span>b <span class="number">43</span> fc                mov    <span class="number">-0x4</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>d9e:   <span class="number">03</span> <span class="number">43</span> f8                add    <span class="number">-0x8</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>da1:   <span class="number">39</span> <span class="number">03</span>                   cmp    %eax,(%ebx)</div><div class="line"><span class="number">8048</span>da3:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>daa &lt;phase_2+<span class="number">0x40</span>&gt;</div><div class="line"><span class="number">8048</span>da5:   e8 <span class="number">27</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>daa:   <span class="number">83</span> c3 <span class="number">04</span>                add    $<span class="number">0x4</span>,%ebx</div><div class="line"><span class="number">8048</span>dad:   <span class="number">39</span> f3                   cmp    %esi,%ebx</div><div class="line"><span class="number">8048</span>daf:   <span class="number">75</span> ea                   jne    <span class="number">8048</span>d9b &lt;phase_2+<span class="number">0x31</span>&gt;</div><div class="line"><span class="number">8048</span>db1:   <span class="number">83</span> c4 <span class="number">30</span>                add    $<span class="number">0x30</span>,%esp</div><div class="line"><span class="number">8048</span>db4:   <span class="number">5</span>b                      pop    %ebx</div><div class="line"><span class="number">8048</span>db5:   <span class="number">5</span>e                      pop    %esi</div><div class="line"><span class="number">8048</span>db6:   <span class="number">5</span>d                      pop    %ebp</div><div class="line"><span class="number">8048</span>db7:   c3                      ret</div></pre></td></tr></table></figure>
<p>这一段汇编代码主要调用的两个函数就是<code>&lt;read_six_numbers&gt;</code>和<code>&lt;explode_bomb&gt;</code>，<code>&lt;explode_bomb&gt;</code>从第一阶段可以知道这就是验证失败后调用的函数，<code>&lt;read_six_numbers&gt;</code>从字面意思可以猜测第二阶段是要输入六个数字来进行验证。</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>d84:   <span class="number">83</span> <span class="number">7</span>d e0 <span class="number">00</span>             cmpl   $<span class="number">0x0</span>,<span class="number">-0x20</span>(%ebp)</div><div class="line"><span class="number">8048</span>d88:   <span class="number">75</span> <span class="number">06</span>                   jne    <span class="number">8048</span>d90 &lt;phase_2+<span class="number">0x26</span>&gt;</div><div class="line"><span class="number">8048</span>d8a:   <span class="number">83</span> <span class="number">7</span>d e4 <span class="number">01</span>             cmpl   $<span class="number">0x1</span>,<span class="number">-0x1c</span>(%ebp)</div><div class="line"><span class="number">8048</span>d8e:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>d95 &lt;phase_2+<span class="number">0x2b</span>&gt;</div></pre></td></tr></table></figure>
<p>从这几个语句可以看出，首先用 0 和栈底指针ebp-0x20的地址上的数值（第一位数）相比较，如果不相等则跳转到<code>0x8048d90</code>也就是<code>&lt;explode_bomb&gt;</code>;同样接来下一句是用 1 和栈底指针ebp-0x20的地址上的数值（第二位数）相比较，相等的话则跳过<code>&lt;explode_bomb&gt;</code>继续执行。由此我们可以大胆猜测前两位就是0与1。</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>d95:   <span class="number">8</span>d <span class="number">5</span>d e8                lea    <span class="number">-0x18</span>(%ebp),%ebx</div><div class="line"><span class="number">8048</span>d98:   <span class="number">8</span>d <span class="number">75</span> f8                lea    <span class="number">-0x8</span>(%ebp),%esi</div><div class="line"><span class="number">8048</span>d9b:   <span class="number">8</span>b <span class="number">43</span> fc                mov    <span class="number">-0x4</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>d9e:   <span class="number">03</span> <span class="number">43</span> f8                add    <span class="number">-0x8</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>da1:   <span class="number">39</span> <span class="number">03</span>                   cmp    %eax,(%ebx)</div><div class="line"><span class="number">8048</span>da3:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>daa &lt;phase_2+<span class="number">0x40</span>&gt;</div><div class="line"><span class="number">8048</span>da5:   e8 <span class="number">27</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>daa:   <span class="number">83</span> c3 <span class="number">04</span>                add    $<span class="number">0x4</span>,%ebx</div><div class="line"><span class="number">8048</span>dad:   <span class="number">39</span> f3                   cmp    %esi,%ebx</div><div class="line"><span class="number">8048</span>daf:   <span class="number">75</span> ea                   jne    <span class="number">8048</span>d9b &lt;phase_2+<span class="number">0x31</span>&gt;</div></pre></td></tr></table></figure>
<p>上述代码第一条<code>lea    -0x18(%ebp),%ebx</code>就是把<code>-0x18(%ebp)</code>（第三位数）转移到<code>%ebx</code>中，再接着<code>lea    -0x8(%ebp),%esi</code>是把栈底往上的第三个值（用来做后续的循环验证条件）转移到<code>%esi</code>中。<br><strong>注意：</strong><br><code>mov    -0x4(%ebx),%eax</code>这条指令在第一次执行时的等价指令为<code>mov    -0x1c(%ebp),%ebx</code>（输入的第二个数字），<code>add    -0x8(%ebx),%eax</code>这条指令在第一次执行时的等价指令为<code>mov    -0x20(%ebp),%ebx</code>（输入的第一个数字）。所以综上两条指令的效果就是把输入的第一、第二位数字相加然后把结果送入<code>%eax</code>。然后用第三位数与<code>%eax</code>相比较，确认相同之后把<code>%ebx</code>加上4再作为循环条件与<code>%esi</code>相比较，如果相等就结束循环，否则继续跳转回去校验下一个数字。（<strong>校验规则为后一位为其前两位之和，第一第二位分别为0，1</strong>）</p>
<p>所以此时可以得出第三位的值为0+1=1，第四位为1+1=2，第五位为1+2=3，第六位为2+3=5。由此我们也可以得出<code>%esi</code>的值为5+4=9。<br>试着验证：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122536.jpg" alt=""><br>分析是正确的，第二阶段已经通过了！</p>
<hr>
<h6 id="phase3"><a href="#phase3" class="headerlink" title="phase3"></a>phase3</h6><p>phase_3的汇编代码如下：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048</span>ea1 &lt;phase_3&gt;:</div><div class="line"><span class="number">8048</span>ea1:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048</span>ea2:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048</span>ea4:   <span class="number">83</span> ec <span class="number">28</span>                sub    $<span class="number">0x28</span>,%esp</div><div class="line"><span class="number">8048</span>ea7:   <span class="number">8</span>d <span class="number">45</span> f0                lea    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>eaa:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">0</span>c             mov    %eax,<span class="number">0xc</span>(%esp)</div><div class="line"><span class="number">8048</span>eae:   <span class="number">8</span>d <span class="number">45</span> f4                lea    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>eb1:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             mov    %eax,<span class="number">0x8</span>(%esp)</div><div class="line"><span class="number">8048</span>eb5:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">3</span>e a2 <span class="number">04</span>    movl   $<span class="number">0x804a23e</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048</span>ebc:   <span class="number">08</span> </div><div class="line"><span class="number">8048</span>ebd:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>ec0:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048</span>ec3:   e8 <span class="number">78</span> f9 ff ff          call   <span class="number">8048840</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line"><span class="number">8048</span>ec8:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>ecb:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>ed2 &lt;phase_3+<span class="number">0x31</span>&gt;</div><div class="line"><span class="number">8048</span>ecd:   e8 ff <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>ed2:   <span class="number">83</span> <span class="number">7</span>d f4 <span class="number">07</span>             cmpl   $<span class="number">0x7</span>,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>ed6:   <span class="number">77</span> <span class="number">6</span>b                   ja     <span class="number">8048</span>f43 &lt;phase_3+<span class="number">0xa2</span>&gt;</div><div class="line"><span class="number">8048</span>ed8:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>edb:   ff <span class="number">24</span> <span class="number">85</span> a0 a1 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a1a0</span>(,%eax,<span class="number">4</span>)</div><div class="line"><span class="number">8048</span>ee2:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>ee7:   eb <span class="number">53</span>                   jmp    <span class="number">8048</span>f3c &lt;phase_3+<span class="number">0x9b</span>&gt;</div><div class="line"><span class="number">8048</span>ee9:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>eee:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048</span>ef0:   eb <span class="number">45</span>                   jmp    <span class="number">8048</span>f37 &lt;phase_3+<span class="number">0x96</span>&gt;</div><div class="line"><span class="number">8048</span>ef2:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>ef7:   eb <span class="number">39</span>                   jmp    <span class="number">8048</span>f32 &lt;phase_3+<span class="number">0x91</span>&gt;</div><div class="line"><span class="number">8048</span>ef9:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>efe:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048</span>f00:   eb <span class="number">2</span>b                   jmp    <span class="number">8048</span>f2d &lt;phase_3+<span class="number">0x8c</span>&gt;</div><div class="line"><span class="number">8048</span>f02:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f07:   eb <span class="number">1</span>f                   jmp    <span class="number">8048</span>f28 &lt;phase_3+<span class="number">0x87</span>&gt;</div><div class="line"><span class="number">8048</span>f09:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f0e:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048</span>f10:   eb <span class="number">11</span>                   jmp    <span class="number">8048</span>f23 &lt;phase_3+<span class="number">0x82</span>&gt;</div><div class="line"><span class="number">8048</span>f12:   b8 <span class="number">14</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x314</span>,%eax</div><div class="line"><span class="number">8048</span>f17:   eb <span class="number">05</span>                   jmp    <span class="number">8048</span>f1e &lt;phase_3+<span class="number">0x7d</span>&gt;</div><div class="line"><span class="number">8048</span>f19:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f1e:   <span class="number">2</span>d <span class="number">5</span>a <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x35a</span>,%eax</div><div class="line"><span class="number">8048</span>f23:   <span class="number">05</span> ef <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x2ef</span>,%eax</div><div class="line"><span class="number">8048</span>f28:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f2d:   <span class="number">05</span> <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f32:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f37:   <span class="number">05</span> <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f3c:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f41:   eb <span class="number">0</span>a                   jmp    <span class="number">8048</span>f4d &lt;phase_3+<span class="number">0xac</span>&gt;</div><div class="line"><span class="number">8048</span>f43:   e8 <span class="number">89</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>f48:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f4d:   <span class="number">83</span> <span class="number">7</span>d f4 <span class="number">05</span>             cmpl   $<span class="number">0x5</span>,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>f51:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>f58 &lt;phase_3+<span class="number">0xb7</span>&gt;</div><div class="line"><span class="number">8048</span>f53:   <span class="number">3</span>b <span class="number">45</span> f0                cmp    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>f56:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>f5d &lt;phase_3+<span class="number">0xbc</span>&gt;</div><div class="line"><span class="number">8048</span>f58:   e8 <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>f5d:   c9                      leave  </div><div class="line"><span class="number">8048</span>f5e:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048</span>f60:   c3                      ret</div></pre></td></tr></table></figure>
<p>首先看到如下指令：<br><figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ec3:   e8 <span class="number">78</span> f9 ff ff          call   <span class="number">8048840</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line"><span class="number">8048</span>ec8:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>ecb:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>ed2 &lt;phase_3+<span class="number">0x31</span>&gt;</div><div class="line"><span class="number">8048</span>ecd:   e8 ff <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>ed2:   <span class="number">83</span> <span class="number">7</span>d f4 <span class="number">07</span>             cmpl   $<span class="number">0x7</span>,<span class="number">-0xc</span>(%ebp)</div></pre></td></tr></table></figure></p>
<p><code>&lt;__isoc99_sscanf@plt&gt;</code>语句可以知道调用了c99标准中的scanf函数，在gdb中查看<code>0x804a23e</code>内存里的内容：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) x /s <span class="number">0x804a23e</span><span class="number">0x804a23e</span>:	<span class="string">"%d %d"</span></div></pre></td></tr></table></figure>
<p>可以知道是要输入两个数字</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ed2:   <span class="number">83</span> <span class="number">7</span>d f4 <span class="number">07</span>             cmpl   $<span class="number">0x7</span>,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>ed6:   <span class="number">77</span> <span class="number">6</span>b                   ja     <span class="number">8048</span>f43 &lt;phase_3+<span class="number">0xa2</span>&gt;</div></pre></td></tr></table></figure>
<p>这两句指令可以知道第一个指令是不能大于7的，否则跳转到<code>&lt;explode_bomb&gt;</code></p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ed8:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>edb:   ff <span class="number">24</span> <span class="number">85</span> a0 a1 <span class="number">04</span> <span class="number">08</span>    jmp    *<span class="number">0x804a1a0</span>(,%eax,<span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>而这两句指令就是一个switch语句，通过<code>-0xc(%ebp)</code>的值来决定具体的内存地址指令，以<code>0x804a1a0</code>为基址，%eax*4为偏址。又因为<code>mov    -0xc(%ebp),%eax</code>指令，可以知道%eax就是第一个参数的值，也就是switch的case条件，所以可以得出这样一个key-value：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:*<span class="number">0x804a1a0</span></div><div class="line"><span class="number">1</span>:*<span class="number">0x804a1a4</span></div><div class="line"><span class="number">2</span>:*<span class="number">0x804a1a8</span></div><div class="line"><span class="number">3</span>:*<span class="number">0x804a1ac</span></div><div class="line"><span class="number">4</span>:*<span class="number">0x804a1b0</span></div><div class="line"><span class="number">5</span>:*<span class="number">0x804a1b4</span></div></pre></td></tr></table></figure>
<p>case条件为以上值时它调用的地址。接着通过gdb分别查看他们具体的地址值：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122549.jpg" alt=""><br>可以看到，他们的具体的值分别如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">0x8048f12</span></div><div class="line"><span class="number">1</span>:<span class="number">0x8048f19</span></div><div class="line"><span class="number">2</span>:<span class="number">0x8048f09</span></div><div class="line"><span class="number">3</span>:<span class="number">0x8048f02</span></div><div class="line"><span class="number">4</span>:<span class="number">0x8048ef9</span></div><div class="line"><span class="number">5</span>:<span class="number">0x8048ef2</span></div></pre></td></tr></table></figure>
<p>然后我们从汇编代码的相应地址部分开始逐个分析，首先分析0时它的具体执行过程：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>f12:   b8 <span class="number">14</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x314</span>,%eax</div><div class="line"><span class="number">8048</span>f17:   eb <span class="number">05</span>                   jmp    <span class="number">8048</span>f1e &lt;phase_3+<span class="number">0x7d</span>&gt;</div><div class="line"><span class="number">8048</span>f19:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f1e:   <span class="number">2</span>d <span class="number">5</span>a <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x35a</span>,%eax</div><div class="line"><span class="number">8048</span>f23:   <span class="number">05</span> ef <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x2ef</span>,%eax</div><div class="line"><span class="number">8048</span>f28:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f2d:   <span class="number">05</span> <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f32:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f37:   <span class="number">05</span> <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          add    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f3c:   <span class="number">2</span>d <span class="number">16</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          sub    $<span class="number">0x216</span>,%eax</div><div class="line"><span class="number">8048</span>f41:   eb <span class="number">0</span>a                   jmp    <span class="number">8048</span>f4d &lt;phase_3+<span class="number">0xac</span>&gt;</div><div class="line"><span class="number">8048</span>f43:   e8 <span class="number">89</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>f48:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div><div class="line"><span class="number">8048</span>f4d:   <span class="number">83</span> <span class="number">7</span>d f4 <span class="number">05</span>             cmpl   $<span class="number">0x5</span>,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>f51:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>f58 &lt;phase_3+<span class="number">0xb7</span>&gt;</div><div class="line"><span class="number">8048</span>f53:   <span class="number">3</span>b <span class="number">45</span> f0                cmp    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>f56:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048</span>f5d &lt;phase_3+<span class="number">0xbc</span>&gt;</div><div class="line"><span class="number">8048</span>f58:   e8 <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>f5d:   c9                      leave</div></pre></td></tr></table></figure>
<p>1.把0x314送入%eax中，然后无条件跳转到<code>sub    $0x35a,%eax</code>语句中；<br>2.接着就是一系列的加减运算，中间有一段add 0x216与sub 0x216可以当做无效运算，因为它们的操作是对称的，不影响结果。<br>3.接下来就是无条件跳转到<code>cmpl   $0x5,-0xc(%ebp)</code>语句，从这条语句我们可以看到，第一个参数是不能大于5的，相比之前的小于7条件，缩小了范围，这也是为什么之前查看case条件跳转地址的时候只查看5个的原因。<br>4.接着就用<code>-0x10(%ebp)</code>（第二个参数）与%eax比较了，经过之前的运算可以得到%eax的最终结果为0x93(十进制的147)，比较成功之后就结束这一段程序了。<br>5.接着我们可以根据case条件的不同选择不同的跳转地址，然后根据具体的指令运算出%eax的最终结果，就不一一演示了，最终的结果为：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">147</span></div><div class="line"><span class="number">1</span>:<span class="number">-641</span></div><div class="line"><span class="number">2</span>:<span class="number">217</span></div><div class="line"><span class="number">3</span>:<span class="number">-534</span></div><div class="line"><span class="number">4</span>:<span class="number">0</span></div><div class="line"><span class="number">5</span>:<span class="number">-534</span></div></pre></td></tr></table></figure>
<p>6.其实了解了它最终的运算结束地址之后完全不必再根据case条件一个个的去运算，我们可以直接把断点设置在运算结束时的下一个地址，在输入条件的时候输入自己想要的case，结果暂时乱输入一个，运行到断点的时候可以用<code>info reg</code>查看<code>eax</code>中的内容。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122617.jpg" alt=""></p>
<hr>
<h6 id="phase4"><a href="#phase4" class="headerlink" title="phase4"></a>phase4</h6><p>phase_4汇编代码如下:</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048e2</span>e &lt;phase_4&gt;:</div><div class="line"><span class="number">8048e2</span>e:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048e2</span>f:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048e31</span>:   <span class="number">83</span> ec <span class="number">28</span>                sub    $<span class="number">0x28</span>,%esp</div><div class="line"><span class="number">8048e34</span>:   <span class="number">8</span>d <span class="number">45</span> f0                lea    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048e37</span>:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">0</span>c             mov    %eax,<span class="number">0xc</span>(%esp)</div><div class="line"><span class="number">8048e3</span>b:   <span class="number">8</span>d <span class="number">45</span> f4                lea    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048e3</span>e:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             mov    %eax,<span class="number">0x8</span>(%esp)</div><div class="line"><span class="number">8048e42</span>:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">3</span>e a2 <span class="number">04</span>    movl   $<span class="number">0x804a23e</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048e49</span>:   <span class="number">08</span> </div><div class="line"><span class="number">8048e4</span>a:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048e4</span>d:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048e50</span>:   e8 eb f9 ff ff          call   <span class="number">8048840</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line"><span class="number">8048e55</span>:   <span class="number">83</span> f8 <span class="number">02</span>                cmp    $<span class="number">0x2</span>,%eax</div><div class="line"><span class="number">8048e58</span>:   <span class="number">75</span> <span class="number">0</span>c                   jne    <span class="number">8048e66</span> &lt;phase_4+<span class="number">0x38</span>&gt;</div><div class="line"><span class="number">8048e5</span>a:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048e5</span>d:   <span class="number">85</span> c0                   test   %eax,%eax</div><div class="line"><span class="number">8048e5</span>f:   <span class="number">78</span> <span class="number">05</span>                   js     <span class="number">8048e66</span> &lt;phase_4+<span class="number">0x38</span>&gt;</div><div class="line"><span class="number">8048e61</span>:   <span class="number">83</span> f8 <span class="number">0</span>e                cmp    $<span class="number">0xe</span>,%eax</div><div class="line"><span class="number">8048e64</span>:   <span class="number">7</span>e <span class="number">05</span>                   jle    <span class="number">8048e6</span>b &lt;phase_4+<span class="number">0x3d</span>&gt;</div><div class="line"><span class="number">8048e66</span>:   e8 <span class="number">66</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048e6</span>b:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">08</span> <span class="number">0</span>e <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0xe</span>,<span class="number">0x8</span>(%esp)</div><div class="line"><span class="number">8048e72</span>:   <span class="number">00</span> </div><div class="line"><span class="number">8048e73</span>:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x0</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048e7</span>a:   <span class="number">00</span> </div><div class="line"><span class="number">8048e7</span>b:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048e7</span>e:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048e81</span>:   e8 da fc ff ff          call   <span class="number">8048</span>b60 &lt;func4&gt;</div><div class="line"><span class="number">8048e86</span>:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048e89</span>:   <span class="number">75</span> <span class="number">06</span>                   jne    <span class="number">8048e91</span> &lt;phase_4+<span class="number">0x63</span>&gt;</div><div class="line"><span class="number">8048e8</span>b:   <span class="number">83</span> <span class="number">7</span>d f0 <span class="number">01</span>             cmpl   $<span class="number">0x1</span>,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048e8</span>f:   <span class="number">74</span> <span class="number">0</span>c                   je     <span class="number">8048e9</span>d &lt;phase_4+<span class="number">0x6f</span>&gt;</div><div class="line"><span class="number">8048e91</span>:   <span class="number">8</span>d b4 <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    lea    <span class="number">0x0</span>(%esi,%eiz,<span class="number">1</span>),%esi</div><div class="line"><span class="number">8048e98</span>:   e8 <span class="number">34</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048e9</span>d:   c9                      leave  </div><div class="line"><span class="number">8048e9</span>e:   <span class="number">66</span> <span class="number">90</span>                   xchg   %ax,%ax</div><div class="line"><span class="number">8048</span>ea0:   c3                      ret</div></pre></td></tr></table></figure>
<p>根据<code>movl   $0x804a23e,0x4(%esp)</code>指令可以在gdb中查看<code>call   8048840 &lt;__isoc99_sscanf@plt&gt;</code>scanf函数与阶段三一样是需要输入两个数字的。<br>代码分析：<br>假设第一个参数为x，第二个参数为y。<br>1.输入完参数之后验证参数是否为2个，如果不是后续部分就不需要再进行下去了。<br>2.<code>mov    -0xc(%ebp),%eax</code>依然是熟悉的第一个参数的地址<code>-0xc(%ebp)</code>,接着就是测试x的符号位,<code>js     8048e66 &lt;phase_4+0x38&gt;</code>负数就跳转爆炸，所以x肯定是一个整数。又<code>cmp    $0xe,%eax</code>后跟jle指令跳转，所以x肯定也是不能大于0xe的。所以x的范围为：0~14。<br>3.</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048e6</span>b:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">08</span> <span class="number">0</span>e <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0xe</span>,<span class="number">0x8</span>(%esp)</div><div class="line"><span class="number">8048e72</span>:   <span class="number">00</span> </div><div class="line"><span class="number">8048e73</span>:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x0</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048e7</span>a:   <span class="number">00</span> </div><div class="line"><span class="number">8048e7</span>b:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048e7</span>e:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048e81</span>:   e8 da fc ff ff          call   <span class="number">8048</span>b60 &lt;func4&gt;</div></pre></td></tr></table></figure>
<p>可以看到调用func4前的指令，是把三个数：0xe、0x0、x分别入栈，所以可以知道func4的参数为（x，0，14）。<br>4.</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048e81</span>:   e8 da fc ff ff          call   <span class="number">8048</span>b60 &lt;func4&gt;</div><div class="line"><span class="number">8048e86</span>:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048e89</span>:   <span class="number">75</span> <span class="number">06</span>                   jne    <span class="number">8048e91</span> &lt;phase_4+<span class="number">0x63</span>&gt;</div><div class="line"><span class="number">8048e8</span>b:   <span class="number">83</span> <span class="number">7</span>d f0 <span class="number">01</span>             cmpl   $<span class="number">0x1</span>,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048e8</span>f:   <span class="number">74</span> <span class="number">0</span>c                   je     <span class="number">8048e9</span>d &lt;phase_4+<span class="number">0x6f</span>&gt;</div><div class="line"><span class="number">8048e91</span>:   <span class="number">8</span>d b4 <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    lea    <span class="number">0x0</span>(%esi,%eiz,<span class="number">1</span>),%esi</div><div class="line"><span class="number">8048e98</span>:   e8 <span class="number">34</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048e9</span>d:   c9                      leave</div></pre></td></tr></table></figure>
<p>再看调用func4结束之后的指令，首先%eax与0x1比较，不相等跳转爆炸。所以func4的返回值肯定必须为0x1，再接着就是用 0x1 与 -0x10(%ebp)（y）比较，相等则函数整个函数结束。所以y的值肯定也是为0x1的。<br>5.由上可知整个阶段的大概要点就是在0~14中的一个数传入func中经过一些列运算之后能够返回0x1，并且y同时也为1时整个拆炸弹过程成功。因为func4很繁杂，func4代码里还调用了自身（递归），一时间分析不出运算方法，又0~14并不是很大，所以采用试错，从0开始递增测试，最后的结果为<code>8 1</code>、<code>9 1</code>还有<code>11 1</code>这三组答案。</p>
<hr>
<h6 id="phase5"><a href="#phase5" class="headerlink" title="phase5"></a>phase5</h6><p>phase_5的汇编代码如下：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048</span>db8 &lt;phase_5&gt;:</div><div class="line"><span class="number">8048</span>db8:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048</span>db9:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048</span>dbb:   <span class="number">56</span>                      push   %esi</div><div class="line"><span class="number">8048</span>dbc:   <span class="number">53</span>                      push   %ebx</div><div class="line"><span class="number">8048</span>dbd:   <span class="number">83</span> ec <span class="number">20</span>                sub    $<span class="number">0x20</span>,%esp</div><div class="line"><span class="number">8048</span>dc0:   <span class="number">8</span>d <span class="number">45</span> f0                lea    <span class="number">-0x10</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>dc3:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">0</span>c             mov    %eax,<span class="number">0xc</span>(%esp)</div><div class="line"><span class="number">8048</span>dc7:   <span class="number">8</span>d <span class="number">45</span> f4                lea    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>dca:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             mov    %eax,<span class="number">0x8</span>(%esp)</div><div class="line"><span class="number">8048</span>dce:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">3</span>e a2 <span class="number">04</span>    movl   $<span class="number">0x804a23e</span>,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048</span>dd5:   <span class="number">08</span> </div><div class="line"><span class="number">8048</span>dd6:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>dd9:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048</span>ddc:   e8 <span class="number">5</span>f fa ff ff          call   <span class="number">8048840</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line"><span class="number">8048</span>de1:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>de4:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>deb &lt;phase_5+<span class="number">0x33</span>&gt;</div><div class="line"><span class="number">8048</span>de6:   e8 e6 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>deb:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>dee:   <span class="number">83</span> e0 <span class="number">0</span>f                and    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048</span>df1:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>df4:   <span class="number">83</span> f8 <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048</span>df7:   <span class="number">74</span> <span class="number">29</span>                   je     <span class="number">8048e22</span> &lt;phase_5+<span class="number">0x6a</span>&gt;</div><div class="line"><span class="number">8048</span>df9:   b9 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%ecx</div><div class="line"><span class="number">8048</span>dfe:   ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%edx</div><div class="line"><span class="number">8048e03</span>:   bb c0 a1 <span class="number">04</span> <span class="number">08</span>          mov    $<span class="number">0x804a1c0</span>,%ebx</div><div class="line"><span class="number">8048e08</span>:   <span class="number">83</span> c2 <span class="number">01</span>                add    $<span class="number">0x1</span>,%edx</div><div class="line"><span class="number">8048e0</span>b:   <span class="number">8</span>b <span class="number">04</span> <span class="number">83</span>                mov    (%ebx,%eax,<span class="number">4</span>),%eax</div><div class="line"><span class="number">8048e0</span>e:   <span class="number">01</span> c1                   add    %eax,%ecx</div><div class="line"><span class="number">8048e10</span>:   <span class="number">83</span> f8 <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048e13</span>:   <span class="number">75</span> f3                   jne    <span class="number">8048e08</span> &lt;phase_5+<span class="number">0x50</span>&gt;</div><div class="line"><span class="number">8048e15</span>:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048e18</span>:   <span class="number">83</span> fa <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%edx</div><div class="line"><span class="number">8048e1</span>b:   <span class="number">75</span> <span class="number">05</span>                   jne    <span class="number">8048e22</span> &lt;phase_5+<span class="number">0x6a</span>&gt;</div><div class="line"><span class="number">8048e1</span>d:   <span class="number">39</span> <span class="number">4</span>d f0                cmp    %ecx,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048e20</span>:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048e27</span> &lt;phase_5+<span class="number">0x6f</span>&gt;</div><div class="line"><span class="number">8048e22</span>:   e8 aa <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048e27</span>:   <span class="number">83</span> c4 <span class="number">20</span>                add    $<span class="number">0x20</span>,%esp</div><div class="line"><span class="number">8048e2</span>a:   <span class="number">5</span>b                      pop    %ebx</div><div class="line"><span class="number">8048e2</span>b:   <span class="number">5</span>e                      pop    %esi</div><div class="line"><span class="number">8048e2</span>c:   <span class="number">5</span>d                      pop    %ebp</div><div class="line"><span class="number">8048e2</span>d:   c3                      ret</div></pre></td></tr></table></figure>
<p>根据<code>movl   $0x804a23e,0x4(%esp)</code>指令可以在gdb中查看<code>call   8048840 &lt;__isoc99_sscanf@plt&gt;</code>scanf函数与阶段四一样是需要输入两个数字的。可以很清楚的知道<code>-0xc(%ebp)</code>与<code>-0x10(%ebp)</code>分别为第一个与第二个参数。再根据</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048e1</span>d:   <span class="number">39</span> <span class="number">4</span>d f0                cmp    %ecx,<span class="number">-0x10</span>(%ebp)</div><div class="line"><span class="number">8048e20</span>:   <span class="number">74</span> <span class="number">05</span>                   je     <span class="number">8048e27</span> &lt;phase_5+<span class="number">0x6f</span>&gt;</div></pre></td></tr></table></figure>
<p>最后这两条指令，可以知道最后经过运算后的%ecx与第二个参数相等时整个函数结束。<br>接着来解析一下下面这段指令：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ddc:   e8 <span class="number">5</span>f fa ff ff          call   <span class="number">8048840</span> &lt;__isoc99_sscanf@plt&gt;</div><div class="line"><span class="number">8048</span>de1:   <span class="number">83</span> f8 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>de4:   <span class="number">7</span>f <span class="number">05</span>                   jg     <span class="number">8048</span>deb &lt;phase_5+<span class="number">0x33</span>&gt;</div><div class="line"><span class="number">8048</span>de6:   e8 e6 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>deb:   <span class="number">8</span>b <span class="number">45</span> f4                mov    <span class="number">-0xc</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>dee:   <span class="number">83</span> e0 <span class="number">0</span>f                and    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048</span>df1:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048</span>df4:   <span class="number">83</span> f8 <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048</span>df7:   <span class="number">74</span> <span class="number">29</span>                   je     <span class="number">8048e22</span> &lt;phase_5+<span class="number">0x6a</span>&gt;</div><div class="line"><span class="number">8048</span>df9:   b9 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%ecx</div><div class="line"><span class="number">8048</span>dfe:   ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%edx</div><div class="line"><span class="number">8048e03</span>:   bb c0 a1 <span class="number">04</span> <span class="number">08</span>          mov    $<span class="number">0x804a1c0</span>,%ebx</div><div class="line"><span class="number">8048e08</span>:   <span class="number">83</span> c2 <span class="number">01</span>                add    $<span class="number">0x1</span>,%edx</div><div class="line"><span class="number">8048e0</span>b:   <span class="number">8</span>b <span class="number">04</span> <span class="number">83</span>                mov    (%ebx,%eax,<span class="number">4</span>),%eax</div><div class="line"><span class="number">8048e0</span>e:   <span class="number">01</span> c1                   add    %eax,%ecx</div><div class="line"><span class="number">8048e10</span>:   <span class="number">83</span> f8 <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%eax</div><div class="line"><span class="number">8048e13</span>:   <span class="number">75</span> f3                   jne    <span class="number">8048e08</span> &lt;phase_5+<span class="number">0x50</span>&gt;</div><div class="line"><span class="number">8048e15</span>:   <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</div><div class="line"><span class="number">8048e18</span>:   <span class="number">83</span> fa <span class="number">0</span>f                cmp    $<span class="number">0xf</span>,%edx</div><div class="line"><span class="number">8048e1</span>b:   <span class="number">75</span> <span class="number">05</span>                   jne    <span class="number">8048e22</span> &lt;phase_5+<span class="number">0x6a</span>&gt;</div></pre></td></tr></table></figure>
<p>我们假设第一个参数为x，第二参数为y。<br>1.scanf读取输入数字之后用<code>cmp    $0x1,%eax</code>指令验证输入参数是否大于1个，如果小于或等于则爆炸。然后是通过用x&amp;0xff，确保后四位不都为1，否则爆炸。接着就进入了一个循环，经过不断分析，整个循环大概意思如以下代码:</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ecx=<span class="number">0</span>;</div><div class="line">edx=<span class="number">0</span>;</div><div class="line">ebx=<span class="keyword">int</span> [];</div><div class="line"><span class="keyword">for</span>(edx=<span class="number">1</span>; eax != <span class="number">0xf</span>; edx++)&#123;</div><div class="line">    eax = ebx[eax];</div><div class="line">    ecx+=eax;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(edx == <span class="number">0xf</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(ecx == y)&#123;</div><div class="line">        phase_defused();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        explode_bomb();</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    explode_bomb();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.上面的代码的主要意思就是传入第一个参数之后，有一个计数器，每一次循环就++，循环到eax寄存器中的值0xf时才停止，但是同时要求是循环0xf次（15次）才满足要求，如果提前或者延后都会导致调用爆炸函数。<br>3.为什么知道ebx是一个数组？</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov    $<span class="number">0x804a1c0</span>,%ebx</div><div class="line">add    $<span class="number">0x1</span>,%edx</div><div class="line">mov    (%ebx,%eax,<span class="number">4</span>),%eax</div></pre></td></tr></table></figure>
<p>因为从第三句指令可以知道，是以%ebx为基址，%eax为偏移因子来计算具体的地址的。不难想象%eax是数组的下标，整个数组是int型，每一次都用<code>下标*4</code>来求出偏移地址。为了验证这个想法可以使用<code>p /x *(int*)0x804a1c0@50</code>指令在gdb中查看，因为不知道具体的数组的大小，所以可以随便@一个大小：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122645.jpg" alt=""><br>显然想法是正确的，整个数组有效数字为16位。分别为[a,2,e,7,8,c,f,b,0,4,1,d,3,9,6,5]（16进制）。所以下标与具体的值的对应关系如下:</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>:a</div><div class="line"><span class="number">1</span>:<span class="number">2</span></div><div class="line"><span class="number">2</span>:e</div><div class="line"><span class="number">3</span>:<span class="number">7</span></div><div class="line"><span class="number">4</span>:<span class="number">8</span></div><div class="line"><span class="number">5</span>:c</div><div class="line"><span class="number">6</span>:f</div><div class="line"><span class="number">7</span>:b</div><div class="line"><span class="number">8</span>:<span class="number">0</span></div><div class="line"><span class="number">9</span>:<span class="number">4</span></div><div class="line">a:<span class="number">1</span></div><div class="line">b:d</div><div class="line">c:<span class="number">3</span></div><div class="line">d:<span class="number">9</span></div><div class="line">e:<span class="number">6</span></div><div class="line">f:<span class="number">5</span></div></pre></td></tr></table></figure>
<p>4.因为要循环15次，且在最后一次才能推出0xf，所以选择逆推是比较方便的,逆推关系为：f&lt;-6&lt;-e&lt;-2&lt;-1&lt;-a&lt;-0&lt;-8&lt;-4&lt;-9&lt;-d&lt;-b&lt;-7&lt;-3&lt;-c&lt;-5&lt;-f。所以x应该为5,y应该为5-&gt;f这个过程中所有的数之和(不含5)，也就是115。<br>5.同第三阶段，其实弄清它的关系之后可以不需要计算了，在第一个参数输入5之后，第二个参数可以任意输入，把断点设置在运算比较指令处<code>0x8048e15</code>，通过<code>info reg</code>来查看值即可。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122706.jpg" alt=""></p>
<hr>
<h6 id="phase6"><a href="#phase6" class="headerlink" title="phase6"></a>phase6</h6><p>phase_6的汇编代码如下：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="number">08048</span>c89 &lt;phase_6&gt;:</div><div class="line"><span class="number">8048</span>c89:   <span class="number">55</span>                      push   %ebp</div><div class="line"><span class="number">8048</span>c8a:   <span class="number">89</span> e5                   mov    %esp,%ebp</div><div class="line"><span class="number">8048</span>c8c:   <span class="number">57</span>                      push   %edi</div><div class="line"><span class="number">8048</span>c8d:   <span class="number">56</span>                      push   %esi</div><div class="line"><span class="number">8048</span>c8e:   <span class="number">53</span>                      push   %ebx</div><div class="line"><span class="number">8048</span>c8f:   <span class="number">83</span> ec <span class="number">5</span>c                sub    $<span class="number">0x5c</span>,%esp</div><div class="line"><span class="number">8048</span>c92:   <span class="number">8</span>d <span class="number">45</span> d0                lea    <span class="number">-0x30</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>c95:   <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">04</span>             mov    %eax,<span class="number">0x4</span>(%esp)</div><div class="line"><span class="number">8048</span>c99:   <span class="number">8</span>b <span class="number">45</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>c9c:   <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</div><div class="line"><span class="number">8048</span>c9f:   e8 <span class="number">67</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">804910</span>b &lt;read_six_numbers&gt;</div><div class="line"><span class="number">8048</span>ca4:   be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%esi</div><div class="line"><span class="number">8048</span>ca9:   <span class="number">8</span>d <span class="number">7</span>d d0                lea    <span class="number">-0x30</span>(%ebp),%edi</div><div class="line"><span class="number">8048</span>cac:   <span class="number">8</span>b <span class="number">04</span> b7                mov    (%edi,%esi,<span class="number">4</span>),%eax</div><div class="line"><span class="number">8048</span>caf:   <span class="number">83</span> e8 <span class="number">01</span>                sub    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>cb2:   <span class="number">83</span> f8 <span class="number">05</span>                cmp    $<span class="number">0x5</span>,%eax</div><div class="line"><span class="number">8048</span>cb5:   <span class="number">76</span> <span class="number">05</span>                   jbe    <span class="number">8048</span>cbc &lt;phase_6+<span class="number">0x33</span>&gt;</div><div class="line"><span class="number">8048</span>cb7:   e8 <span class="number">15</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>cbc:   <span class="number">83</span> c6 <span class="number">01</span>                add    $<span class="number">0x1</span>,%esi</div><div class="line"><span class="number">8048</span>cbf:   <span class="number">83</span> fe <span class="number">06</span>                cmp    $<span class="number">0x6</span>,%esi</div><div class="line"><span class="number">8048</span>cc2:   <span class="number">74</span> <span class="number">22</span>                   je     <span class="number">8048</span>ce6 &lt;phase_6+<span class="number">0x5d</span>&gt;</div><div class="line"><span class="number">8048</span>cc4:   <span class="number">8</span>d <span class="number">1</span>c b7                lea    (%edi,%esi,<span class="number">4</span>),%ebx</div><div class="line"><span class="number">8048</span>cc7:   <span class="number">89</span> <span class="number">75</span> b4                mov    %esi,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>cca:   <span class="number">8</span>b <span class="number">44</span> b7 fc             mov    <span class="number">-0x4</span>(%edi,%esi,<span class="number">4</span>),%eax</div><div class="line"><span class="number">8048</span>cce:   <span class="number">3</span>b <span class="number">03</span>                   cmp    (%ebx),%eax</div><div class="line"><span class="number">8048</span>cd0:   <span class="number">75</span> <span class="number">05</span>                   jne    <span class="number">8048</span>cd7 &lt;phase_6+<span class="number">0x4e</span>&gt;</div><div class="line"><span class="number">8048</span>cd2:   e8 fa <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>cd7:   <span class="number">83</span> <span class="number">45</span> b4 <span class="number">01</span>             addl   $<span class="number">0x1</span>,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>cdb:   <span class="number">83</span> c3 <span class="number">04</span>                add    $<span class="number">0x4</span>,%ebx</div><div class="line"><span class="number">8048</span>cde:   <span class="number">83</span> <span class="number">7</span>d b4 <span class="number">05</span>             cmpl   $<span class="number">0x5</span>,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>ce2:   <span class="number">7</span>e e6                   jle    <span class="number">8048</span>cca &lt;phase_6+<span class="number">0x41</span>&gt;</div><div class="line"><span class="number">8048</span>ce4:   eb c6                   jmp    <span class="number">8048</span>cac &lt;phase_6+<span class="number">0x23</span>&gt;</div><div class="line"><span class="number">8048</span>ce6:   bb <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%ebx</div><div class="line"><span class="number">8048</span>ceb:   <span class="number">8</span>d <span class="number">7</span>d d0                lea    <span class="number">-0x30</span>(%ebp),%edi</div><div class="line"><span class="number">8048</span>cee:   eb <span class="number">16</span>                   jmp    <span class="number">8048</span>d06 &lt;phase_6+<span class="number">0x7d</span>&gt;</div><div class="line"><span class="number">8048</span>cf0:   <span class="number">8</span>b <span class="number">52</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%edx),%edx</div><div class="line"><span class="number">8048</span>cf3:   <span class="number">83</span> c0 <span class="number">01</span>                add    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>cf6:   <span class="number">39</span> c8                   cmp    %ecx,%eax</div><div class="line"><span class="number">8048</span>cf8:   <span class="number">75</span> f6                   jne    <span class="number">8048</span>cf0 &lt;phase_6+<span class="number">0x67</span>&gt;</div><div class="line"><span class="number">8048</span>cfa:   <span class="number">89</span> <span class="number">54</span> b5 b8             mov    %edx,<span class="number">-0x48</span>(%ebp,%esi,<span class="number">4</span>)</div><div class="line"><span class="number">8048</span>cfe:   <span class="number">83</span> c3 <span class="number">01</span>                add    $<span class="number">0x1</span>,%ebx</div><div class="line"><span class="number">8048</span>d01:   <span class="number">83</span> fb <span class="number">06</span>                cmp    $<span class="number">0x6</span>,%ebx</div><div class="line"><span class="number">8048</span>d04:   <span class="number">74</span> <span class="number">16</span>                   je     <span class="number">8048</span>d1c &lt;phase_6+<span class="number">0x93</span>&gt;</div><div class="line"><span class="number">8048</span>d06:   <span class="number">89</span> de                   mov    %ebx,%esi</div><div class="line"><span class="number">8048</span>d08:   <span class="number">8</span>b <span class="number">0</span>c <span class="number">9</span>f                mov    (%edi,%ebx,<span class="number">4</span>),%ecx</div><div class="line"><span class="number">8048</span>d0b:   ba c4 c0 <span class="number">04</span> <span class="number">08</span>          mov    $<span class="number">0x804c0c4</span>,%edx</div><div class="line"><span class="number">8048</span>d10:   b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>d15:   <span class="number">83</span> f9 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%ecx</div><div class="line"><span class="number">8048</span>d18:   <span class="number">7</span>f d6                   jg     <span class="number">8048</span>cf0 &lt;phase_6+<span class="number">0x67</span>&gt;</div><div class="line"><span class="number">8048</span>d1a:   eb de                   jmp    <span class="number">8048</span>cfa &lt;phase_6+<span class="number">0x71</span>&gt;</div><div class="line"><span class="number">8048</span>d1c:   <span class="number">8</span>b <span class="number">5</span>d b8                mov    <span class="number">-0x48</span>(%ebp),%ebx</div><div class="line"><span class="number">8048</span>d1f:   <span class="number">8</span>b <span class="number">45</span> bc                mov    <span class="number">-0x44</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d22:   <span class="number">89</span> <span class="number">43</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%ebx)</div><div class="line"><span class="number">8048</span>d25:   <span class="number">8</span>b <span class="number">55</span> c0                mov    <span class="number">-0x40</span>(%ebp),%edx</div><div class="line"><span class="number">8048</span>d28:   <span class="number">89</span> <span class="number">50</span> <span class="number">08</span>                mov    %edx,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d2b:   <span class="number">8</span>b <span class="number">45</span> c4                mov    <span class="number">-0x3c</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d2e:   <span class="number">89</span> <span class="number">42</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%edx)</div><div class="line"><span class="number">8048</span>d31:   <span class="number">8</span>b <span class="number">55</span> c8                mov    <span class="number">-0x38</span>(%ebp),%edx</div><div class="line"><span class="number">8048</span>d34:   <span class="number">89</span> <span class="number">50</span> <span class="number">08</span>                mov    %edx,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d37:   <span class="number">8</span>b <span class="number">45</span> cc                mov    <span class="number">-0x34</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d3a:   <span class="number">89</span> <span class="number">42</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%edx)</div><div class="line"><span class="number">8048</span>d3d:   c7 <span class="number">40</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x0</span>,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d44:   be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%esi</div><div class="line"><span class="number">8048</span>d49:   <span class="number">8</span>b <span class="number">43</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>d4c:   <span class="number">8</span>b <span class="number">13</span>                   mov    (%ebx),%edx</div><div class="line"><span class="number">8048</span>d4e:   <span class="number">3</span>b <span class="number">10</span>                   cmp    (%eax),%edx</div><div class="line"><span class="number">8048</span>d50:   <span class="number">7</span>d <span class="number">05</span>                   jge    <span class="number">8048</span>d57 &lt;phase_6+<span class="number">0xce</span>&gt;</div><div class="line"><span class="number">8048</span>d52:   e8 <span class="number">7</span>a <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>d57:   <span class="number">8</span>b <span class="number">5</span>b <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebx),%ebx</div><div class="line"><span class="number">8048</span>d5a:   <span class="number">83</span> c6 <span class="number">01</span>                add    $<span class="number">0x1</span>,%esi</div><div class="line"><span class="number">8048</span>d5d:   <span class="number">83</span> fe <span class="number">05</span>                cmp    $<span class="number">0x5</span>,%esi</div><div class="line"><span class="number">8048</span>d60:   <span class="number">75</span> e7                   jne    <span class="number">8048</span>d49 &lt;phase_6+<span class="number">0xc0</span>&gt;</div><div class="line"><span class="number">8048</span>d62:   <span class="number">83</span> c4 <span class="number">5</span>c                add    $<span class="number">0x5c</span>,%esp</div><div class="line"><span class="number">8048</span>d65:   <span class="number">5</span>b                      pop    %ebx</div><div class="line"><span class="number">8048</span>d66:   <span class="number">5</span>e                      pop    %esi</div><div class="line"><span class="number">8048</span>d67:   <span class="number">5</span>f                      pop    %edi</div><div class="line"><span class="number">8048</span>d68:   <span class="number">5</span>d                      pop    %ebp</div><div class="line"><span class="number">8048</span>d69:   c3                      ret</div></pre></td></tr></table></figure>
<p>这题汇编代码很长，看得昏天黑地的。根据网上的解析，下面慢慢把这段代码拆开分析吧。首先还是按整体到局部的思想来，整段代码是需要输入6个数字，且6个数字都不能大于6。这六个数字的意义是按照这几个数字的顺序来排列已经存在的链表，使它们是按降序来进行排列的。<br>很自然的我们想到的是就是找出原来的链表的顺序，人工地按照其大小来进行从新排列得出这六个序列。</p>
<p>在程序内部，第一步当然是要先校验输入的留个序列是否都满足小于6这个条件。然后就是按输入序列重新把链表进行排序，接着再验证是否是降序排列。下面分步解析整段代码：</p>
<p>1.判断输入序列是否满足都小于6的这个条件，用一个循环，%esi为偏移因子也为循环判断条件，循环一次+1：</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ca4:   be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%esi</div><div class="line"><span class="number">8048</span>ca9:   <span class="number">8</span>d <span class="number">7</span>d d0                lea    <span class="number">-0x30</span>(%ebp),%edi<span class="comment">//把栈底指针上移0x30赋值给%edi</span></div><div class="line"><span class="number">8048</span>cac:   <span class="number">8</span>b <span class="number">04</span> b7                mov    (%edi,%esi,<span class="number">4</span>),%eax<span class="comment">//从第一个输入序列开始遍历，以%edi为基址</span></div><div class="line"><span class="number">8048</span>caf:   <span class="number">83</span> e8 <span class="number">01</span>                sub    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>cb2:   <span class="number">83</span> f8 <span class="number">05</span>                cmp    $<span class="number">0x5</span>,%eax</div><div class="line"><span class="number">8048</span>cb5:   <span class="number">76</span> <span class="number">05</span>                   jbe    <span class="number">8048</span>cbc &lt;phase_6+<span class="number">0x33</span>&gt;</div><div class="line"><span class="number">8048</span>cb7:   e8 <span class="number">15</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>cbc:   <span class="number">83</span> c6 <span class="number">01</span>                add    $<span class="number">0x1</span>,%esi</div><div class="line"><span class="number">8048</span>cbf:   <span class="number">83</span> fe <span class="number">06</span>                cmp    $<span class="number">0x6</span>,%esi</div><div class="line"><span class="number">8048</span>cc2:   <span class="number">74</span> <span class="number">22</span>                   je     <span class="number">8048</span>ce6 &lt;phase_6+<span class="number">0x5d</span>&gt;</div><div class="line"><span class="number">8048</span>cc4:   <span class="number">8</span>d <span class="number">1</span>c b7                lea    (%edi,%esi,<span class="number">4</span>),%ebx</div><div class="line"><span class="number">8048</span>cc7:   <span class="number">89</span> <span class="number">75</span> b4                mov    %esi,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>cca:   <span class="number">8</span>b <span class="number">44</span> b7 fc             mov    <span class="number">-0x4</span>(%edi,%esi,<span class="number">4</span>),%eax</div><div class="line"><span class="number">8048</span>cce:   <span class="number">3</span>b <span class="number">03</span>                   cmp    (%ebx),%eax</div><div class="line"><span class="number">8048</span>cd0:   <span class="number">75</span> <span class="number">05</span>                   jne    <span class="number">8048</span>cd7 &lt;phase_6+<span class="number">0x4e</span>&gt;</div><div class="line"><span class="number">8048</span>cd2:   e8 fa <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>cd7:   <span class="number">83</span> <span class="number">45</span> b4 <span class="number">01</span>             addl   $<span class="number">0x1</span>,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>cdb:   <span class="number">83</span> c3 <span class="number">04</span>                add    $<span class="number">0x4</span>,%ebx</div><div class="line"><span class="number">8048</span>cde:   <span class="number">83</span> <span class="number">7</span>d b4 <span class="number">05</span>             cmpl   $<span class="number">0x5</span>,<span class="number">-0x4c</span>(%ebp)</div><div class="line"><span class="number">8048</span>ce2:   <span class="number">7</span>e e6                   jle    <span class="number">8048</span>cca &lt;phase_6+<span class="number">0x41</span>&gt;</div><div class="line"><span class="number">8048</span>ce4:   eb c6                   jmp    <span class="number">8048</span>cac &lt;phase_6+<span class="number">0x23</span>&gt;</div></pre></td></tr></table></figure>
<p>2.按输入序列进行排列：</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>ce6:   bb <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%ebx</div><div class="line"><span class="number">8048</span>ceb:   <span class="number">8</span>d <span class="number">7</span>d d0                lea    <span class="number">-0x30</span>(%ebp),%edi</div><div class="line"><span class="number">8048</span>cee:   eb <span class="number">16</span>                   jmp    <span class="number">8048</span>d06 &lt;phase_6+<span class="number">0x7d</span>&gt;</div><div class="line"><span class="number">8048</span>cf0:   <span class="number">8</span>b <span class="number">52</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%edx),%edx</div><div class="line"><span class="number">8048</span>cf3:   <span class="number">83</span> c0 <span class="number">01</span>                add    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>cf6:   <span class="number">39</span> c8                   cmp    %ecx,%eax</div><div class="line"><span class="number">8048</span>cf8:   <span class="number">75</span> f6                   jne    <span class="number">8048</span>cf0 &lt;phase_6+<span class="number">0x67</span>&gt;</div><div class="line"><span class="number">8048</span>cfa:   <span class="number">89</span> <span class="number">54</span> b5 b8             mov    %edx,<span class="number">-0x48</span>(%ebp,%esi,<span class="number">4</span>)</div><div class="line"><span class="number">8048</span>cfe:   <span class="number">83</span> c3 <span class="number">01</span>                add    $<span class="number">0x1</span>,%ebx</div><div class="line"><span class="number">8048</span>d01:   <span class="number">83</span> fb <span class="number">06</span>                cmp    $<span class="number">0x6</span>,%ebx</div><div class="line"><span class="number">8048</span>d04:   <span class="number">74</span> <span class="number">16</span>                   je     <span class="number">8048</span>d1c &lt;phase_6+<span class="number">0x93</span>&gt;</div><div class="line"><span class="number">8048</span>d06:   <span class="number">89</span> de                   mov    %ebx,%esi</div><div class="line"><span class="number">8048</span>d08:   <span class="number">8</span>b <span class="number">0</span>c <span class="number">9</span>f                mov    (%edi,%ebx,<span class="number">4</span>),%ecx</div><div class="line"><span class="number">8048</span>d0b:   ba c4 c0 <span class="number">04</span> <span class="number">08</span>          mov    $<span class="number">0x804c0c4</span>,%edx</div><div class="line"><span class="number">8048</span>d10:   b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x1</span>,%eax</div><div class="line"><span class="number">8048</span>d15:   <span class="number">83</span> f9 <span class="number">01</span>                cmp    $<span class="number">0x1</span>,%ecx</div><div class="line"><span class="number">8048</span>d18:   <span class="number">7</span>f d6                   jg     <span class="number">8048</span>cf0 &lt;phase_6+<span class="number">0x67</span>&gt;</div><div class="line"><span class="number">8048</span>d1a:   eb de                   jmp    <span class="number">8048</span>cfa &lt;phase_6+<span class="number">0x71</span>&gt;</div></pre></td></tr></table></figure>
<p> 以上汇编代码等价于如下C代码：</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line">    addr = <span class="number">0x804c0c4</span>；</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; data[i]; j++)</div><div class="line">        addr = *(addr + <span class="number">0x8</span>);</div><div class="line">    <span class="number">-0x48</span>(%ebp + <span class="number">4</span> * i) = addr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过两层循环，根据我们输入的序列（数组），依次根据<code>0x804c0c4</code>这个基址查找当前序列所指的节点（通过一层循环，循环条件为当前序列值，每次地址+8，循环结束之后就是所需要的节点），然后依次反向入栈(序列1在栈顶，序列六在栈底)。</p>
<p>3.按输入序列重建一个链表</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>d1c:   <span class="number">8b</span> <span class="number">5</span>d b8                mov    <span class="number">-0x48</span>(%ebp),%ebx</div><div class="line"><span class="number">8048</span>d1f:   <span class="number">8b</span> <span class="number">45</span> bc                mov    <span class="number">-0x44</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d22:   <span class="number">89</span> <span class="number">43</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%ebx)</div><div class="line"><span class="number">8048</span>d25:   <span class="number">8b</span> <span class="number">55</span> c0                mov    <span class="number">-0x40</span>(%ebp),%edx</div><div class="line"><span class="number">8048</span>d28:   <span class="number">89</span> <span class="number">50</span> <span class="number">08</span>                mov    %edx,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d2b:   <span class="number">8b</span> <span class="number">45</span> c4                mov    <span class="number">-0x3c</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d2e:   <span class="number">89</span> <span class="number">42</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%edx)</div><div class="line"><span class="number">8048</span>d31:   <span class="number">8b</span> <span class="number">55</span> c8                mov    <span class="number">-0x38</span>(%ebp),%edx</div><div class="line"><span class="number">8048</span>d34:   <span class="number">89</span> <span class="number">50</span> <span class="number">08</span>                mov    %edx,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d37:   <span class="number">8b</span> <span class="number">45</span> cc                mov    <span class="number">-0x34</span>(%ebp),%eax</div><div class="line"><span class="number">8048</span>d3a:   <span class="number">89</span> <span class="number">42</span> <span class="number">08</span>                mov    %eax,<span class="number">0x8</span>(%edx)</div><div class="line"><span class="number">8048</span>d3d:   c7 <span class="number">40</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x0</span>,<span class="number">0x8</span>(%eax)</div><div class="line"><span class="number">8048</span>d44:   be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%esi</div></pre></td></tr></table></figure>
<p>因为之前已经按照输入序列查找到具体的节点并反向入栈，此时我们就可以从栈顶取出第一个元素的地址以及第二个元素的地址，把第二个元素的地址赋值给第一个元素的地址+8（next指针），依次类推，就可以把整个链表构建起来，在结尾处，尾指针设置为0。</p>
<p>4.根据构建的链表开始验证结果</p>
  <figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">8048</span>d49:   <span class="number">8</span>b <span class="number">43</span> <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebx),%eax</div><div class="line"><span class="number">8048</span>d4c:   <span class="number">8</span>b <span class="number">13</span>                   mov    (%ebx),%edx</div><div class="line"><span class="number">8048</span>d4e:   <span class="number">3</span>b <span class="number">10</span>                   cmp    (%eax),%edx</div><div class="line"><span class="number">8048</span>d50:   <span class="number">7</span>d <span class="number">05</span>                   jge    <span class="number">8048</span>d57 &lt;phase_6+<span class="number">0xce</span>&gt;</div><div class="line"><span class="number">8048</span>d52:   e8 <span class="number">7</span>a <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80490</span>d1 &lt;explode_bomb&gt;</div><div class="line"><span class="number">8048</span>d57:   <span class="number">8</span>b <span class="number">5</span>b <span class="number">08</span>                mov    <span class="number">0x8</span>(%ebx),%ebx</div><div class="line"><span class="number">8048</span>d5a:   <span class="number">83</span> c6 <span class="number">01</span>                add    $<span class="number">0x1</span>,%esi</div><div class="line"><span class="number">8048</span>d5d:   <span class="number">83</span> fe <span class="number">05</span>                cmp    $<span class="number">0x5</span>,%esi</div><div class="line"><span class="number">8048</span>d60:   <span class="number">75</span> e7                   jne    <span class="number">8048</span>d49 &lt;phase_6+<span class="number">0xc0</span>&gt;</div></pre></td></tr></table></figure>
<p>这段代码实际上就是比较链表是否是降序排列的，首先<code>mov    0x8(%ebx),%eax</code>取第二个值的地址放入<code>eax</code>中，再<code>mov    (%ebx),%edx</code>取第一个值放入<code>edx</code>中，最后<code>cmp    (%eax),%edx</code>比较大小。如果满足前一个大于后一个，则<code>mov    0x8(%ebx),%ebx</code>把后一个的指针赋值给前一个指针变量。也就是当前指针变为下一个。类似于下列C代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">node a = firstNode;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">    node b = a-&gt;next;</div><div class="line">    <span class="keyword">if</span> (a-&gt;x &gt;= b-&gt;x)</div><div class="line">        a = b;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        explode_bomb();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.最后我们可以通过<code>x /x 0x</code>指令从gdb中查看已经存在的链表，并根据它的大小进行降序排列，最后即可得出所需的序列：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122732.jpg" alt=""><br>所以最后的序列为：5 6 1 4 3 2。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-11-07-122749.jpg" alt=""><br>在gdb中可以看到，这个结果是正确的。</p>
<hr>
<p>综上，把六个炸弹都拆除了。</p>
<p>所以全部的答案总结如下：<br>1.We have to stand with our North Korean allies.<br>2.0 1 1 2 3 5<br>3.0 147 (1 -641 | 2 217 | 3 -534 | 4 0 | 5 -534)<br>4.8 1 (9 1 | 11 1)<br>5.5 115<br>6.5 6 1 4 3 2</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[float与double精度丢失的问题]]></title>
      <url>http://blublu.xyz/computer-principle/float%E4%B8%8Edouble%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>将同一实数分别赋值给单精度和双精度类型变量，然后打印输出</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">float</span> a;</div><div class="line">    <span class="keyword">double</span> b;</div><div class="line">    a = <span class="number">123456.789e4</span>;</div><div class="line">    b = <span class="number">123456.789e4</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n %f\n"</span>,a,b);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">输出结果：</div><div class="line"><span class="number">1234567936.000000</span></div><div class="line"><span class="number">1234567890.000000</span></div></pre></td></tr></table></figure>
<p>为什么一个整数分别赋值给double和float,在输出的时候float型却不一样且偏大了呢？</p>
<p>其实导致这样的结果主要是因为float的精度的问题，float在内存中主要分为三部分，第一部分是符号位，第二部分是指数位，第三部分是尾数部分。尾数部分的长度为23位，又因为可以隐式地认为第一位是1（因为我们总是可以通过调整指数大小把小数点移动到最高位为1上的右边），所以实际上我们float能够识别24位二进制数，也就是2^24 - 1 = 16,777,215,所以float的精度是不高于八位的。</p>
<p>同理因为double是64位的，所以识别的精度要有2^52 - 1 = 450,359,962,770,496，也就是不高于16位。但是题目中的1234567890也就是只有十位而已，所以double可以确保它的精度不被改变而float却不行。<br><a id="more"></a><br>在 IEEE 标准中，浮点数是将特定长度的连续字节的所有二进制位分割为特定宽度的符号域，指数域和尾数域三个域，其中保存的值分别用于表示给定二进制浮点数中的符号，指数和尾数。这样，通过尾数和可以调节的指数（所以称为”浮点”）就可以表达给定的数值了。<br>具体的格式参见下面的表格：</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">长度</th>
<th style="text-align:right">符号</th>
<th style="text-align:right">指数</th>
<th style="text-align:right">尾数</th>
<th style="text-align:right">有效位数</th>
<th style="text-align:right">指数偏移</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">单精度</td>
<td style="text-align:right">32位</td>
<td style="text-align:right">1</td>
<td style="text-align:right">8</td>
<td style="text-align:right">23</td>
<td style="text-align:right">24</td>
<td style="text-align:right">2^8-1 -1=127</td>
<td style="text-align:right">有一个隐含位</td>
</tr>
<tr>
<td style="text-align:right">双精度</td>
<td style="text-align:right">64位</td>
<td style="text-align:right">1</td>
<td style="text-align:right">11</td>
<td style="text-align:right">52</td>
<td style="text-align:right">53</td>
<td style="text-align:right">2^11-1 - 1=1023</td>
<td style="text-align:right">有一个隐含位</td>
</tr>
<tr>
<td style="text-align:right">扩展双精度</td>
<td style="text-align:right">80位</td>
<td style="text-align:right">1</td>
<td style="text-align:right">15</td>
<td style="text-align:right">64</td>
<td style="text-align:right">64</td>
<td style="text-align:right">2^15-1 - 1=16383</td>
<td style="text-align:right">没有隐含位</td>
</tr>
</tbody>
</table>
<p>再说说为什么会偏大而不是偏小的问题，用IEEE 754规则把浮点数转换成三段式可以得到1234567890转换后的结果为：<code>0---1001 1101---001001-10010110-00000010-11010010</code>。但是存储到内存中因为只有尾数部分只有23位，那么存储到内存中就变为了：<code>0---1001 1101---001001-10010110-00000011</code>.注意到后面舍弃了八位且向前进了一位，说说为什么进位，C语言中采取的默认进位方式是<strong>四舍六入五成双</strong>。先说说这个四舍六入吧：</p>
<ul>
<li>四舍也就是不够前面一位的一半，也就是1/2,就把这部分舍去；六入就是超过1/2则向前进一位。五成双就是被修约的数字等于5时，要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉。从统计学的角度，“四舍六入五成双”比“四舍五入”要科学，在大量运算时，它使舍入后的结果误差的均值趋于零，而不是像四舍五入那样逢五就入，导致结果偏向大数，使得误差产生积累进而产生系统误差，“四舍六入五成双”使测量结果受到舍入误差的影响降到最低。</li>
</ul>
<p>现在再看看之前的11010010，显然大于前一位的1/2,所以要向前进1.这也是为什么结果会偏大的原因。把其从内存中还原出来就是：<code>1.001001-10010110-00000011-00000000 x 2^30 = 12345678936.0000</code></p>
<blockquote>
<p>通常情况下我们采取的舍入规则是在原来的值是舍入值的中间值时,采取向偶数舍入,在二进制中,偶数我们认为是末尾为0的数.而倘若不是这种情况的话,则一般会有选择性的使用向上和向下舍入,但总会向最接近的值舍入.其实这正是IEEE采取的默认的舍入方式,因为这种舍入方式总是企图向最近的值舍入.</p>
<p>比如对于10.10011这个值来讲,当舍入到个位数时,会采取向上舍入,因此此时的值为11.当舍入到小数点后1位时,会采取向下舍入,因此此时的值为10.1.当舍入到这个小数点后4位时,由于此时的10.10011舍入值的中间值,因此采取向偶数舍入,此时舍入后的值为10.1010.</p>
</blockquote>
<p>最后还想谈谈关于为什么三段式存储方式中指数部分要用Bias偏置位表示：<br>如果用八位中的最高位来表示符号位的话，如果用判断<code>010XXXXX &gt; 0001XXXX</code>成立的电路去判断<code>010XXXXX &lt; 1000XXXX</code>显然也是成立的，但是事实上是<code>010XXXXX &gt; 1000XXXX</code>。所以就需要多设计一套电路去判断符号位，显然这是不划算的。所以可以采取偏置位把所有数都偏移到正数上，就可以使用一套电路来判断。至于为什么是偏移2^k-1 - 1位，我的理解是这样刚好把最小指数偏移到0位上。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[老罗新机发布会的一些感受]]></title>
      <url>http://blublu.xyz/programer/%E8%80%81%E7%BD%97%E6%96%B0%E6%9C%BA%E5%8F%91%E5%B8%83%E4%BC%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/</url>
      <content type="html"><![CDATA[<h3 id="一些个人对老罗的看法"><a href="#一些个人对老罗的看法" class="headerlink" title="一些个人对老罗的看法"></a>一些个人对老罗的看法</h3><p>知道老罗这个人是从2012年的一场发布会开始的，那时候老罗扬言着说要做一个与现今Android机都不一样的东西出来，带着质疑的眼光，老罗风风火火地就开始上路了。老罗其实早在做手机就已经成名了，他的出名绝不是他不知天高地厚的要跨行做手机，而是他的口才。当然，现在还多了一样东西，就是他的执着、他的理想主义。从认识老罗到现在已经4年多了，每年他的每一场发布会我都会看完，这也是为数不多的我能坚持了几年的事情之一。我和老罗一样是个果粉，从他身上也可以看到Jobs的些许身影。当然从Apple最近七年来看，发布会远没有老罗的精彩，在用户体验上的努力也远没有老罗做得好。特别是老罗每年都把发布会的门票捐赠给开源世界，真的让我很佩服！特别是发布会演示了那么多新特性之后宣布将会毫无保留的开源出来，让我对他又多了一层敬畏。我一直都很倡导开源精神，但是其实现在开源并不是很成熟，许多商业公司并不愿意公布自己的源代码与人类分享自己的果实，但是老罗做到了！了不起！</p>
<h3 id="嘲笑理想主义者的时代是悲哀的"><a href="#嘲笑理想主义者的时代是悲哀的" class="headerlink" title="嘲笑理想主义者的时代是悲哀的"></a>嘲笑理想主义者的时代是悲哀的</h3><a id="more"></a>
<p>对于今晚的发布会的几百万观众，很显然有2/3的人是来看他的笑话的，看看这孙子还能吹出什么花来。看着弹幕上全是喷子，不得不感叹现在互联网的环境是如此的混乱。直到发布会结束之后论坛上、V站上，也还到处都是各种喷子，抄袭啊、雇水军在刷评论啊，还有各种粗鄙不堪的言语，让人不忍直视。网上一看全是骂抄袭Apple的原型Home键的，我不知道一个原型的home键为什么都是这些喷子的喷点，现在Android机上但凡带有指纹解锁的全是前置的椭圆形或者后置的圆形、方形，为什么没人喷抄袭？而且单从正常的审美与实用性上，我并不觉得原形的Home键有什么不妥。至少他是Android机上第一个敢模仿Apple的圆形Home键的厂商，光凭这一点就已经足够获取肯定（并不是赞同抄袭，只是从用户体验上来说，这是最好的选择）。而且OPPO、Vivo、乐视、魅族这几家厂商我不觉得他们的新款机型我能分辨出来谁是谁…毫无例外的窄边框、前置椭圆home键、金属中框。不喜欢尽可以不买，甚至可以吐槽，但在毫无证据的情况下认为喜欢锤子的人都是水军，这种心态就真的太lowB了。再说一下个人对于现在网络喷子的看法，这些人大多碌碌无为，没有真正的去坚持做过一件事情，凭借自己心中的YY就觉得做某件事很容易。这其中的辛酸大概也只有老罗自己能知道了把。</p>
<h3 id="理想主义者的无奈"><a href="#理想主义者的无奈" class="headerlink" title="理想主义者的无奈"></a>理想主义者的无奈</h3><p>从四年前老罗的高调进军手机行业到现在被磨得没有棱角，这不得不说是一个悲哀。发布会一开始就显得有点悲壮，如果老罗再拿不出能够让大部分消费者为之买单的产品，这或许真的是锤子的最后一场发布会了。但是有些锤黑的无脑喷真的是让人难以理解，从Smartisan T1开始就有无数的喷子在开喷，就在今年锤子可以已经”被收购“了六次…好在经过四年的沉淀，不论是做事还是说话，老罗都显得比以前沉稳得多得多，也许他真的不幸成为了他最初最讨厌的人，但有一点是没有变的，那就是他身上的执着。现实世界很无奈，太多的事情都不尽如人意，无数的喷子因为自己做不到所以见不得别人好。从优酷大战王自如到封博，再到如今的各种克制言行，已经尝到了无数辛酸与吃尽了苦头。</p>
<h3 id="锤子新手机的特色"><a href="#锤子新手机的特色" class="headerlink" title="锤子新手机的特色"></a>锤子新手机的特色</h3><p>首先还是要说说配置吧，在现在Android机的市场，虽然配置已经越来越显得不太重要，但是还是有很多人看着配置买手机…骁龙821+6G DDR4内存 + 64G存储空间已经足够称得上机皇。除此之外值得一提的还是它的工业设计，不得不说这次的外形我并不是很喜欢，但是还是有可圈可点之处的。最大的亮点还是在系统上，讯飞的语音识别真的厉害到不行，当时在看发布会直播的时候就被它的语音识别准确度惊艳到了，很佩服在语音识别背后里默默付出的科研人员。最有用的还是Big Bang和One Step功能，真的是每一项都戳到我的痛点，相比大多Android厂商每次都是在系统UI上改了又改，我更乐意看到类似于锤子科技这些有实质性体验提升的功能。</p>
<h3 id="对老罗的一些期待"><a href="#对老罗的一些期待" class="headerlink" title="对老罗的一些期待"></a>对老罗的一些期待</h3><p>在理想主义上与工匠精神上，老罗早已成为了无冕之王。他对每一个细节的专注与苛求都值得我们学习，在情怀的道路上，我觉得没有坚持过的人是没有办法对他说三道四的。很庆幸我与老罗的很多观点甚至是锤子科技的对待事物的追求是一致的，虽然也有部分不认同，但这并不妨碍它成为我心目中最好的Android手机公司（目前主要是手机公司）。说实话看到他公布新机型M1/M1L的价格的时候我有一种想哭的冲动，这款手机的价值远超它的价格，但是被现实所累的老罗也是穷途末路了，如果这款手机再不能获得成功，这是这个时代的悲哀！不知道为什么现在都在追求什么性价比，一分钱一分货，只有挣钱了企业才能继续活下去。换句话说，我并不认同高性价比这种东西，如果你需要极致的体验必然要付出极致的价钱。<strong>当然三星这种品牌溢价的公司除外。</strong>希望老罗能在商业上也获得成功！</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这次的发布会无疑是很成功的，老罗用自己的产品回给了那些嘲笑者一个响亮的耳光。这让我突然想起一段话：<br><strong>在一个国家的墓园里,有许多国家首脑的墓志铭.某个角落里的一段墓志铭是这样写的：<br>我在年轻的时候有一个伟大的愿望,想改变世界,但是随着我的年龄的增长,我发现我不能,所以我想改变整个国家；但是等到我的年龄再大的时候,我发现我没有这个能力改变自己的国家,那我就想我的愿望就是改变我的家庭；等到我年老的时候,我发现我也没有能力改变我的家庭,我就想我要改变我自己；等到我行将入土的时候,我才发现我依然没有改变我自己.这时候我就想,如果我一开始的愿望就是改变我自己,那么我自己改变了,同样就有可能改变我的家庭,就有可能改变我的国家,甚至有可能改变整个世界.
</strong></p>
<p><strong>对于网络的喷子，我会以我所学，举毕生之力，与喷子们大战到底，不死不休。</strong></p>
<p><strong>如果一开始没成功，那就拿个更大的锤子！！！</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解计算机系统-第二章课后作业]]></title>
      <url>http://blublu.xyz/computer-principle/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      <content type="html"><![CDATA[<h6 id="2-58"><a href="#2-58" class="headerlink" title="2.58"></a>2.58</h6><p>编写过程is_little_endian，当在小端机器上编译和运行时返回1，在大端机器上编译运行时返回0.这个过程应该可以运行在任何机器上，无论机器的字长是多少。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_little_endian</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> *(<span class="keyword">char</span>*)&amp;x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设是32位的小端机器，那么x变量存储方式将为<code>0000 0001 0000 0000 0000 0000 0000 0000</code>，反之则为<code>0000 0000 0000 0000 0000 0000 0000 0001</code>。通过取变量<code>x</code>的地址然后强制转换<code>char*</code>，再通过指针取出这个强制转换后的地址上的值（无论是大端还是小端，都是取内存低8位的地址，所以大端模式取到的是<code>0000 0000</code>，而小端模式取到的值是<code>0000 0001</code>）。<strong>如果第二句语句改为<code>return (char)x</code>，则无论是大端还是小端机器，最终的结果都为1。因为强制转换是在寄存器进行的而不是在内存进行的，那么<code>(char)x</code>就是保留其低八位的值，也就是<code>0000 0001</code></strong></p>
<hr>
<a id="more"></a>
<h6 id="2-71"><a href="#2-71" class="headerlink" title="2.71"></a>2.71</h6><p>你刚刚开始在一家公司工作，他们要实现一组过程来操作一个数据结构，要将４个有符号字节封装成一个32位unsigned。在这个unsigned中的字节是从0（最底有效字节）编号到3（最高有效字节）。分配给你的任务是：为使用二进制补码运算和算术右移的机器编写一个具有如下原形的函数：<br>/<em>Declaration of data type where 4 bytes are packed in to an unsigned </em>/<br>typedef unsigned packed_t;</p>
<p>/<em> Extract byte from word. Return as signed integer </em>/<br>int xbyte(packed_t world, int bytenum);</p>
<p>也就是说，函数会抽取指定的字节，再把它符号扩展为一个32位int．<br>你的前任（因为水平不高而被解雇了）编写了下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*Failed attempt at xbyte */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xbyte</span><span class="params">(<span class="keyword">unsigned</span> word, <span class="keyword">int</span> bytenum)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (word &gt;&gt;(bytenum &lt;&lt; <span class="number">3</span>)) &amp; <span class="number">0xFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>问题<br>１．这段代码错在哪里？<br>２．给出函数的正确实现，只能使用左右移位和一个减法．</strong></p>
<p><strong>答：</strong></p>
<ol>
<li>可以看出，如果要取出的这个字节的值为负数的时候，代码的处理是错误的，即会处理为正数。</li>
<li>代码的正确实现如下：</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xbyte</span><span class="params">(<span class="keyword">unsigned</span> word, <span class="keyword">int</span> bytenum)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (word &lt;&lt;((<span class="number">3</span>-bytenum) &lt;&lt; <span class="number">3</span>)) &gt;&gt; <span class="number">24</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码解释：</strong><br>由于算术右移是按照符号位来填充扩展位的，那么我们可以采取先左移(3-n)*8位来把要取的字节左边的无效位左移覆盖掉，再通过右移24位来把当前字节置于最低字节位。而此时，如果此数为正，那么左边将会全是0，不会影响到结果；如果此数为负，低八位的前24位必将全部是1（算术右移），因为负数是用补码表示的，取反后除了符号位其余23位将会变为0，而低八位正常取反加1，同样也不影响结果。</p>
<hr>
<h6 id="2-84"><a href="#2-84" class="headerlink" title="2.84"></a>2.84</h6><p>给定一个浮点格式，有 k 位指数和 n 位小数，对于下列数，写出阶码 E、尾数 M、<br>小数 f 和值 V 的公式。另外，请描述其位表示。</p>
<p>A. 数 5.0。<br>B. 能够被准确描述的最大奇整数。<br>C. 最小的正规格化数的倒数。</p>
<p><strong>答：</strong></p>
<pre><code>A.    5.0转化为二进制得0000 0101.0，等价于1.01*2^2 
    所以：
    E=2
    M=1.25
    f=0.25
    V=(-1)^s * M * 2^E = (-1)^0 * 1.25 * 2^2
    位表示: [0]1[10··0]k[010··0]n

B. 首先明确奇数的最低位一定为1.
   其次因为是最大奇整数，所以s位也是为0的.
   考虑到可能会出现两种情况，一种是E大于等于小数位n，另一种是E小于小数位n，下面分两种情况讨论
   1.E&gt;=n:
   显然E可表示的阶数已经超过所需要的了，所以取n就好
   E=n
   f=0.[1...1]n
   M=1.[1...1]n
   V=(-1)^0 * M * 2^E=(-1)^0 * 1.[1..1]n * 2^n
   位表示: [0]1[E+Bias]k[1...1]n = [0]1[n + (2^(k-1) - 1)]k[1...1]n

   2.E&lt;n:
   若E&lt;n，那么小数部分的前E位只需要为1就可以了，后面的n-E部分是0 or 1都不影响最终结果
   E=2^(k-1) - 1
   f=0.[1...1]E[****]n-E
   M=1.[1...1]E[****]n-E
   V=(-1)^0 * M * 2^E=(-1)^0 * 1.[1...1]E[****]n-E * 2^(2^(k-1) - 1)
   位表示: [0]1[1..10]k[1...1]E[****]n-E

   需要说明的是E的计算过程：E=(max)e-Bias=(2^k -2) - (2^(k-1) - 1) = 2^(k-1) - 1，其
   中e的最大值取2^k - 2是因为阶码全为1时做特殊用途(表示无穷大)，所以e最大的规格化表示为
   [1..10]k。

C. 最小规格化整数可以根据定义得出：[0]1[0...01]k[00..0]n,它的值V=(-1)^0 * 1.0
   * 2^(2-2^(k-1))，它的倒数的值为V=(-1)^0 * 1.0 * 2^-(2-2^(k-1))=2^(2^(k-1) - 2)
   所以：
   E=2^(k-1) - 2
   M=1.0
   f=0.0
   e=E+Bias=(2^(k-1) - 2) + (2^(k-1) - 1)=2^k -3
   位表示: [0]1[11...01]k[0..0]n
</code></pre><hr>
<h6 id="2-88"><a href="#2-88" class="headerlink" title="2.88"></a>2.88</h6><p>我们在一个 int 类型为 32 位补码表示的机器上运行程序。float 类型的值使用 32<br>位 IEEE 格式，而 double 类型的值使用 64 位 IEEE 格式。</p>
<p>我们产生随机数 x、y 和 z，并且把它们转换成 double 类型的值：</p>
<p>/<em> Create some arbitrary values </em>/<br>int x = random();<br>int y = random();<br>int z = random();</p>
<p>/<em> Convert to double </em>/<br>double dx = (double)x;<br>double dy = (double)y;<br>double dz = (double)z;</p>
<p>对于下列的每个 C 表达式，你要指出表达式是否总是为 1。如果它总是为 1，描述其<br>中的数学原理。否则，列举出使它为 0 的参数的例子。请注意，不能使用 IA32 机器<br>运行 GCC 来测试你的答案，因为对于 float 和 double，它使用的都是 80 位的扩展<br>精度表示。</p>
<p>A. (double)(float)x == dx<br>B. dx + dy == (double)(x+y)<br>C. dx + dy + dz == dz + dy + dx<br>D. dx <em> dy </em> dz == dz <em> dy </em> dx<br>E. dx / dx == dy / dy</p>
<p><strong>答：</strong></p>
<pre><code>A.否，可以想到int可以存储31位有效数字，而float算上隐含的个位数也仅能表示24位的宽度。当
  x=2^25 - 1时，左边的值为33554432，而右边因为double可以容纳53位（含隐含位）所以可以无误差
  转换一个32位的int整数，float却不行。同理可验证，只要大于24位之后其低位超出的部分为1时都会
  产生这样的误差，如果为0则截断无影响。

B.是，double的精度容纳范围仍然包含2*Int(max)，所以左右式子总是相等的。

C.是，浮点数是不支持结合律的，假设dx=0.001，dy=1e53，dz=-1e53。如果根据左边的运算顺序，结
  果为0，而右边为0.001。这是因为在左边运算时，因为double的尾数部分只有52位，而显然要先算
  0.001+1e53的话则0.001部分因为超过double所能容纳位数被舍掉，所以最终结果为0。而右边因为先
  运算1e53+(-1e53)所以相当于0.001+0，则可以正确表现出结果来。但是题目是通过用int转换为
  double值的，所以double可以容纳32位所有int的值，不会发生舍弃的情况，所以不论是按何种顺序运
  算结果都是一样的。

D.是，double的取值范围为-2^-1024 ~ 2^1024 = -1.7e(-308)～1.7e308。所以当dx=1e155，
  dy=1e155，dz=1e-155时，左边的式子结果为Inf，而右边为1e155。但int并没有那么大的数值，32
  位int只能表示-2147483648~2147483647这个范围，所以double在这个式子中完全可以容纳3个int
  相乘的结果而不产生误差，所以整个式子是为真值的。

E.否，若dy或dx中任意一个且仅有一个为0时，那么左右边的值是不一样的，为0的那一部为Not a
  Number，而另一部分则为1，所以整个式子不相等。
</code></pre><hr>
<h6 id="2-92"><a href="#2-92" class="headerlink" title="2.92"></a>2.92</h6><p>遵循位级浮点编码规则，实现具有如下原型的函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Compute -f.  If f is NaN, then return f. */</span></div><div class="line"><span class="function">float_bits <span class="title">float_negate</span><span class="params">(float_bits f)</span></span>;</div></pre></td></tr></table></figure>
<p>对于浮点数 f，这个函数计算-f。如果 f 是 NaN，你的函数应该简单地返回 f。测试你的函数，对参数 f 可以取的所有 2^32 个值求值，将结果与你使用机器的浮点运算得到的结果相比较。</p>
<p><strong>答：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">type <span class="keyword">unsigned</span> float_bits;</div><div class="line"><span class="function">float_bits <span class="title">float_negate</span><span class="params">(float_bits f)</span></span>&#123;</div><div class="line">    <span class="keyword">unsigned</span> s = f &gt;&gt; <span class="number">31</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="built_in">exp</span> = (f &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xff</span>;</div><div class="line">    <span class="keyword">unsigned</span> frac = f &amp; <span class="number">0x7fffff</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> == <span class="number">0xff</span> &amp;&amp; frac != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (~s &lt;&lt; <span class="number">31</span>) | (<span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>) | frac;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码解释：</strong><br>    首先明确，float_bits肯定是用unsigned来保存的。其次我们要把浮点数f的符号位、阶码、尾数三个部分都取出来存到不同的变量中以备后续使用。符号位我们可以通过右移31位得到，因为已经定义float_bits为unsigned，所以右移为逻辑右移，不需要考虑符号位填充右移位的问题。阶码通过右移23位并与0xff相与得到，最后是小数部分通过与低23位1也就是0x7fffff相与取低23位的值得到。<br>    根据题意，若f为NaN则返回f，否则返回-f。根据定义，f为NaN的定义为：阶码全为1且尾数部分不为0。所以有<code>if(exp == 0xff &amp;&amp; frac != 0)</code>。<br>    最后看看返回-f的情况，通过把符号位取反后左移31位还原符号位，接着把阶码左移23位并与之前还原过的符号位相或，最后与小数部分相或，这样就得到了一个-f。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于二进制运算中的原码反码补码的一些理解]]></title>
      <url>http://blublu.xyz/computer-principle/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>今天在上计组的课的时候又再次提到了位运算，当然也提到了加减法中的经典问题，为什么计算机要用补码（Two’s Complement）来表示负数。</p>
<h3 id="二进制的基本表示范围"><a href="#二进制的基本表示范围" class="headerlink" title="二进制的基本表示范围"></a>二进制的基本表示范围</h3><p>首先先从8位二进制说起吧，依次类推，直到64位及以上都是适用的。<br>8位二进制正数表示范围：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000</span> <span class="number">0000</span> ~ <span class="number">1111</span> <span class="number">1111</span></div><div class="line">（<span class="number">0</span> ~ <span class="number">255</span>）</div></pre></td></tr></table></figure>
<p>可见直观的二进制方案只能表示正数，那么如果需要表示负数就需要占用最高位来作为符号位，0表示正数，1表示负数。这样，8位二进制数表示范围就发生了变化：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">负数：<span class="number">1</span> <span class="number">111</span> <span class="number">1111</span> ~ <span class="number">1</span> <span class="number">000</span> <span class="number">0000</span> </div><div class="line">    （<span class="number">-127</span> ~  <span class="number">-0</span>)</div><div class="line">正数：<span class="number">0</span> <span class="number">000</span> <span class="number">0000</span> ~ <span class="number">0</span> <span class="number">111</span> <span class="number">1111</span></div><div class="line">    （<span class="number">0</span> ~ <span class="number">127</span>）</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>若要计算16 + (-8) = ?，则我们可以得到以下算式：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  <span class="number">0</span> <span class="number">001</span> <span class="number">0000</span></div><div class="line">+ <span class="number">1</span> <span class="number">000</span> <span class="number">1000</span></div><div class="line">----------------</div><div class="line">  <span class="number">1</span> <span class="number">001</span> <span class="number">1000</span></div></pre></td></tr></table></figure>
<p>结果出乎意料，并非我们想象中的8，而是-24。</p>
<h3 id="补码运算"><a href="#补码运算" class="headerlink" title="补码运算"></a>补码运算</h3><p>如果要保证结果正确，就需要修改计算机做加法的方式，非常不方便。所以我们需要采用补码形式来表示有符号数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  <span class="number">0</span> <span class="number">001</span> <span class="number">0000</span></div><div class="line">+ <span class="number">1</span> <span class="number">111</span> <span class="number">1000</span></div><div class="line">----------------</div><div class="line"> <span class="number">10</span> <span class="number">000</span> <span class="number">1000</span></div></pre></td></tr></table></figure>
<p>注意到这是一个9位的二进制，因为我们只有8位，所以舍弃最高位1，看下结果，非常完美，就是8.</p>
<p>那么补码怎么计算出来的呢？</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、正数：原码和补码一致</div><div class="line"><span class="number">2</span>、负数：符号位不变，原码取反，然后加<span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="补码的本质"><a href="#补码的本质" class="headerlink" title="补码的本质"></a>补码的本质</h3><p>要将证书转变成对应的负数，只要用0减去这个数就可以了，但是明显不够减，所以我们需要<strong>向前借一位</strong>，0-16就可以用以下式子求出：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span> <span class="number">111</span> <span class="number">1111</span></div><div class="line">- <span class="number">0</span> <span class="number">001</span> <span class="number">1111</span></div><div class="line">----------------</div><div class="line">  <span class="number">1</span> <span class="number">110</span> <span class="number">1111</span></div><div class="line">+ <span class="number">0</span> <span class="number">000</span> <span class="number">0001</span></div><div class="line">----------------</div><div class="line">  <span class="number">1</span> <span class="number">111</span> <span class="number">0000</span></div></pre></td></tr></table></figure>
<p>这不就是我们上边所说的，符号位不变，按位取反再加1么。结果已经很快的出来了，是正确的。<strong>根据<code>1 111 0000</code>再求一次补码就可以得到它的真值<code>1 001 0000</code>。</strong>当然如果是正数也是需要再求一次补码才能得到真值的，但是因为正数的补码与原码相同，所以可以直接求值。</p>
<p>我们再来看看之前16-8产生溢出的情况，因为结果肯定是为正数，那么前一位的符号位此时为1必然要溢出掉变为0才会得到我们想要的正数结果，是什么造成这样的溢出呢？我们可以看前文，补码的本质是向前借了一位来进行运算求补码的，所以其实这多溢出的一位就是之前向前借的那一位。</p>
<h3 id="关于补码再求补码为真值"><a href="#关于补码再求补码为真值" class="headerlink" title="关于补码再求补码为真值"></a>关于补码再求补码为真值</h3><p>其实我们可以假设一个时钟的周期为12小时，当前为2点钟，如果要把时钟调整到5点，一种方案是顺时针转动3个单位，另一种方案是逆时针转动9个单位，我们约定顺时针为-，逆时针为+。那么就有-3的补码就是+9，补码的再求补就是-3，就是原值了。相当于反复拨时钟而已。</p>
<h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>逻辑移位（不管是左移位还是右移位） 都是空缺处补0<br>算术移位要保证符号位的不改变（逻辑左移位补0, 逻辑右移位看符号位）</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>不难发现，-1的补码还可以这么求：1取反（包括符号位），然后加1，其实也能得到-1的补码。在程序中，可以让表示一个数的相反数表示如下：~num + 1。当然，表示为-1* num更为直观。其实本质就是先通过符号位取反来达到负数的效果，然后求补码，因为在C语言中int型变量是要用补码来表示的，所以自然而然就求出了相反数。</p>
<ul>
<li>如果是正数，比如0001，那么求出的负数的补码就是1111，当计算机要显示为十进制时，又需要再求一次补码，变为1001，结果就是-1；</li>
<li>如果是负数，比如1011(-3)，那么求出的正数的补码就是0101，当计算机要显示为十进制的时候同样需要再求一次补码，但是因为正数补码相同，所以结果是3. </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二级指针操纵单向链表]]></title>
      <url>http://blublu.xyz/programming/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E6%93%8D%E7%BA%B5%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>越往深处学越感觉底层的重要性，在受不了上层无穷多的新武器的学习之后，打算再潜心修炼一下基本功。正好看到了一个比较有趣的关于单向链表删除的问题，下来就来细细剖析这个问题。</p>
<p>如果对二级指针不太清楚的同学，可以查看我之前写的关于<a href="/programming/指针的指针——二级指针/">二级指针</a>的文章。</p>
<p>一般来说，在单项链表中要删除当前curr节点时，只需要令<code>prev-&gt;next = next</code>，再<code>free(curr)</code>就完成了这个删除操作。但是这样做不好的地方是我们必然要维护一个previous先序结点，且在每次判断时还需要区分当前结点是否是头节点，如果是头节点在删除之前还要令<code>head = next</code>。完整的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">struct</span> node * next;</div><div class="line">    ....</div><div class="line">&#125; node;</div><div class="line"><span class="comment">//给bool(*)(node const)的类型函数指针取一个别名为remove_fn </span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(* remove_fn)</span><span class="params">(node <span class="keyword">const</span> * v)</span></span>;</div><div class="line"> </div><div class="line"><span class="comment">// Remove all nodes from the supplied list for which the</span></div><div class="line"><span class="comment">// supplied remove function returns true.</span></div><div class="line"><span class="comment">// Returns the new head of the list.</span></div><div class="line"><span class="function">node * <span class="title">remove_if</span><span class="params">(node * head, remove_fn rm)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (node * prev = <span class="literal">NULL</span>, * curr = head; curr != <span class="literal">NULL</span>; )&#123;</div><div class="line">        node * <span class="keyword">const</span> next = curr-&gt;next;</div><div class="line">        <span class="keyword">if</span> (rm(curr))&#123;</div><div class="line">            <span class="keyword">if</span> (prev)</div><div class="line">                prev-&gt;next = next;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                head = next;</div><div class="line">            <span class="built_in">free</span>(curr);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            prev = curr;</div><div class="line">            </div><div class="line">        curr = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果你了解指针这一神器搬的东西的话，那么我们意识到删除操作的本质是指针值的改变，这样自然而然就会想要用二级指针去操纵指针的值。下面来看一段用二级指针改进的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_if</span><span class="params">(node ** head, remove_fn rm)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (node** curr = head; *curr; )&#123;</div><div class="line">        node * entry = *curr;</div><div class="line">        <span class="keyword">if</span> (rm(entry))&#123;</div><div class="line">            *curr = entry-&gt;next;            <span class="built_in">free</span>(entry);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            curr = &amp;entry-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以很清楚的看到，不需要再维护prev指针了，也不需要再判断是否为链表头了，奇妙之处就在于，curr变成了一个指向指针的指针。</p>
<p>我们来好好分析一下上面的代码：</p>
<ul>
<li><p>假设当前为程序刚开始的情况：</p>
<ol>
<li>调用函数时应为：remove_if(&amp;phead, rm)取phead指针的地址赋给函数里的形参head，phead为指向首节点的指针；</li>
<li>c/c++ 语言的函数 参数传递一律为值传递。要达到改变所传递的参数的值,我们只能想法把存放这个实际值的内存地址当做参数进行传递，然后我们操作内存地址，通过修改这个地址所指向的值，间接达到修改这个值的效果；</li>
<li>*curr（我们马上删除它）也就是首节点的地址，因为head的值为phead的地址，所以*head为phead的内容，也就是首节点的地址，**head即为*phead，也就是首节点的内容。</li>
<li><code>*curr = entry-&gt;next</code>语句中，entry当前值为首节点的地址，也表示首节点，所以*curr在语句执行完之后就会是第二个节点的地址。</li>
<li><code>curr = &amp;entry-&gt;next</code>语句中，curr保存的是当前结点next指针的地址，也就意味着*curr为下一个节点的地址，**curr为下一个节点的内容。</li>
</ol>
</li>
<li>对于不是刚开始的情况：<ol>
<li>如果不删除当前结点 —— curr保存的是当前结点next指针的地址</li>
<li>entry 保存了 *curr —— 这意味着在下一次循环：entry就是prev-&gt;next指针所指向的内存</li>
<li>删除结点：*curr = entry-&gt;next; —— 于是：prev-&gt;next 指向了 entry -&gt; next</li>
</ol>
</li>
</ul>
<p>如果不是很清楚的话，来看看下面的几张图：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-10-10-19%3A31%3A33.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[指针的指针--二级指针]]></title>
      <url>http://blublu.xyz/programming/%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
      <content type="html"><![CDATA[<p>在重新温习C/C++的时候不可避免的重头戏就是指针，指针要用得好，光用一层显然是不行的，我们还需要知道二级指针的操纵。</p>
<p>假设A-&gt;B-&gt;C,即A指向B，B指向C的关系中，C是一段我们实际关心的内容，假如我们用malloc或者new分配了一块内存，然后赋值”一段内容”进去，那么就是C了。我们假设C的内存起始地址为0x00000008.那么我们自然而然就可以得出：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">B == <span class="number">0x00000008</span>;<span class="comment">//B内存块的实际内容</span></div><div class="line">*B == <span class="string">"一段内容"</span>;<span class="comment">//B解引用，也就是B指针指向的C的值</span></div><div class="line">&amp;B == <span class="number">0x00000008</span> <span class="string">"//B取地址，B的地址是0x00000004</span></div></pre></td></tr></table></figure>
<p>那么我们再来看看A此时的情况：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*A == B == <span class="number">0x00000008</span>;  <span class="comment">//A解引用也就是B的内容   </span></div><div class="line">**A == *B == <span class="string">"一段内容"</span>;  <span class="comment">//B解引用，也就是B指针指向的C的值  </span></div><div class="line">A == &amp;B == <span class="number">0x00000004</span>;  <span class="comment">//A存的是B的地址，B的地址是0x00000004  </span></div><div class="line">&amp;A == <span class="number">0x00000000</span>;  <span class="comment">//A取地址，A的地址是0x00000000</span></div></pre></td></tr></table></figure>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-10-10-17%3A58%3A23.jpg" alt=""><br><a id="more"></a><br><strong>二级指针的意义</strong>：之所以定义二级指针**P，不是为了使用**P表示指向的值，而是为了使用*P来存储存储值的那个单元的地址。<strong>同时也是希望别人给自己的一个指针赋值（可以拿来动态申请内存地址等等）</strong> 。</p>
<p>看看下面一段代码：有两个变量a,b,指针q,q指向a，我们想让q指向b,在函数里面实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> a= <span class="number">10</span>;  </div><div class="line"><span class="keyword">int</span> b = <span class="number">100</span>;  </div><div class="line"><span class="keyword">int</span> *q;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"func:&amp;p="</span>&lt;&lt;&amp;p&lt;&lt;<span class="string">",p="</span>&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//note:3  </span></div><div class="line">    p = &amp;b;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"func:&amp;p="</span>&lt;&lt;&amp;p&lt;&lt;<span class="string">",p="</span>&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//note:4  </span></div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"&amp;a="</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">",&amp;b="</span>&lt;&lt;&amp;b&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//note:1  </span></div><div class="line">    q = &amp;a;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*q="</span>&lt;&lt;*q&lt;&lt;<span class="string">",q="</span>&lt;&lt;q&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//note:2  </span></div><div class="line">    func(q);  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*q="</span>&lt;&lt;*q&lt;&lt;<span class="string">",q="</span>&lt;&lt;q&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//note:5  </span></div><div class="line">  </div><div class="line">    system(<span class="string">"pause"</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来看看输出的结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&amp;a=<span class="number">0x101d6a0c8</span>,&amp;b=<span class="number">0x101d6a0cc</span>,&amp;q=<span class="number">0x101d6a0d0</span></div><div class="line">*q=<span class="number">10</span>,q=<span class="number">0x101d6a0c8</span>,&amp;q=<span class="number">0x101d6a0d0</span></div><div class="line">func:&amp;p=<span class="number">0x7fff5de97ab8</span>,p=<span class="number">0x101d6a0c8</span></div><div class="line">func:&amp;p=<span class="number">0x7fff5de97ab8</span>,p=<span class="number">0x101d6a0cc</span></div><div class="line">*q=<span class="number">10</span>,q=<span class="number">0x101d6a0c8</span>,&amp;q=<span class="number">0x101d6a0d0</span></div></pre></td></tr></table></figure>
<p><strong>为什么*q不是100？</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">note:<span class="number">1</span>-&gt;a,b,q都有一个地址.</div><div class="line">note:<span class="number">2</span>-&gt;q指向a.</div><div class="line">note:<span class="number">3</span>-&gt;我们发现参数p的地址变了,跟q不一样了，是的参数传递是制作了一个副本,也就是p和q不是同一个指针,但是指向的地址<span class="number">0x0032F000</span>(a的地址)还是不变的.</div><div class="line">note:<span class="number">4</span>-&gt;p重新指向b.</div><div class="line">note:<span class="number">5</span>-&gt;退出函数,p的修改并不会对q造成影响。</div></pre></td></tr></table></figure>
<p>你可能会问，我们可以通过<em>p = b,来使得\</em>q==100啊，但是这样，q的内容还是指向a，是a的值变为了100，而不是指针q指向了b。</p>
<p><strong>编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 p，编译器使 p = q(但是&amp;p != &amp;q,也就是他们并不在同一块内存地址，只是他们的内容一样，都是a的地址)。如果函数体内的程序修改了p的内容(比如在这里它指向b)。在本例中，p申请了新的内存，只是把 p所指的内存地址改变了(变成了b的地址,但是q指向的内存地址没有影响)，所以在这里并不影响函数外的指针q。</strong></p>
<p>接下来看看二级指针的操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a= <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> *q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> **p)</span>  </span>&#123;<span class="comment">//2</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"func:&amp;p="</span>&lt;&lt;&amp;p&lt;&lt;<span class="string">", p="</span>&lt;&lt;p&lt;&lt;<span class="string">",*p="</span>&lt;&lt;*p&lt;&lt;<span class="string">",**p="</span>&lt;&lt;**p&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    *p = &amp;b;  <span class="comment">//3</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"func:&amp;p="</span>&lt;&lt;&amp;p&lt;&lt;<span class="string">", p="</span>&lt;&lt;p&lt;&lt;<span class="string">",*p="</span>&lt;&lt;*p&lt;&lt;<span class="string">",**p="</span>&lt;&lt;**p&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&amp;a="</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">",&amp;b="</span>&lt;&lt;&amp;b&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    q = &amp;a;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*q="</span>&lt;&lt;*q&lt;&lt;<span class="string">",q="</span>&lt;&lt;q&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    func(&amp;q);  <span class="comment">//1</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*q="</span>&lt;&lt;*q&lt;&lt;<span class="string">",q="</span>&lt;&lt;q&lt;&lt;<span class="string">",&amp;q="</span>&lt;&lt;&amp;q&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&amp;a=<span class="number">0x1088990c8</span>,&amp;b=<span class="number">0x1088990cc</span>,&amp;q=<span class="number">0x1088990d0</span></div><div class="line">*q=<span class="number">10</span>,q=<span class="number">0x1088990c8</span>,&amp;q=<span class="number">0x1088990d0</span></div><div class="line">func:&amp;p=<span class="number">0x7fff57368ab8</span>, p=<span class="number">0x1088990d0</span>,*p=<span class="number">0x1088990c8</span>,**p=<span class="number">10</span></div><div class="line">func:&amp;p=<span class="number">0x7fff57368ab8</span>, p=<span class="number">0x1088990d0</span>,*p=<span class="number">0x1088990cc</span>,**p=<span class="number">100</span></div><div class="line">*q=<span class="number">100</span>,q=<span class="number">0x1088990cc</span>,&amp;q=<span class="number">0x1088990d0</span></div></pre></td></tr></table></figure>
<p>结果一目了然了，p的值为q的地址,<em>p的值为b的地址，\</em>*p的值为b的值100，也就是q的地址的值为b的地址了，q指向了b。</p>
<p>上面的代码对于第一次一级指针的代码来说只改了三个地方，变成了传二级指针。</p>
<p>当然二级指针这个东西，需要有更多的时间，理解更深之后，就能够自然而然地理解了。</p>
<p>现在举个简单例子来说明它。画一个地址大小为 1byte 的内存空间：</p>
<table>
<thead>
<tr>
<th>addr</th>
<th>value</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>20</td>
<td>0A</td>
<td>//ch1;</td>
</tr>
<tr>
<td>21</td>
<td>CC</td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>20</td>
<td>//p1;</td>
</tr>
<tr>
<td>23</td>
<td>22</td>
<td>//pp1;</td>
</tr>
</tbody>
</table>
<p>现在我们假设有一个变量</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> ch1 = <span class="number">0x0A</span>;  <span class="comment">// 假设 ch1 的地址位于 20H: m[20H] = 0AH;</span></div><div class="line"><span class="keyword">char</span>* p1 = &amp;ch1;</div><div class="line"><span class="keyword">char</span>** pp1 = &amp;p1;</div></pre></td></tr></table></figure>
<p>假设内存空间，我们看做一个数组： char[ ]; 为这个数组取个名字叫做 m，例如：<br><code>char m[256];</code><br>现在我们得到那个 0x0A ，就可以通过<br><code>char ch2 = **pp1;</code><br>因此，我们就可以理解成：<br><code>char ch2 = m[ m[ pp1 ] ];  //解二级指针引用。</code></p>
<p><strong>以上是二级指针</strong></p>
<hr>
<p>同样，<br><code>char ch3 = *p1;</code><br>可以理解成：<br><code>char ch3 = m[ p1 ]; //解指针引用</code><br>OK，在汇编层面，就是这样（在汇编语言中，没有 m，只会出现 [ ]） 。比如说：</p>
<figure class="highlight as"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV EAX, [ EDX + <span class="number">8</span> ]</div><div class="line">CALL EAX</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AT&T风格汇编语言语法]]></title>
      <url>http://blublu.xyz/programming/AT-T%E9%A3%8E%E6%A0%BC%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="AT-amp-T风格汇编语言语法"><a href="#AT-amp-T风格汇编语言语法" class="headerlink" title="AT&amp;T风格汇编语言语法"></a>AT&amp;T风格汇编语言语法</h1><h4 id="1-Register-Reference"><a href="#1-Register-Reference" class="headerlink" title="1. Register Reference"></a>1. Register Reference</h4><p>引用寄存器要在寄存器号前加百分号<code>%</code>,如<code>“movl %eax, %ebx”</code>。<br>80386 有如下寄存器:<br>[1] 8 个32-bit 寄存器 <code>%eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp</code>；<br>( 8 个16-bit 寄存器，它们事实上是上面8 个32-bit 寄存器的低16 位：<code>%ax，%bx，%cx，%dx，%di，%si，%bp，%sp</code>；8 个8-bit 寄存器：<code>%ah，%al，%bh，%bl，%ch，%cl，%dh，%dl</code>。它们事实上是寄存器<code>%ax，%bx，%cx，%dx 的高8 位和低8位</code>；)<br>[2] 6 个段寄存器：<code>%cs(code)，%ds(data)，%ss(stack), %es，%fs，%gs</code>；<br>[3] 3 个控制寄存器：<code>%cr0，%cr2，%cr3</code>；<br>[4] 6 个debug 寄存器：<code>%db0，%db1，%db2，%db3，%db6，%db7</code>；<br>[5] 2 个测试寄存器：<code>%tr6，%tr7</code>；<br>[6] 8 个浮点寄存器<br>栈：<code>%st(0)，%st(1)，%st(2)，%st(3)，%st(4)，%st(5)，%st(6)，%st(7)</code>。<br><a id="more"></a></p>
<h4 id="2-Operator-Sequence"><a href="#2-Operator-Sequence" class="headerlink" title="2. Operator Sequence"></a>2. Operator Sequence</h4><p>操作数排列是从源（左）到目的（右），如“movl %eax(源）, %ebx(目的）”   </p>
<h4 id="3-Immediately-Operator"><a href="#3-Immediately-Operator" class="headerlink" title="3. Immediately Operator"></a>3. Immediately Operator</h4><p>使用立即数，要在数前面加符号\$, 如 <code>“movl $0x04, %ebx”</code><br>或者：<br><code>para = 0x04</code><br><code>movl $para, %ebx</code><br>指令执行的结果是将立即数 <code>0x04</code> 装入寄存器<code>ebx</code>。   </p>
<h4 id="4-Symbol-Constant"><a href="#4-Symbol-Constant" class="headerlink" title="4. Symbol Constant"></a>4. Symbol Constant</h4><p>符号常数直接引用 如:<br><code>value: .long 0x12a3f2de</code><br><code>movl value , %ebx</code><br>指令执行的结果是将常数<code>0x12a3f2de</code> 装入寄存器<code>ebx</code>。<br>引用符号地址在符号前加符号\$, 如 <code>“movl $value, % ebx”</code>则是将符号<code>value</code> 的地址装入寄存器<code>ebx</code>。   </p>
<h4 id="5-Length-of-Operator"><a href="#5-Length-of-Operator" class="headerlink" title="5. Length of Operator"></a>5. Length of Operator</h4><p>操作数的长度用加在指令后的符号表示<code>b(byte, 8-bit), w(word, 16-bits), l(long,32-bits)</code>，如<code>“movb %al, %bl”</code>，<code>“movw %ax, %bx”</code>，<code>“movl %eax, %ebx”</code>。<br><strong>如果没有指定操作数长度的话，编译器将按照目标操作数的长度来设置。</strong><br>比如指令 <code>“mov %ax, %bx”</code>，由于目标操作数<code>bx</code> 的长度为<code>word</code>，那么编译器将把此指令等同于<code>“movw %ax,%bx”</code>。同样道理，指令<code>“mov $4, %ebx”</code>等同于指令<code>“movl $4, %ebx”</code>，<code>“push %al”</code>等同于<code>“pushb %al”</code>。<br>对于没有指定操作数长度，但编译器又无法猜测的指令，编译器将会报错，比如指令<code>“push $4”</code>。   </p>
<h4 id="6-Sign-and-Zero-Extension"><a href="#6-Sign-and-Zero-Extension" class="headerlink" title="6. Sign and Zero Extension"></a>6. Sign and Zero Extension</h4><p>绝大多数面向80386 的AT&amp;T 汇编指令与Intel 格式的汇编指令都是相同的，但符号扩展指令和零扩展指令有不同格式。符号扩展指令和零扩展指令需要指定源操作数长度和目的操作数长度，即使在某些指令中这些操作数是隐含的。<br>在AT&amp;T 语法中，符号扩展和零扩展指令的格式为，基本部分<code>&quot;movs&quot;</code>和<code>&quot;movz&quot;</code>（对应Intel 语法的<code>movsx</code> 和<code>movzx</code>），后面跟上源操作数长度和目的操作数长度。<br><code>movsbl</code>意味着<code>movs（from）byte（to）long</code>；<br><code>movbw</code>意味着<code>movs （from）byte （to）word</code>；<br><code>movswl</code>意味着<code>movs （from）word （to）long</code>。<br>对于movz 指令也一样。比如指令“movsbl %al,%edx”意味着将al 寄存器的内容进行符号扩展后放置到edx 寄存器中。 其它的Intel 格式的符号扩展指令还有：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cbw -- <span class="keyword">sign</span>-extend byte <span class="keyword">in</span> %al to word <span class="keyword">in</span> %ax； </div><div class="line">cwde -- <span class="keyword">sign</span>-extend word <span class="keyword">in</span> %ax to long <span class="keyword">in</span> %eax； </div><div class="line">cwd -- <span class="keyword">sign</span>-extend word <span class="keyword">in</span> %ax to long <span class="keyword">in</span> %dx:%ax； </div><div class="line">cdq -- <span class="keyword">sign</span>-extend dword <span class="keyword">in</span> %eax to quad <span class="keyword">in</span> %edx:%eax； </div><div class="line">对应的AT&amp;T 语法的指令为cbtw，cwtl，cwtd，cltd.</div></pre></td></tr></table></figure></p>
<h4 id="7-Call-and-Jump"><a href="#7-Call-and-Jump" class="headerlink" title="7. Call and Jump"></a>7. Call and Jump</h4><p>段内调用和跳转指令为<code>call</code>，<code>ret</code>和<code>jmp</code>，段间调用和跳转指令为<code>lcall</code>，<code>lret</code>和<code>ljmp</code>。段间调用和跳转指令的格式为<code>lcall/ljmp $SECTION, $OFFSET</code>，而段间返回指令则为<code>lret $STACK-ADJUST</code>。</p>
<h4 id="8-Prefix"><a href="#8-Prefix" class="headerlink" title="8. Prefix"></a>8. Prefix</h4><p>操作码前缀被用在下列的情况：<br>[1]字符串重复操作指令(rep,repne)；<br>[2]指定被操作的段(cs,ds,ss,es,fs,gs)；<br>[3]进行总线加锁(lock)；<br>[4]指定地址和操作的大小(data16,addr16)；<br>在AT&amp;T 汇编语法中，操作码前缀通常被单独放在一行，后面不跟任何操作数。例如，对于重复scas 指令，其写法为：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">repne</span> </div><div class="line">scas</div></pre></td></tr></table></figure></p>
<p>上述操作码前缀的意义和用法如下：<br>[1]指定被操作的段前缀为<code>cs,ds,ss,es,fs</code>,和<code>gs</code>。在AT&amp;T 语法中，只需要按照 section:memory-operand 的格式就指定了相应的段前缀。比如：<code>lcall %cs:realmode_swtch</code><br>[2]操作数／地址大小前缀是<code>data16</code>和<code>addr16</code>，它们被用来在32-bit 操作数／地址代码中指定16-bit 的操作数／地址。<br>[3]总线加锁前缀<code>lock</code>，它是为了在多处理器环境中，保证在当前指令执行期间禁止一切中断。这个前缀仅仅对<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ADD</span>, <span class="keyword">ADC</span>, <span class="keyword">AND</span>, <span class="keyword">BTC</span>, <span class="keyword">BTR</span>, <span class="keyword">BTS</span>, <span class="keyword">CMPXCHG</span>,<span class="keyword">DEC</span>, </div><div class="line"><span class="keyword">INC</span>, <span class="keyword">NEG</span>, <span class="keyword">NOT</span>, <span class="keyword">OR</span>, <span class="keyword">SBB</span>, <span class="keyword">SUB</span>, <span class="keyword">XOR</span>, <span class="keyword">XADD</span>,<span class="keyword">XCHG</span></div></pre></td></tr></table></figure></p>
<p>指令有效，如果将Lock 前 缀用在其它指令之前，将会引起异常。<br>[4]字符串重复操作前缀<code>rep</code>,<code>repe</code>,<code>repne</code>用来让字符串操作重复<code>%ecx</code>次。</p>
<h4 id="9-Memory-Reference"><a href="#9-Memory-Reference" class="headerlink" title="9. Memory Reference"></a>9. Memory Reference</h4><p>Intel 语法的间接内存引用的格式为：<code>section:[base+index*scale+displacement]</code><br>而在AT&amp;T 语法中对应的形式为： <code>section:displacement(base,index,scale)</code><br>其中，<code>base</code> 和<code>index</code>是任意的<code>32-bit base 和index 寄存器</code>。<code>scale</code> 可以取值1，2，4，8。如果不指定scale 值，则默认值为1。<br><code>section</code>可以指定任意的段寄存器作为段前缀，默认的段寄存器在不同的情况下不一样。如果在指令中指定了默认的段前缀，则编译器在目标代码中不会产生此段前缀代码。下面是一些例子：</p>
<p><code>-4(%ebp)</code>：<code>base=%ebp，displacement=-4</code>，<code>section</code>没有指定，由于<code>base＝%ebp</code>，所以默认的<code>section=%ss</code>，<code>index,scale</code> 没有指定，则<code>index</code>为0。<br><code>foo(,%eax,4)</code>：<code>index=%eax，scale=4，displacement=foo</code>。其它域没有指定。这里默认的<code>section=%ds</code>。<br><code>foo(,1)</code>：这个表达式引用的是指针<code>foo</code>指向的地址所存放的值。注意这个表达式中没有<code>base</code> 和<code>index</code>，并且只有一个逗号，这是一种异常语法，但却合法。</p>
<p><code>%gs:foo</code>：这个表达式引用的是放置于<code>%gs</code>段里变量<code>foo</code>的值。<br>如果<code>call</code>和<code>jump</code>操作在操作数前指定前缀“*”，则表示是一个绝对地址调用/跳转，也就是说<code>jmp/call</code>指令指定的是一个绝对地址。如果没有指定”*“，则操作数是一个相对地址。任何指令如果其操作数是一个内存操作，则指令必须指定它的操作尺寸<code>byte,word,long</code>，也就是说必须带有指令后缀<code>b,w,l</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Intellij Idea + Maven构建Java Web项目]]></title>
      <url>http://blublu.xyz/Web/%E4%BD%BF%E7%94%A8Intellij-Idea-Maven%E6%9E%84%E5%BB%BAJava-Web%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>   最近正好需要用到Java来做一个web项目，好久也没接触Java了，也是趁着这个机会再熟悉熟悉Java。用Java来做web项目，配置是至关重要的，也是相当繁琐的。不过好在自从servlet3.0与Spring之后，编写Java web已经变得比较简单了，不再需要那么多的xml配置，确实大大提高了生产力。</p>
<p>   接下来该进入主题了，主要还是用maven来构建一个web项目，首先还是先要来了解一下Maven是什么，以及它可以拿来干嘛。</p>
<blockquote>
<p>Maven 其实是很多东西，Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后Maven可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。Maven 有一个生命周期，当你运行 mvn install 的时候被调用。这条命令告诉 Maven 执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven 运行了许多默认的插件目标，这些目标完成了像编译和创建一个 JAR 文件这样的工作。此外，Maven能够很方便的帮你管理项目报告，生成站点，管理JAR文件，等等。</p>
</blockquote>
<p><strong>但是简而言之，maven是把设计模式应用于构建架构的一种尝试，如下列出了maven 的大部分功能。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-Builds</div><div class="line">-Documentation</div><div class="line">-Reporting</div><div class="line">-Dependencies</div><div class="line">-SCMs</div><div class="line">-Releases</div><div class="line">-Distribution.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>值得一提的是，<strong>maven是约定优于配置的</strong> src/main/java约定用于存放源代码，src/main/test用于存放单元测试代码，src/target用于存放编译、打包后的输出文件。这是maven项目的通用约定，所以必须记住这些固定的目录结构。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A29%3A32.jpg" alt=""></p>
<p><strong>接下来就是说一些常用的命令了：</strong></p>
<ol>
<li>编译项目<ul>
<li>切换到项目所在的目录，执行<code>mvn compile</code> 这样就能对项目进行编译了，编译后会自动在target目录中生成class文件</li>
</ul>
</li>
<li>单元测试<ul>
<li>同样的需要切换到项目所在的目录，执行<code>mvn clean test</code></li>
</ul>
</li>
<li>项目打包<ul>
<li>一般来说我们会把项目打包成jar或者war，打包命令为<code>mvn clean package</code>。运行完后，会在target目录下生成jar包</li>
</ul>
</li>
</ol>
<p><strong>当然了，以上说的都是在命令行方式下的使用方式，关于maven的安装，如果在OSX系统上的话可以用homebrew来进行安装，其他的Linux发行版的话可以根据不同的包管理器来进行安装，都非常简单。</strong></p>
<hr>
<p>然后就开始用idea来一步步新建一个web项目：</p>
<ol>
<li>新建一个项目<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A42%3A50.jpg" alt=""></li>
<li>在弹出的new project 页面，选择maven -&gt; 勾选Create from artifactype<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A48%3A25.jpg" alt=""></li>
<li>接下来就是填写GroupId和ArtifactId了。GroupId就是项目组织唯一标识符，说简单点就是类似Java包的结构，习惯上都是域名反过来。而ArtifactId就是项目的唯一标识符，其实就是项目的名称而已。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A51%3A56.jpg" alt=""></li>
<li>这一步直接默认next也可以，archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据，这样创建的速度会快很多。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A29%3A17.jpg" alt=""></li>
<li>填写project name和module name，module name默认和project name 一样的。如果有多个module，还是可以改一下module名。<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A58%3A23.jpg" alt=""></li>
<li>接着就在创建中了，根据网络的情况时间不定<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A00%3A54.jpg" alt=""></li>
<li>光配置完maven不配置tomcat怎么行，接下来就开始配置一下tomcat.<br><strong>在配置tomcat之前有一点重要的要说，因为如果是使用OSX系统的话，从10.10开始1024一下的端口是不能够使用的，所以如果需要外网域名映射到本地80端口的话需要进行端口转发才可以（踩了不少坑..）特别是在做微信开发的时候，需要与Tencent的服务器交互验证，同时也需要在本地进行调试才方便。对这一块应该还是比较需要的。至于用外网域名映射到本地的方案，可以选择ngrok。</strong><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A37%3A08.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A41%3A29.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A46%3A30.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A49%3A16.jpg" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A54%3A18.jpg" alt=""></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim常用命令]]></title>
      <url>http://blublu.xyz/knowledge/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Vim常用命令"><a href="#Vim常用命令" class="headerlink" title="Vim常用命令"></a>Vim常用命令</h1><h3 id="光标移动-Cursor-Movement"><a href="#光标移动-Cursor-Movement" class="headerlink" title="光标移动(Cursor Movement)"></a>光标移动(Cursor Movement)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释）</th>
</tr>
</thead>
<tbody>
<tr>
<td>h,j,k,l</td>
<td>h表示往左，j表示往下，k表示往右，l表示往上</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>上一页</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>下一页</td>
</tr>
<tr>
<td>w, e, W, E</td>
<td>跳到单词的后面，小写包括标点</td>
</tr>
<tr>
<td>b, B</td>
<td>以单词为单位往前跳动光标，小写包含标点</td>
</tr>
<tr>
<td>O</td>
<td>开启新的一行</td>
</tr>
<tr>
<td>^</td>
<td>一行的开始</td>
</tr>
<tr>
<td>$</td>
<td>一行的结尾</td>
</tr>
<tr>
<td>gg</td>
<td>文档的第一行</td>
</tr>
<tr>
<td>[N]G</td>
<td>文档的第N行或者最后一行</td>
</tr>
</tbody>
</table>
<h3 id="插入模式-Insert-Mode"><a href="#插入模式-Insert-Mode" class="headerlink" title="插入模式(Insert Mode)"></a>插入模式(Insert Mode)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>插入到光标前面</td>
</tr>
<tr>
<td>I</td>
<td>插入到行的开始位置</td>
</tr>
<tr>
<td>a</td>
<td>插入到光标的后面</td>
</tr>
<tr>
<td>A</td>
<td>插入到行的最后位置</td>
</tr>
<tr>
<td>o, O</td>
<td>新开一行</td>
</tr>
<tr>
<td>Esc</td>
<td>关闭插入模式</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="编辑-Editing"><a href="#编辑-Editing" class="headerlink" title="编辑(Editing)"></a>编辑(Editing)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释）</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>在插入模式替换光标所在的一个字符</td>
</tr>
<tr>
<td>J</td>
<td>合并下一行到上一行</td>
</tr>
<tr>
<td>s</td>
<td>删除光标所在的一个字符, 光标还在当行</td>
</tr>
<tr>
<td>S</td>
<td>删除光标所在的一行，光标还在当行，不同于dd</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>ctrl+r</td>
<td>恢复上一步操作</td>
</tr>
<tr>
<td>.</td>
<td>重复最后一个命令</td>
</tr>
<tr>
<td>~</td>
<td>变换为大写</td>
</tr>
<tr>
<td>[N]&gt;&gt;</td>
<td>一行或N行往右移动一个tab</td>
</tr>
<tr>
<td>[N]&lt;&lt;</td>
<td>一行或N行往左移动一个tab</td>
</tr>
</tbody>
</table>
<h3 id="关闭-Exiting"><a href="#关闭-Exiting" class="headerlink" title="关闭(Exiting)"></a>关闭(Exiting)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>:w</td>
<td>保存</td>
</tr>
<tr>
<td>:wq, :x</td>
<td>保存并关闭</td>
</tr>
<tr>
<td>:q</td>
<td>关闭（已保存）</td>
</tr>
<tr>
<td>:q!</td>
<td>强制关闭</td>
</tr>
</tbody>
</table>
<h3 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索(Search)"></a>搜索(Search)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>/pattern</td>
<td>搜索（非插入模式)</td>
</tr>
<tr>
<td>?pattern</td>
<td>往后搜索</td>
</tr>
<tr>
<td>n</td>
<td>光标到达搜索结果的前一个目标</td>
</tr>
<tr>
<td>N</td>
<td>光标到达搜索结果的后一个目标</td>
</tr>
</tbody>
</table>
<h3 id="视觉模式-Visual-Mode"><a href="#视觉模式-Visual-Mode" class="headerlink" title="视觉模式(Visual Mode)"></a>视觉模式(Visual Mode)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>选中一个或多个字符</td>
</tr>
<tr>
<td>V</td>
<td>选中一行</td>
</tr>
</tbody>
</table>
<h3 id="剪切和复制-Cut-and-Paste"><a href="#剪切和复制-Cut-and-Paste" class="headerlink" title="剪切和复制(Cut and Paste)"></a>剪切和复制(Cut and Paste)</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>dd</td>
<td>删除一行</td>
</tr>
<tr>
<td>dw</td>
<td>删除一个单词</td>
</tr>
<tr>
<td>x</td>
<td>删除后一个字符</td>
</tr>
<tr>
<td>X</td>
<td>删除前一个字符</td>
</tr>
<tr>
<td>D</td>
<td>删除一行最后一个字符</td>
</tr>
<tr>
<td>[N]yy</td>
<td>复制一行或者N行</td>
</tr>
<tr>
<td>yw</td>
<td>复制一个单词</td>
</tr>
<tr>
<td>p</td>
<td>粘贴</td>
</tr>
</tbody>
</table>
<h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td>:split</td>
<td>水平方向分割出一个窗口</td>
</tr>
<tr>
<td>:vsplit</td>
<td>垂直方向分割出一个窗口</td>
</tr>
<tr>
<td>:close</td>
<td>关闭窗口</td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>切换窗口, h到左边窗口，j到下方窗口，k到上方窗口，l到右边窗口</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python元类到底是什么]]></title>
      <url>http://blublu.xyz/programming/python%E5%85%83%E7%B1%BB%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>最近趁着有点时间，就打算把python重拾一下，以前虽然了解了python的大概语法，但并没有拿来当作主力语言.为了不让它在脑子里荒废，决定重新学一下python的各种用法.老话说得好，温故而知新.果然再过一段时间重新读一遍python的语法以及相关用法,和以前的感觉完全不同了.如果以前是似懂非懂的话，现在应该是半知半解的状态了！（(<em>^__^</em>) 好像没什么区别）Python确实在很大意义上方便了我们的编程，解放了双手。特别是从Java变换过来，所以这也是为什么那么多人感叹“人生苦短，我用Python！”</p>
<p>在读到Python元类的时候，刚开始看到下面这段代码的我是一脸懵逼的.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object, type)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type, object)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object(), type)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>wtf？type和object互为子类？深受静态语言洗脑的我完全无法接受这样的现实.然后就开始了啃书啃知识的阶段了…各种搜寻它们俩到底是个什么关系？</p>
<p>最后打破世界观的观点来了.type和object就好比蛋鸡关系那样，它们是一个共生关系，并不能说先有谁后有谁，需要同时存在.object的类型是type，也就是说object类是type类的实例对象，它们之间的关系就是实例关系.说起来有点拗口，不嫌烦的话再啰嗦一句，object类是type的实例化对象.</p>
<p>首先，要缕清这个关系，还是需要舍弃掉之前静态语言所带来的概念，重新构造我们的世界观.在python里，一切都是对象，这个一切比号称完全面向对象的java还要完全.<strong> 包括class、type、object等等都是对象 </strong>.</p>
<blockquote>
<p>“鸡・蛋”问题通常都是通过一种叫“自举”（bootstrap）的过程来解决的。其实“鸡蛋问题”的根本矛盾就在于假定了“鸡”或“蛋”的其中一个要先进入“完全可用”的状态。而许多现实中被简化为“鸡蛋问题”的情况实际可以在“混沌”中把“鸡”和“蛋”都初始化好，而不存在先后问题；在它们初始化的过程中，两者都不处于“完全可用”状态，而完成初始化后它们就同时都进入了可用状态。</p>
<p>打个比方，番茄炒蛋。并不是要先把番茄完全炒好，然后把鸡蛋完全炒好，然后把它们混起来；而是先炒番茄炒到半熟，再炒鸡蛋炒到半熟，然后把两个半熟的部分混在一起同时炒熟。<br><a id="more"></a></p>
</blockquote>
<p>对象之间需要联系在一起，靠什么？靠的就是关系，在python中，对象之间有两种关系：</p>
<ul>
<li>继承关系</li>
<li>实例关系</li>
</ul>
<p>首先说说继承关系，这个应该不会很陌生，引用知乎上的一段解析：</p>
<blockquote>
<p>比如有class A和class B(A)，再强调一下，A和B都是对象，则对象B继承了对象A，或者说A是B的超类，继承关系可以通过<strong>base</strong>属性得知，如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>B.__base__</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">A</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>在python里，所有对象（包括type）均继承自object，而object则是继承体系的根，上面再无对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>object.__base__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type.__base__</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
<p>接着在说说实例关系，比如有class A， a = A()，不嫌烦的再强调一下，a和A都是对象，则对象a是对象A的实例，或者说对象A是对象a的类型.如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.__class__</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">A</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>在python里，对象又可以分为三种：type object、class object和non-class object。<br><strong> non-class object指通过实例化class object得来的对象 </strong><br>就如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">l=Mylist()</div></pre></td></tr></table></figure>
<p>三者的区别和联系在于：<br>type object都是type的实例，<br>class object是type object的实例，<br>non-class object是class object的实例，<br>type object和class object都可以进行实例化，<br>而non-class object不能进行实例化</p>
<p>最后借用一下在某blog里看到的图，不记得是在哪看到的了..没法引用地址，请原谅.<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/ca54cfa2cc510d2dcc40e3cc7fb2e051_b.png" alt=""></p>
<p>第一列，元类列，type是所有元类的父亲。我们可以通过继承type来创建元类。</p>
<p>第二列，TypeObject列，也称类列，object是所有类的父亲，大部份我们直接使用的数据类型都存在这个列的。</p>
<p>第三列，实例列，实例是对象关系链的末端，不能再被子类化和实例化。</p>
<p>如果type和object只保留一个，那么一定是object。只有object 时，第一列将不复存在，只剩下二三列，第二列表示类型，第三列表示实例，这个和大部分静态语言的类型架构类似，如java 。<br>这样的架构将让python 失去一种很重要的动态特性–动态创建类型。本来，类(第二列的同学)在Python里面是一个对象(typeobject)，对象是可以在运行时动态修改的，所以我们能在你定义一个类之后去修改他的行为或属性！拿掉第一列后，第二列变成了纯类型，写成怎样的，运行时行为就怎样。在这一点上，并不比静态语言有优势。</p>
<p><strong> “鸡蛋问题”在于：Python里的所有类型都确实用一个type object表示，而所有类型都是object类的子类。<br>换句话说，<type 'type'="">类是<type 'object'="">的子类；而<type 'object'="">既是类又是个对象，是<type 'type'="">的实例。<br>这些核心类型的type对象在CPython里的C层面的类型是PyTypeObject，其结构是确定的；它们的存储空间通过静态变量分配，例如<type 'type'="">就声明为在object.h的PyTypeObject PyType_Type，对应的还有<type 'object'="">的PyTypeObject PyBaseObject_Type。<br>所以在进行初始化动作之前它们的存储空间就已经有着落了，真正做初始化时只要把它们的相互引用串起来就好. </type></type></type></type></type></type></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中常见的坑]]></title>
      <url>http://blublu.xyz/programming/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="把数组转成ArrayList"><a href="#把数组转成ArrayList" class="headerlink" title="把数组转成ArrayList"></a>把数组转成ArrayList</h3><p>为了将数组转换为ArrayList，我们经常会这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(arr);</div></pre></td></tr></table></figure>
<p>使用<code>Arrays.asList()</code>方法可以得到一个<code>ArrayList</code>，但是得到这个<code>ArrayList</code>其实是定义在<code>Arrays</code>类中的一个私有的静态内部类。这个类虽然和<code>java.util.ArrayList</code>同名，但是并不是同一个类。我就曾经被深深地坑过…<code>java.util.Arrays.ArrayList</code>类中实现了<code>set()</code>, <code>get()</code>, <code>contains()</code>等方法，但是并没有定义向其中增加元素的方法。也就是说通过<code>Arrays.asList()</code>得到的<code>ArrayList</code>的大小是固定的。</p>
<p>如果在开发过程中，想得到一个真正的<code>ArrayList</code>对象（java.util.ArrayList的实例），可以通过以下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));</div></pre></td></tr></table></figure>
<p>java.util.ArrayList中包含一个可以接受集合类型参数的构造函数。因为java.util.Arrays.ArrayList这个内部类继承了AbstractList类，所以，该类也是Collection的子类。<br><a id="more"></a></p>
<h3 id="判断一个数组是否包含某个值"><a href="#判断一个数组是否包含某个值" class="headerlink" title="判断一个数组是否包含某个值"></a>判断一个数组是否包含某个值</h3><p>在判断一个数组中是否包含某个值的时候，我们经常这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</div><div class="line">    <span class="keyword">return</span> set.contains(targetValue);</div></pre></td></tr></table></figure>
<p>以上方式虽然可以实现功能，但是效率却比较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。</p>
<p>在判断一个数组是否包含某个值的时候，推荐使用for循环遍历的形式或者使用Apache Commons类库中提供的ArrayUtils类的contains方法。</p>
<h3 id="在循环中删除列表中的元素"><a href="#在循环中删除列表中的元素" class="headerlink" title="在循环中删除列表中的元素"></a>在循环中删除列表中的元素</h3><p>在讨论这个问题之前，先考虑以下代码的输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</div><div class="line">list.remove(i);</div><div class="line">&#125;</div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[b,d]</div></pre></td></tr></table></figure>
<p>以上代码的目的是想遍历删除list中所有元素，但是结果却没有成功。原因是忽略了一个关键的问题：当一个元素被删除时，列表的大小缩小并且下标也会随之变化，所以当你想要在一个循环中用下标删除多个元素的时候，它并不会正常的生效。</p>
<p>也有些人知道以上代码的问题就由于数组下标变换引起的。所以，他们想到使用增强for循环的形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>));</div><div class="line"><span class="keyword">for</span>(String s:list)&#123;</div><div class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"a"</span>))&#123;</div><div class="line">        list.remove(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，很不幸的是，以上代码会抛出<code>ConcurrentModificationException</code>，有趣的是，如果在remove操作后增加一个break，代码就不会报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>));</div><div class="line"><span class="keyword">for</span>(String s:list)&#123;</div><div class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"a"</span>))&#123;</div><div class="line">        list.remove(s);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>迭代器（Iterator）是工作在一个独立的线程中，并且拥有一个 mutex 锁。 迭代器被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 迭代器会马上抛出java.util.ConcurrentModificationException 异常。</p>
</blockquote>
<p>所以，正确的在遍历过程中删除元素的方法应该是使用Iterator：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</div><div class="line">Iterator&lt;String&gt; iter = list.iterator();</div><div class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">    String s = iter.next();</div><div class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</div><div class="line">        iter.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>next()方法必须在调用remove()方法之前调用。如果在循环过程中先调用remove()，再调用next()，就会导致异常ConcurrentModificationException。原因如上。</p>
<h3 id="HashTable-和-HashMap-的选择"><a href="#HashTable-和-HashMap-的选择" class="headerlink" title="HashTable 和 HashMap 的选择"></a>HashTable 和 HashMap 的选择</h3><p>了解算法的人可能对HashTable比较熟悉，因为他是一个数据结构的名字。但在Java里边，用HashMap来表示这样的数据结构。Hashtable和 HashMap的一个关键性的不同是，HashTable是同步的，而HashMap不是。所以通常不需要HashTable，HashMap用的更多。</p>
<h3 id="使用原始集合类型"><a href="#使用原始集合类型" class="headerlink" title="使用原始集合类型"></a>使用原始集合类型</h3><p>在Java里边，原始类型和无界通配符类型很容易混合在一起。以Set为例，<code>Set</code>是一个原始类型，而<code>Set&lt; ? &gt;</code>是一个无界通配符类型。 （可以把原始类型理解为没有使用泛型约束的类型）</p>
<p>考虑下面使用原始类型List作为参数的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span></span>&#123;</div><div class="line">    list.add(o);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    add(list, <span class="number">10</span>);</div><div class="line">    String s = list.get(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码将会抛出异常：</p>
<p><code>java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</code></p>
<p>使用原始集合类型是很危险的，因为原始集合类型跳过了泛型类型检查，是不安全的。<code>Set</code>、<code>Set&lt; ? &gt;</code>和<code>Set&lt; Object &gt;</code>之间有很大差别。</p>
<h3 id="访问级别"><a href="#访问级别" class="headerlink" title="访问级别"></a>访问级别</h3><p>程序员们经常使用public作为类中的字段的修饰符，因为这样可以很简单的通过引用得到值，但这并不是好的设计，按照经验，分配给成员变量的访问级别应该尽可能的低。参考Java中的四种访问级别</p>
<h3 id="ArrayList与LinkedList的选择"><a href="#ArrayList与LinkedList的选择" class="headerlink" title="ArrayList与LinkedList的选择"></a>ArrayList与LinkedList的选择</h3><p>当程序员们不知道<code>ArrayList</code>与<code>LinkedList</code>的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之前有巨大的性能差别。简而言之，如果有大量的增加删除操作并且没有很多的随机访问元素的操作，应该首先<code>LinkedList</code>。（<code>LinkedList</code>更适合从中间插入或者删除（链表的特性））</p>
<h3 id="可变与不可变"><a href="#可变与不可变" class="headerlink" title="可变与不可变"></a>可变与不可变</h3><p>不可变对象有许多的优点，比如简单，安全等等。同时，也有人提出疑问：既然不可变有这么多好处，为什么不把所有类都搞成不可变的呢？</p>
<p>通常情况下，可变对象可以用来避免产生过多的中间对象。一个经典的实例就是连接大量的字符串，如果使用不可变的字符串，将会产生大量的需要进行垃圾回收的对象。这会浪费CPU大量的时间，使用可变对象才是正确的方案(比如StringBuilder)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String result=<span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(String s: arr)&#123;</div><div class="line">    result = result + s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="external">StackOverflow</a>中也有关于这个的讨论。</p>
<h3 id="父类和子类的构造函数"><a href="#父类和子类的构造函数" class="headerlink" title="父类和子类的构造函数"></a>父类和子类的构造函数</h3><p>上图的代码中有两处编译时错误，原因其实很简单，主要和构造函数有关。首先，我们都知道：</p>
<p>如果一个类没有定义构造函数，编译器将会插入一个无参数的默认构造函数。</p>
<p>如果一个类中定义了一个带参数的构造函数，那么编译器就不会再帮我们创建无参的构造函数。</p>
<p>上面的Super类中定义了一个带参数的构造函数。编译器将不会插入默认的无参数构造函数。</p>
<p>我们还应该知道：</p>
<p>子类的所有构造函数（无论是有参还是无参）在执行时，都会调用父类的无参构造函数。</p>
<p>所以，编译器试图调用Super类中的无参构造函数。但是父类默认的构造函数未定义，编译器就会报出这个错误信息。</p>
<p>要解决这个问题，可以简单的通过</p>
<ol>
<li>在父类中添加一个Super()构造方法，就像这样：</li>
</ol>
<p><code>public Super(){}</code></p>
<ol>
<li><p>移除自定义的父类构造函数</p>
</li>
<li><p>在子类的构造函数中调用父类的super(value)。</p>
</li>
</ol>
<h3 id="””还是构造函数"><a href="#””还是构造函数" class="headerlink" title="””还是构造函数"></a>””还是构造函数</h3><p>关于这个问题，也是经常容易出现困惑的地方。</p>
<p>其实，如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。</p>
<p>在String d = new String(“abcd”)时，因为字面值“abcd”已经是字符串类型，那么使用构造函数方式只会创建一个额外没有用处的对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cookie、session、OAuth token的异同之处]]></title>
      <url>http://blublu.xyz/security/Cookie%E3%80%81session%E3%80%81OAuth%20token%E7%9A%84%E5%BC%82%E5%90%8C%E4%B9%8B%E5%A4%84/</url>
      <content type="html"><![CDATA[<p>今天朋友在开发网站后台的时候遇到验证这方面的问题，然后一直很困惑Cookie与session的区别，还有OAuth token.我把我的想法和他解释半天他还是似懂非懂。顺便就在此记录一下cookie与session的区别.如果有错误，欢迎批评指正。</p>
<h3 id="Cookie和Session到底是什么？？？"><a href="#Cookie和Session到底是什么？？？" class="headerlink" title="Cookie和Session到底是什么？？？"></a>Cookie和Session到底是什么？？？</h3><p><strong> 因为Http协议是一种无状态协议，一请求一返回就完成了一次事务操作。这样做的的好处就是能够减轻服务器的压力，避免不必要的长连接,占用资源。但是弊端也是显而易见的，没有办法保持上一个会话状态，就比如最简单的购物车，下一次请求后无法知晓上一步的具体选择。虽然Http1.1加入了长连接，但是keep-alive是连接层上的事情，对于应用层来说并没有改变无状态的本质。http2.0那就另说了。（默认的http1.1 keep-alive的时间是300s，增加长连接是为了减少不必要的连接-断开-连接这样的操作）。</strong></p>
<p>回到正题：</p>
<ol>
<li>Cookie是保存在本地的为了保存会话状态的一种机制，服务器生成，保存在本地，当然了，保存的信息由服务器决定，可能是账号密码，这些都由服务器开发者来进行抉择。不过Cookie一般不会拿来存储很重要的信息，当然了，即使是密码，也肯定是经过签名了的。<a id="more"></a></li>
<li>正是由于http请求是无状态的，每次访问服务端是不知道是否是登录用户，所以人们很自然的想到在http请求报文中加入登录标识就可以了，这个登录标识就可以是cookie，这样的cookie服务端要保存有所有登录用户的cookie，这样请求报文来了之后拿到登录标识cookie，在服务端进行比较久可以了。再比如购物网站，多次点击添加商品到购物车客户端很容易知道哪些物品在购物车中，但是服务端怎么知道每次添加的物品放到哪个登录用户的购物车中呢？也需要请求报文中带着cookie才行（在不登陆的情况下京东也是可以不断添加商品的，推测应该是登录的时候一并创建cookie并且发送物品信息），这些cookie都是为了跟踪会话用的，所以客户端有，服务端也有，并且服务端有全部的会话cookie。</li>
<li>Session也是为了保存和服务器之间的会话状态而产生的一种机制，因为cookie是存在客户端的，所以还是有泄露的风险，而session则是后来为了安全衍生出来的技术。session把数据保存在服务器上，把一个相对应的sid(SessionId)发送给客户端，客户端用sid来读取存储在服务器上的信息。由此也可以看到，sid是需要保存的，所以session机制有时会需要借助于Cookie的机制来达到保存sid的目的。但除此之外我们还可以有别的选择。因为Cookie是可以人为关闭的，为了能够在cookie被关闭的情况下还能把sid发送回服务器，经常使用的就是URL重写，把sid直接加在URL路径后面。还可以使用表单隐藏字段等等，这些不在我们今天讨论的范围。</li>
<li>以上所说的session是session的实现方法，而本质上来说session是一个抽象的概念，开发者为了实现终端和继续等待等操作，将 user agent 和 server 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 session 的概念。而我们今天常说的 “session”，是为了绕开 cookie 的各种限制，通常借助 cookie 本身和后端存储实现的，一种更高级的会话状态实现。</li>
<li>通常我们一般常用的选择是用Cookie来存储sid和一些不重要的信息，像账号密码这些隐私信息就会保存在服务器的长久session中，通过sid来读取从而进行验证。到这里似乎问题就来了，那岂不是获取到sid就可以仿照拥有者进行登录，对服务器进行欺骗了？事实上，是这样的，当sid泄露之后就相当于任何拿到sid的人都可以成为你，对服务器上属于你的资源与信息都拥有完全的访问权限。</li>
<li>在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放Session。</li>
</ol>
<p><strong> 综上所述，可以知道cookie和session本质上就是一回事，区别就在于在于一个对客户端可见一个不可见。</strong></p>
<p><strong> 当然，最重要的一点，session和cookie都是可以设置时间期限的，超过相应的期限就无法再使用了，具体的信息可自行搜索查阅，在这里就不在阐述了</strong></p>
<h3 id="那么有什么办法能够减轻甚至防止这样的情况发生呢？"><a href="#那么有什么办法能够减轻甚至防止这样的情况发生呢？" class="headerlink" title="那么有什么办法能够减轻甚至防止这样的情况发生呢？"></a>那么有什么办法能够减轻甚至防止这样的情况发生呢？</h3><ol>
<li>通过SSL，传输内容被建立连接时的随机公钥对加密，偷窃者极难分析了解包中的内容，更不可能伪装客户端来进行会话。正规的网站在登录阶段都是HTTPS传输的，银行官方网银/淘宝 。</li>
<li>在敏感/关键的步骤之前增加校验步骤。例如，在交易页面之前增加一个安全问题页面，如‘自己最喜欢的食物’ 之类的，即使被恶意窃取或模仿，提高关键交易/步骤的安全性。工商银行的网上支付就有类似机制。 </li>
<li>服务器端时常变化sessionid, sesisonid被窃取后，很可能是一个过时的sessionid。例如每次客户端请求都会拿到新的sessionid，老的sessionid作废，这样极大的降低sessionid被偷窃进行session欺骗的机会。</li>
</ol>
<h3 id="现在来说说浏览器上保存密码和cookie保存密码的区别"><a href="#现在来说说浏览器上保存密码和cookie保存密码的区别" class="headerlink" title="现在来说说浏览器上保存密码和cookie保存密码的区别"></a>现在来说说浏览器上保存密码和cookie保存密码的区别</h3><ul>
<li>当我们登录网站时勾选保存用户名和密码或者保持登录状态XXX天的时候，一般保存的都是cookie，将用户名和密码的cookie保存到硬盘中或者服务器session中，这样再次登录的时候浏览器直接将cookie（如果是存储在服务器session中则是发送cookie中的sid）发送到服务端验证。</li>
<li>浏览器也有一套保存账号密码的方案，不过这个和cookie无关，每个浏览器都可以有自己的加密解密方式，把相应的账号密码加密后存储起来，当需要的时候解密然后置入登录框。如果浏览器保存了账号密码，即使cookie过期了，弹出登录页面，这时输入框就会显示你曾经保存的用户名和密码。如果cookie没有过期，会直接调转到后台，无需登录。这是两种方式，要注意区分。</li>
</ul>
<h3 id="那么OAuth-token又是什么呢？"><a href="#那么OAuth-token又是什么呢？" class="headerlink" title="那么OAuth token又是什么呢？"></a>那么OAuth token又是什么呢？</h3><p>token简单来说就是一个授权码，你可以对一个账号的操作权限进行分级，当第三方客户端需要访问你在服务器上的资源时，而你又不想把你的账号密码告诉它，那么最好的方式就是对其进行授权。OAuth提供的是<strong> 认证</strong> 和 <strong> 授权</strong> ，认证是针对用户，授权是针对App 。其目的是让 某App 有权利访问 某用户 的信息。这里的Token是唯一的。不可以转移到其它App上，也不可以转到其它用户上。</p>
<p>事实上“用户登录系统”可以是由Auth + Session组成的。Auth系统在Auth过程之后就完成操作了，剩下的继续由“用户登录系统”交给Session或者Token来实现用户绑定。实际上TokenID也可以看做SessionID，但是这完全取决于你如何实现你的系统。它们其实完全是两个相同的概念，都是认证完毕之后得到的<code>令牌</code>。</p>
<p>看到这好像大家觉得又绕回来了，token也可以当作sessionId是什么意思？原因其实就在于，sessionId就是我们经过了认证之后获得的一个能够证明我们身份的唯一标志码。那么如果我们把一个登录系统分成认证和维护状态两个模块来看的话，token其实就是sessionId。如果你把一个登录系统看成一个模块，那么session就是cookie的服务器版。</p>
<p>总之，在我看来 <strong> 一切维护用户状态的技术都是session，一切动态生成的服务端有能力鉴别真假而本身无涵义的字符串都是token。</strong></p>
<p>关于OAuth2.0的认证方式以及流程，在阮一峰的博客里写得很好，推荐大家看看。<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">理解OAuth 2.0</a></p>
<h5 id="可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？"><a href="#可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？" class="headerlink" title="可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？"></a>可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？</h5>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符编码--UTF-8与Unicode]]></title>
      <url>http://blublu.xyz/knowledge/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%9A%84%E6%98%8E%E5%9D%91%E4%B8%8E%E6%9A%97%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>自从上个学期简单地了解了字符编码之后就一直没有再过多的理会它。对字符编码这一块总是似懂非懂，今天突然就想把它彻底地了解一遍，不想再有这种疑惑的感觉。重新理顺了一遍字符编码之间的关系，以及utf-8、utf-16以及utf-32和Unicode之间的那些千丝万缕的关系。</p>
<h3 id="首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。"><a href="#首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。" class="headerlink" title="首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。"></a>首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。</h3><h2 id="首先我们来看看关于Unicode的介绍"><a href="#首先我们来看看关于Unicode的介绍" class="headerlink" title="首先我们来看看关于Unicode的介绍"></a>首先我们来看看关于Unicode的介绍</h2><blockquote>
<p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。<br>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。<br>Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询<a href="http://unicode.org" target="_blank" rel="external">Unicode官网</a>，或者专门的汉字对应表。<br><a id="more"></a><br>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。Unicode 用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。码位就是可以分配给字符的数字。UTF-8、 UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</p>
<p>Unicode字符集可以简写为UCS（Unicode Character Set）。早期的Unicode标准有UCS-2、UCS-4的说法。UCS-2用两个字节编码，UCS-4用4个字节编码。UCS-4根据最高位为0的 最高字节分成2^7=128个group。每个group再根据次高字节分为256个平面（plane）。每个平面根据第3个字节分为256行 （row），每行有256个码位（cell）。group 0的平面0被称作BMP（Basic Multilingual Plane）。将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。<br>每个平面有2^16=65536个码位。Unicode计划使用了17个平面，一共有 17*65536=1114112个码位。在Unicode 5.0.0版本中，已定义的码位只有238605个，分布在平面0、平面1、平面2、平面14、平面15、平面16。其中平面15和平面16上只是定义了 两个各占65534个码位的专用区（Private Use Area），分别是0xF0000-0xFFFFD和0x100000-0x10FFFD。所谓专用区，就是保留给大家放自定义字符的区域，可以简写为 PUA。</p>
<p>平面0也有一个专用区：0xE000-0xF8FF，有6400个码位。平面0的 0xD800-0xDFFF，共2048个码位，是一个被称作代理区（Surrogate）的特殊区域。代理区的目的用两个UTF-16字符表示BMP以 外的字符。在介绍UTF-16编码时会介绍。<br>如前所述在Unicode 5.0.0版本中，238605-65534*2-6400-2408=99089。余下的99089个已定义码位分布在平面0、平面1、平面2和平面 14上，它们对应着Unicode目前定义的99089个字符，其中包括71226个汉字。平面0、平面1、平面2和平面14上分别定义了52080、 3419、43253和337个字符。平面2的43253个字符都是汉字。平面0上定义了27973个汉字。</p>
</blockquote>
<h2 id="那么，问题来了。utf-8与Unicode之间有什么联系呢？"><a href="#那么，问题来了。utf-8与Unicode之间有什么联系呢？" class="headerlink" title="那么，问题来了。utf-8与Unicode之间有什么联系呢？"></a>那么，问题来了。utf-8与Unicode之间有什么联系呢？</h2><p>Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。 </p>
<p>比如，汉字“严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。 </p>
<p>这里就有两个严重的问题，第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。 </p>
<p>它们造成的结果是：</p>
<ul>
<li>出现了unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。</li>
<li>unicode在很长一段时间内无法推广，直到互联网的出现。 </li>
</ul>
<p>接着说一下普遍的认为Unicode是2个字节的问题，其实我觉得这是第一代程序员的一种误读吧。因为java虚拟机采用UCS2（通用字符集)标准即UTF-16保存字符，所有的字符在内存中都是2个字节，这样虚拟机处理字符串的截取、长度和判断都非常容易。其他语言如PHP、Python也是，在运行时采用固定长度存储字符。包括windows也都是使用utf-16标准来保存字符。<strong> 但在微软资料中将其错误称为unicode </strong> 所以有了现在的一个Unicode字符占两个字节的错误说法，其实他们本质上说的就是UTF-16。<br>当然，因为UTF-16相当浪费空间，相对应编译后的class，java规定采用UTF-8保存，因为大部分是英文字符，只有一个字节，可以大量节省存储空间。</p>
<blockquote>
<p>说完一些它们之间屡不清的关系，接下来来看看它们的本质究竟是什么</p>
</blockquote>
<h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>   UTF-16比较好理解,就是任何字符对应的数字都用两个字节来保存.我们通常对Unicode的误解就是把Unicode与UTF-16等同了.但是很显然如果都是英文字母这做有点浪费.明明用一个字节能表示一个字符为啥整两个啊.</p>
<p>   于是又有个UTF-8,这里的8非常容易误导人,8不是指一个字节,难道一个字节表示一个字符?实际上不是.当用UTF-8时表示一个字符是可变的,有可能是用一个字节表示一个字符,也可能是两个,三个.当然最多不能超过3个字节了.反正是根据字符对应的数字大小来确定.</p>
<p>   于是UTF-8和UTF-16的优劣很容易就看出来了.如果全部英文或英文与其他文字混合,但英文占绝大部分,用UTF-8就比UTF-16节省了很多空间.而如果全部是中文这样类似的字符或者混合字符中中文占绝大多数.UTF-16就占优势了,可以节省很多空间.</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。 </p>
<p><strong> UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 </strong></p>
<p>UTF-8的编码规则很简单，只有二条： </p>
<ul>
<li>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 </li>
<li>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li>
</ul>
<p>其以字节为单位对Unicode进行编码。从Unicode到UTF-8的编码方式如 下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Unicode编码(16进制)</th>
<th style="text-align:left">UTF-8 字节流(二进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">000000 - 00007F</td>
<td style="text-align:left">0xxxxxxx</td>
</tr>
<tr>
<td style="text-align:left">000080 - 0007FF</td>
<td style="text-align:left">110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:left">000800 - 00FFFF</td>
<td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td style="text-align:left">010000 - 10FFFF</td>
<td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>假如中文字”汉”对应的unicode是6C49(这是用十六进制表示,用十进制表示是27721为啥不用十进制表示呢?很明显用十六进制表示要短点.其实都是等价的没啥不一样.就跟你说60分钟和1小时一样.).你可能会问当用程序打开一个文件时我们怎么知道那是用的UTF-8还是UTF-16啊.自然会有点啥标志,在文件的开头几个字节就是标志.</p>
<ul>
<li>EF BB BF 表示UTF-8</li>
<li>FE FF 表示UTF-16.</li>
</ul>
<h4 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h4><p>前面说的都是unicode的第一个版本.但65536显然不算太多的数字,用它来表示常用的字符是没一点问题.足够了,但如果加上很多特殊的就也不够了.于是从1996年开始又来了第二个版本.用四个字节表示所有字符.这样就出现了UTF-8,UTF16,UTF-32.原理和之前肯定是完全一样的,UTF-32就是把所有的字符都用32bit也就是4个字节来表示.然后UTF-8,UTF-16就视情况而定了.UTF-8可以选择1至8个字节中的任一个来表示.而UTF-16只能是选两字节或四字节..由于unicode版本2的原理完全是一样的,就不多说了.</p>
<p>前面说了要知道具体是哪种编码方式,需要判断文本开头的标志,下面是所有编码对应的开头标志</p>
<table>
<thead>
<tr>
<th style="text-align:left">标志</th>
<th style="text-align:left">编码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">EF BB BF</td>
<td style="text-align:left">UTF-8</td>
</tr>
<tr>
<td style="text-align:left">FE FF</td>
<td style="text-align:left">UTF-16/UCS-2, little endian</td>
</tr>
<tr>
<td style="text-align:left">FF FE</td>
<td style="text-align:left">UTF-16/UCS-2, big endian</td>
</tr>
<tr>
<td style="text-align:left">FF FE 00 00</td>
<td style="text-align:left">UTF-32/UCS-4, little endian.</td>
</tr>
<tr>
<td style="text-align:left">00 00 FE FF</td>
<td style="text-align:left">UTF-32/UCS-4, big-endian.</td>
</tr>
</tbody>
</table>
<p>UCS就是前面说的ISO制定的标准,和Unicode是完全一样的,只不过名字不一样.ucs-2对应utf-16,ucs-4对应UTF-32.UTF-8是没有对应的UCS</p>
<p><strong> 总之说到底，Unicode是一种字符与数字间的映射关系，而utf-8等不同的编码则是其在计算机上的实现方式而已。 </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[密码加密——计时攻击]]></title>
      <url>http://blublu.xyz/security/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E2%80%94%E2%80%94%E8%AE%A1%E6%97%B6%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p><strong>今天在扒加密相关的代码的时候发现了一段比较有意思的代码。google后才知道“计时攻击”（Timing Attack）这么个东西的存在，安全方面真心弱鸡啊。看来要补的东西还是很多。</strong></p>
<p>###先贴代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">slowEquals</span><span class="params">(<span class="keyword">byte</span>[] a, <span class="keyword">byte</span>[] b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> diff = a.length ^ b.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length &amp;&amp; i &lt; b.length; i++)</div><div class="line">    diff |= a[i] ^ b[i];</div><div class="line">    <span class="keyword">return</span> diff == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其实刚开始看的时候大多数人肯定第一感觉就是：这就是一个比较字符串啊，有什么稀奇的？？？但是接着看的时候就会发现不一样了，略带一点点蛋疼。。。</p>
<ul>
<li><p>代码中使用了异或运算符“<code>^</code>”（XOR）来比较两个整数是否相等，而不是“<code>==</code>”。当且仅当两位相等时，异或的结果才是0。因为<code>0 XOR 0 = 0</code>, <code>1 XOR 1 = 0</code>, <code>0 XOR 1 = 1</code>, <code>1 XOR 0 = 1</code>。应用到整数中每一位就是说，当且仅当字节两个整数各位都相等，结果才是0。</p>
</li>
<li><p>代码中的第一行，比较a.length和b.length，相同的话diff是0，否则diff非0。然后使用异或比较数组中各字节，并且将结果和diff求或。如果有任何一个字节不相同，diff就会变成非0的值。因为或运算没有“置0”的功能，所以循环结束后diff是0的话只有一种可能，那就是循环前两个数组长度相等<code>（a.length == b.length）</code>，并且数组中每一个字节都相同（每次异或的结果都非0）。<br>我们使用XOR而不是“<code>==</code>”来比较整数的原因是：“<code>==</code>”通常被翻译/编译/解释为带有分支的语句。例如C语言中的“<code>diff &amp;= a == b</code>”可能在x86机器成被编译为如下汇编语言：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MOV EAX, [A]</div><div class="line">CMP [B], EAX</div><div class="line">JZ equal</div><div class="line">JMP done</div><div class="line">equal:</div><div class="line">AND [VALID], 1</div><div class="line">done:</div><div class="line">AND [VALID], 0</div></pre></td></tr></table></figure>
<p>其中的分支导致代码运行的时间不固定，决定于两个整数相等的程度和CPU内部的跳转预测机制（branch prediction）。</p>
<p>而C语言代码“diff |=a ^ b”会被编译为下面的样子，它执行的时间和两个整数是什么样的情况无关。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MOV EAX, [A]</div><div class="line">XOR EAX, [B]</div><div class="line">OR [DIFF], EAX</div></pre></td></tr></table></figure>
<blockquote>
<p>计时攻击，属于旁路攻击的一种, 所谓旁路攻击就是通过对系统的物理学分析和实现方式分析, 而不是密码学分析或暴力破解, 来尝试破解密码学系统的行为.</p>
</blockquote>
<p>当攻击者准备256个字符串，它们的哈希值包第一字节包含了所有的情况。然后用它们去尝试系统登录，记录返回结果所需的时间，耗时最长的那个就是第一字节猜对的那个。虽然是微秒级别，但通过大量数据的采集，是完全可以推测到所有的哈希值的。然后通过离线计算，绕过系统的登录验证次数的限制。</p>
<p>可能乍看之下几乎没有人能做到，但是这个世界就是这么神奇，还真有人做到了，而且已经运到到实际项目中。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java服务端解析http请求（一）]]></title>
      <url>http://blublu.xyz/programming/Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A7%A3%E6%9E%90http%E8%AF%B7%E6%B1%82%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>现在服务端的设计都有许多的框架可以选择，很方便的完成我们的需求。虽然说程序员大多数站在前人的肩膀上，用前人造的轮子来造汽车。何况一些框架已经不仅仅是轮子那么简单了，甚至可以是一辆马上就可以开的跑车。但是直接使用框架和现成工具并不利于我们的学习，从学习的角度来说，我们还是最好能够自己深入了解技术原理并自己实现它。虽然自己写的程序功能可能不及它们强大，但是只要学会了其中的原理，就已经达到了我们的目的。</strong></p>
<p>平时在进行web解析的时候，我们一般都使用tomcat这个庞然大物来对client的请求进行解析，它返回给我们一个完整的HttpRequest对象，其中含有client向我们传输的所需要的各种信息。今天我们就来说说如何模仿tomcat服务器解析程序的雏形，自己写一个http服务器解析程序。</p>
<p><strong>客户端与服务端的通信有三步：</strong><br>1.与服务端进行连接(当然，连接还是用socket来实现的)<br>2.向服务端发出请求<br>3.服务端返回结果</p>
<p><a href="https://zh.wikipedia.org/wiki/超文本传输协议" target="_blank" rel="external">http</a>其实就是一个web交互协议，通过一套完整的协议约束，对于不同的浏览器只要能够解析http协议就可以和服务器进行通信。</p>
<p>我们在设计一个服务端的时候，当连接完成后的第一步就是能够正确解析客户端发出的请求。<br>在原始的时候，没有协议，我们一般都是通过在向服务器发送命令的时候在String前含有几位保留字符，用数字或者其他来标识此条命令，告诉服务器应该使用哪个部分进行解析，但是当程序扩展之后，这种方式难免不利于维护。同时也不利于复用，于是各种通信协议就产生了，在web上用得最多的就是http协议。今天要说的就是http服务器的解析。</p>
<p>在服务端，通过一个客户端线程，获取客户端的输入流就可以得到一个客户端封装好的http请求信息。而一般来说，一些现成的工具（tomcat）已经帮我们自动对这些信息进行解析。如果我们要自己动手造一个解析程序，此时我们获取到的信息首先是一串字节流，通过解码还原成string，但这还远远达不到我们要求，我们需要一个HttpRequest类来存储request中各个部分的信息。所以第一步就是对这串string进行切割解析。</p>
<a id="more"></a>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Kicks off the request's parsing. Called inside constructor.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@throws</span> IOException      When an InputStream can't be retreived from the</div><div class="line"> *                          socket.</div><div class="line"> * <span class="doctag">@throws</span> SocketException  When the client breaks early. This is a browser</div><div class="line"> *                          issue, and not a server issue, but it gets thrown</div><div class="line"> *                          upstream because it can't be dealt with until it</div><div class="line"> *                          gets to the HttpServer.</div><div class="line"> * <span class="doctag">@throws</span> HttpException    When headers aren't in key/value pairs separated</div><div class="line"> *                          by ": ".</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> HttpServer</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SocketException, HttpException </span>&#123;</div><div class="line">    <span class="comment">// Used to read in from the socket</span></div><div class="line">    BufferedReader input = <span class="keyword">new</span> BufferedReader(</div><div class="line">            <span class="keyword">new</span> InputStreamReader(getConnection().getInputStream()));</div><div class="line"></div><div class="line">    StringBuilder requestBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">    <span class="comment">/*  The HTTP spec (Section 4.1) says that a blank first line should be</span></div><div class="line">        ignored, and that the next line SHOULD have the request line. To be</div><div class="line">        extra sure, all initial blank lines are discarded.</div><div class="line">        */</div><div class="line">    String firstLine = input.readLine();</div><div class="line">    <span class="keyword">if</span> (firstLine == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"Input is returning nulls..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (firstLine.isEmpty()) &#123;</div><div class="line">        firstLine = input.readLine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// start with the first non-empty line.</span></div><div class="line">    setRequestLine(firstLine);</div><div class="line">    requestBuilder.append(getRequestLine());</div><div class="line">    requestBuilder.append(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*  Every line after the first, but before an empty line is a header,</span></div><div class="line">        which is a key/value pair.</div><div class="line"></div><div class="line">        The key is before the ": ", the value, after</div><div class="line"></div><div class="line">        <span class="doctag">TODO:</span> parse this to spec. Spec says it's cool to have any number of</div><div class="line">        whitespace characters following the colon, and the values</div><div class="line">        can be spread accross multiple lines provided each following line</div><div class="line">        starts with a whitespace character.</div><div class="line"></div><div class="line">        For more information, see issue 12 and RFC 2616#4.2.</div><div class="line">        Issue 12: https://github.com/dkuntz2/java-httpserver/issues/12</div><div class="line">        RFC 2616#4.2: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2</div><div class="line">        */</div><div class="line">    <span class="keyword">for</span> (String line = input.readLine(); line != <span class="keyword">null</span> &amp;&amp; !line.isEmpty(); line = input.readLine()) &#123;</div><div class="line">        requestBuilder.append(line);</div><div class="line">        requestBuilder.append(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        String[] items = line.split(<span class="string">": "</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (items.length == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"No key value pair in \n\t"</span> + line);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String value = items[<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; items.length; i++) &#123;</div><div class="line">            value += <span class="string">": "</span> + items[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getHeaders().put(items[<span class="number">0</span>], value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*  If the client sent over a POST, PUT, or DELETE request, there's *probably* still data</span></div><div class="line">        in the stream. This reads in only the number of chars specified in the</div><div class="line">        "Content-Length" header.</div><div class="line">        */</div><div class="line">    <span class="keyword">if</span> ((getRequestType().equals(POST_REQUEST_TYPE) || getRequestType().equals(DELETE_REQUEST_TYPE) || getRequestType().equals(PUT_REQUEST_TYPE)) &amp;&amp; getHeaders().containsKey(<span class="string">"Content-Length"</span>)) &#123;</div><div class="line">        <span class="keyword">int</span> contentLength = Integer.parseInt(getHeaders().get(<span class="string">"Content-Length"</span>));</div><div class="line">        StringBuilder b = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contentLength; i++) &#123;</div><div class="line">            b.append((<span class="keyword">char</span>)input.read());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        requestBuilder.append(b.toString());</div><div class="line"></div><div class="line">        requestBody = b.toString();</div><div class="line"></div><div class="line">        String[] data = requestBody.split(<span class="string">"&amp;"</span>);</div><div class="line">        getParams().putAll(parseInputData(data));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setHttpRequest(requestBuilder.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Turns an array of "key=value" strings into a map. &lt;p&gt;</div><div class="line"> *</div><div class="line"> * Any item in the array missing an "=" is given a value of null.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> data  List of strings in "key=value" form, you know, like HTTP GET</div><div class="line"> *              or POST lines?</div><div class="line"> * <span class="doctag">@return</span>  Map of key value pairs</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">parseInputData</span><span class="params">(String[] data)</span> </span>&#123;</div><div class="line">    Map&lt;String, String&gt; out = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">    <span class="keyword">for</span> (String item : data) &#123;</div><div class="line">        <span class="keyword">if</span> (item.indexOf(<span class="string">"="</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            out.put(item, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String value = item.substring(item.indexOf(<span class="string">'='</span>) + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">/*  Attempt to URL decode the value, because it *might* be user input.</span></div><div class="line">            If it can't be decoded, it doesn't matter, the original, undecoded</div><div class="line">            value is still used.</div><div class="line">            */</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            value = URLDecoder.decode(value, <span class="string">"UTF-8"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;&#125;</div><div class="line"></div><div class="line">        out.put(item.substring(<span class="number">0</span>, item.indexOf(<span class="string">'='</span>)), value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>信息如下:</strong></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/index</span> HTTP/1.1</div><div class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36</div><div class="line"><span class="attribute">Host</span>: localhost:10086</div><div class="line"><span class="attribute">Accept</span>: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1</div><div class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,en;q=0.8</div><div class="line"><span class="attribute">Accept-Charset</span>: iso-8859-1, utf-8, utf-16, *;q=0.1</div><div class="line"><span class="attribute">Accept-Encoding</span>: deflate, gzip, x-gzip, identity, *;q=0</div><div class="line"><span class="attribute">Connection</span>: Keep-Alive</div></pre></td></tr></table></figure>
<p>在Tomcat中所有的请求信息我们都已经封装好放入一个HttpRequest对象中；我们自己模仿的解析程序也是如此，将解析后的字符串放入一个HttpRequest对象中，以供后续使用。</p>
<p><strong>HttpRequst类源码如下:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> httpserver;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.SocketException;</div><div class="line"><span class="keyword">import</span> java.net.URLDecoder;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * An HttpRequest takes an incoming connection and parses out all of the</div><div class="line"> * relevant data, supposing the connection follows HTTP protocol.</div><div class="line"> *</div><div class="line"> * At present, HttpRequest only knows how to handle HTTP 1.1 requests, and</div><div class="line"> * doesn't handle persistent connections. Technically, it could handle an</div><div class="line"> * HTTP 1.0 request, because 1.0 doesn't have persistent connections.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span>   &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html"&gt;</div><div class="line"> *        HTTP 1.1 Spec&lt;/a&gt;</div><div class="line"> * <span class="doctag">@see</span> HttpHandler</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="comment">/** HTTP GET request type */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET_REQUEST_TYPE = <span class="string">"GET"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** HTTP POST request type */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST_REQUEST_TYPE = <span class="string">"POST"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** HTTP HEAD request type */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEAD_REQUEST_TYPE = <span class="string">"HEAD"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** HTTP DELETE request type */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELETE_REQUEST_TYPE = <span class="string">"DELETE"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** HTTP PUT request type */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUT_REQUEST_TYPE = <span class="string">"PUT"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// used to determine what one does with the request</span></div><div class="line">    <span class="keyword">private</span> HttpRouter router;</div><div class="line"></div><div class="line">    <span class="comment">// connection with client</span></div><div class="line">    <span class="keyword">private</span> Socket connection;</div><div class="line"></div><div class="line">    <span class="comment">// the handler used to determine what the server actually does</span></div><div class="line">    <span class="comment">// with this request</span></div><div class="line">    <span class="keyword">private</span> HttpHandler handler;</div><div class="line"></div><div class="line">    <span class="comment">// the full text of the incoming request, including headers</span></div><div class="line">    <span class="comment">// and sent over data</span></div><div class="line">    <span class="keyword">private</span> String httpRequest;</div><div class="line"></div><div class="line">    <span class="comment">// the request line, or first line of entire request</span></div><div class="line">    <span class="keyword">private</span> String requestLine;</div><div class="line"></div><div class="line">    <span class="comment">// the type of request, as in GET, POST, ...</span></div><div class="line">    <span class="keyword">private</span> String requestType;</div><div class="line"></div><div class="line">    <span class="comment">// the protocol the client is using</span></div><div class="line">    <span class="keyword">private</span> String requestProtocol;</div><div class="line"></div><div class="line">    <span class="comment">// All headers, because they're all key/value pairs</span></div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// The requested path, split by '/'</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; splitPath = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// The path relative to the handler's path</span></div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line"></div><div class="line">    <span class="comment">// the full path</span></div><div class="line">    <span class="keyword">private</span> String fullPath;</div><div class="line"></div><div class="line">    <span class="comment">// the POST data</span></div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; varargs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String requestBody;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Used to parse out an HTTP request provided a Socket and figure out the</div><div class="line">     * handler to be used.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> connection The socket between the server and client</div><div class="line">     * <span class="doctag">@throws</span> IOException      When it gets thrown by</div><div class="line">     *                          &#123;<span class="doctag">@link</span> HttpRequest#parseRequest&#125;.</div><div class="line">     * <span class="doctag">@throws</span> SocketException  When it gets thrown by</div><div class="line">     *                          &#123;<span class="doctag">@link</span> HttpRequest#parseRequest&#125;.</div><div class="line">     * <span class="doctag">@throws</span> HttpException    When something that doesn't follow HTTP spec</div><div class="line">     *                          occurs.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#parseRequest</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpRequest</span><span class="params">(HttpRouter router, Socket connection)</span> <span class="keyword">throws</span> IOException, SocketException, HttpException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.router = router;</div><div class="line">        connection.setKeepAlive(<span class="keyword">true</span>);</div><div class="line">        setConnection(connection);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getConnection().isClosed()) &#123;</div><div class="line">            System.out.println(<span class="string">"Socket is closed..."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            createResponse().respond();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException | HttpException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> HttpResponse <span class="title">createResponse</span><span class="params">()</span> <span class="keyword">throws</span> IOException, HttpException </span>&#123;</div><div class="line">        parseRequest();</div><div class="line">        HttpResponse response = <span class="keyword">new</span> HttpResponse(<span class="keyword">this</span>);</div><div class="line">        determineHandler().handle(<span class="keyword">this</span>, response);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Kicks off the request's parsing. Called inside constructor.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> IOException      When an InputStream can't be retreived from the</div><div class="line">     *                          socket.</div><div class="line">     * <span class="doctag">@throws</span> SocketException  When the client breaks early. This is a browser</div><div class="line">     *                          issue, and not a server issue, but it gets thrown</div><div class="line">     *                          upstream because it can't be dealt with until it</div><div class="line">     *                          gets to the HttpServer.</div><div class="line">     * <span class="doctag">@throws</span> HttpException    When headers aren't in key/value pairs separated</div><div class="line">     *                          by ": ".</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpServer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SocketException, HttpException </span>&#123;</div><div class="line">        <span class="comment">// Used to read in from the socket</span></div><div class="line">        BufferedReader input = <span class="keyword">new</span> BufferedReader(</div><div class="line">                <span class="keyword">new</span> InputStreamReader(getConnection().getInputStream()));</div><div class="line"></div><div class="line">        StringBuilder requestBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="comment">/*  The HTTP spec (Section 4.1) says that a blank first line should be</span></div><div class="line">            ignored, and that the next line SHOULD have the request line. To be</div><div class="line">            extra sure, all initial blank lines are discarded.</div><div class="line">            */</div><div class="line">        String firstLine = input.readLine();</div><div class="line">        <span class="keyword">if</span> (firstLine == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"Input is returning nulls..."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (firstLine.isEmpty()) &#123;</div><div class="line">            firstLine = input.readLine();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// start with the first non-empty line.</span></div><div class="line">        setRequestLine(firstLine);</div><div class="line">        requestBuilder.append(getRequestLine());</div><div class="line">        requestBuilder.append(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="comment">/*  Every line after the first, but before an empty line is a header,</span></div><div class="line">            which is a key/value pair.</div><div class="line"></div><div class="line">            The key is before the ": ", the value, after</div><div class="line"></div><div class="line">            <span class="doctag">TODO:</span> parse this to spec. Spec says it's cool to have any number of</div><div class="line">            whitespace characters following the colon, and the values</div><div class="line">            can be spread accross multiple lines provided each following line</div><div class="line">            starts with a whitespace character.</div><div class="line"></div><div class="line">            For more information, see issue 12 and RFC 2616#4.2.</div><div class="line">            Issue 12: https://github.com/dkuntz2/java-httpserver/issues/12</div><div class="line">            RFC 2616#4.2: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2</div><div class="line">            */</div><div class="line">        <span class="keyword">for</span> (String line = input.readLine(); line != <span class="keyword">null</span> &amp;&amp; !line.isEmpty(); line = input.readLine()) &#123;</div><div class="line">            requestBuilder.append(line);</div><div class="line">            requestBuilder.append(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">            String[] items = line.split(<span class="string">": "</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (items.length == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"No key value pair in \n\t"</span> + line);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String value = items[<span class="number">1</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; items.length; i++) &#123;</div><div class="line">                value += <span class="string">": "</span> + items[i];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            getHeaders().put(items[<span class="number">0</span>], value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*  If the client sent over a POST, PUT, or DELETE request, there's *probably* still data</span></div><div class="line">            in the stream. This reads in only the number of chars specified in the</div><div class="line">            "Content-Length" header.</div><div class="line">            */</div><div class="line">        <span class="keyword">if</span> ((getRequestType().equals(POST_REQUEST_TYPE) || getRequestType().equals(DELETE_REQUEST_TYPE) || getRequestType().equals(PUT_REQUEST_TYPE)) &amp;&amp; getHeaders().containsKey(<span class="string">"Content-Length"</span>)) &#123;</div><div class="line">            <span class="keyword">int</span> contentLength = Integer.parseInt(getHeaders().get(<span class="string">"Content-Length"</span>));</div><div class="line">            StringBuilder b = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contentLength; i++) &#123;</div><div class="line">                b.append((<span class="keyword">char</span>)input.read());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            requestBuilder.append(b.toString());</div><div class="line"></div><div class="line">            requestBody = b.toString();</div><div class="line"></div><div class="line">            String[] data = requestBody.split(<span class="string">"&amp;"</span>);</div><div class="line">            getParams().putAll(parseInputData(data));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setHttpRequest(requestBuilder.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Turns an array of "key=value" strings into a map. &lt;p&gt;</div><div class="line">     *</div><div class="line">     * Any item in the array missing an "=" is given a value of null.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data  List of strings in "key=value" form, you know, like HTTP GET</div><div class="line">     *              or POST lines?</div><div class="line">     * <span class="doctag">@return</span>  Map of key value pairs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">parseInputData</span><span class="params">(String[] data)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; out = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        <span class="keyword">for</span> (String item : data) &#123;</div><div class="line">            <span class="keyword">if</span> (item.indexOf(<span class="string">"="</span>) == -<span class="number">1</span>) &#123;</div><div class="line">                out.put(item, <span class="keyword">null</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String value = item.substring(item.indexOf(<span class="string">'='</span>) + <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="comment">/*  Attempt to URL decode the value, because it *might* be user input.</span></div><div class="line">                If it can't be decoded, it doesn't matter, the original, undecoded</div><div class="line">                value is still used.</div><div class="line">                */</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                value = URLDecoder.decode(value, <span class="string">"UTF-8"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;&#125;</div><div class="line"></div><div class="line">            out.put(item.substring(<span class="number">0</span>, item.indexOf(<span class="string">'='</span>)), value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> out;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Figure out what kind of HttpHandler you want, based on the path. &lt;p&gt;</div><div class="line">     *</div><div class="line">     * This uses the statically set &#123;<span class="doctag">@link</span> HttpRouter&#125; to determine the</div><div class="line">     * correct HttpHandler to be used for the current request. If there isn't</div><div class="line">     * a statically set HttpRouter, a 500 error is sent back to the</div><div class="line">     * client.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a new instance of some form of HttpHandler.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpRouter</div><div class="line">     * <span class="doctag">@see</span> HttpRouter#determineHandler</div><div class="line">     * <span class="doctag">@see</span> HttpHandler</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> HttpHandler <span class="title">determineHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (router == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DeathHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String path = getSplitPath().isEmpty() ? <span class="string">""</span> : getSplitPath().get(<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> router.route(path, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return if the request type is the passed in type.</div><div class="line">     * <span class="doctag">@param</span> requestTypeCheck The type to check.</div><div class="line">     * <span class="doctag">@return</span> whether the request type equals the passed in String.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isType</span><span class="params">(String requestTypeCheck)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getRequestType().equalsIgnoreCase(requestTypeCheck);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets the requestLine, and all derived items. &lt;p&gt;</div><div class="line">     *</div><div class="line">     * Based off of the passed in line, the request type, request path, and</div><div class="line">     * request protocol can be set.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> line  The first line in an HTTP request. Should be in</div><div class="line">     *              &#123;<span class="doctag">@code</span> [type] [full path] [protocol]&#125; form.</div><div class="line">     * <span class="doctag">@throws</span> HttpException  When the first line does not contain two spaces,</div><div class="line">     *                        signifying that the passed in line is not in</div><div class="line">     *                        HTTP 1.1. When the type is not an expected type</div><div class="line">     *                        (currently GET, POST, and HEAD).</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#setRequestType</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#setFullPath</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#setRequestProtocol</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestLine</span><span class="params">(String line)</span> <span class="keyword">throws</span> HttpException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requestLine = line;</div><div class="line"></div><div class="line">        <span class="comment">/*  Split apart the request line by spaces, as per the protocol.</span></div><div class="line">            The request line should be:</div><div class="line">            [request type] [path] [protocol]</div><div class="line">            */</div><div class="line">        String[] splitty = requestLine.trim().split(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span> (splitty.length != <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"Request line has a number of spaces other than 3."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// Set the request type</span></div><div class="line">        setRequestType(splitty[<span class="number">0</span>].toUpperCase());</div><div class="line"></div><div class="line">        <span class="comment">// set the path</span></div><div class="line">        setFullPath(splitty[<span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="comment">// set the protocol type</span></div><div class="line">        setRequestProtocol(splitty[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the request line.</div><div class="line">     * <span class="doctag">@return</span>  the request line.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestLine</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> requestLine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Set the full path, and path list. &lt;p&gt;</div><div class="line">     *</div><div class="line">     * Because the path list is derived from the full path, it's set at the same</div><div class="line">     * time.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> inPath  The full requested path (in `/path/to/request` form)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#setPath</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#setSplitPath</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFullPath</span><span class="params">(String inPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fullPath = inPath;</div><div class="line">        setPath(inPath);</div><div class="line">        setSplitPath(inPath);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gets the full path of the request.</div><div class="line">     * <span class="doctag">@return</span> The full path.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFullPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fullPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.path = path;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gets the path relative to the handler's path.</div><div class="line">     * <span class="doctag">@return</span> Everything in the path after the handler's path.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Given a full path, set the splitPath to the path, split by `/`. &lt;p&gt;</div><div class="line">     *</div><div class="line">     * If there's a query string attached to the path, it gets removed from the</div><div class="line">     * splitPath, and the request's associated GET data is parsed from the query</div><div class="line">     * string.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> HttpRequest#getGetData</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSplitPath</span><span class="params">(String fullPath)</span> </span>&#123;</div><div class="line">        <span class="comment">/*  Split apart the path for future reference by the handlers</span></div><div class="line">            The split path should be used by handlers to figure out what</div><div class="line">            action should be taken. It's also used to parse out GET request</div><div class="line">            data.</div><div class="line"></div><div class="line">            The first character *should* always be a `/`, and that could cause</div><div class="line">            an error with splitting (as in, the first split could be an empty</div><div class="line">            string, which we don't want).</div><div class="line">            */</div><div class="line">        <span class="keyword">for</span> (String segment : fullPath.substring(<span class="number">1</span>).split(<span class="string">"/"</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (segment.isEmpty()) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            getSplitPath().add(segment);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getSplitPath().isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*  Parse out any GET data in the request URL.</span></div><div class="line">            This could occur on any request.</div><div class="line">            */</div><div class="line">        <span class="keyword">if</span> (getSplitPath().get(getSplitPath().size() - <span class="number">1</span>).indexOf(<span class="string">'?'</span>) != -<span class="number">1</span>) &#123;</div><div class="line">            String lastItem = getSplitPath().get(getSplitPath().size() - <span class="number">1</span>);</div><div class="line">            <span class="comment">// remove the ? onward from the last item in the path, because that's not</span></div><div class="line">            <span class="comment">// part of the requested URL</span></div><div class="line">            getSplitPath().set(getSplitPath().size() - <span class="number">1</span>, lastItem.substring(<span class="number">0</span>,</div><div class="line">                        lastItem.indexOf(<span class="string">'?'</span>)));</div><div class="line"></div><div class="line">            <span class="comment">// split apart the request query into an array of "key=value" strings.</span></div><div class="line">            String[] data = lastItem.substring(lastItem.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>).split(<span class="string">"&amp;"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Set the GET data to the GET data...</span></div><div class="line">            getParams().putAll(parseInputData(data));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSplitPath</span><span class="params">(List&lt;String&gt; path)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.splitPath = path;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gets the path relative to the handler's path split by '/'</div><div class="line">     * <span class="doctag">@return</span> A List of Strings</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSplitPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> splitPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnection</span><span class="params">(Socket connection)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.connection = connection;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> connection;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeaders</span><span class="params">(Map&lt;String, String&gt; headers)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.headers = headers;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> headers;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Map&lt;String, String&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.params = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> params;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeParams</span><span class="params">(Map&lt;String, String&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.params.putAll(data);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParam</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.params.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeVarargs</span><span class="params">(List&lt;String&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.varargs.addAll(data);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getVarargs</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.varargs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttpRequest</span><span class="params">(String httpRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.httpRequest = httpRequest;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHttpRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> httpRequest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestType</span><span class="params">(String requestType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requestType = requestType;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> requestType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestProtocol</span><span class="params">(String requestProtocol)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requestProtocol = requestProtocol;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestProtocol</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> requestProtocol;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(HttpHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> HttpHandler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> handler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRouter</span><span class="params">(HttpRouter router)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.router = router;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> HttpRouter <span class="title">getRouter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> router;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestBody</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> requestBody;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        builder.append(<span class="string">"HttpRequest from "</span>);</div><div class="line">        builder.append(getConnection().getLocalAddress().getHostAddress());</div><div class="line">        builder.append(<span class="string">"\n\t"</span>);</div><div class="line">        builder.append(<span class="string">"Request Line: "</span>);</div><div class="line">        builder.append(getRequestLine());</div><div class="line">        builder.append(<span class="string">"\n\t\t"</span>);</div><div class="line">        builder.append(<span class="string">"Request Type "</span>);</div><div class="line">        builder.append(getRequestType());</div><div class="line">        builder.append(<span class="string">"\n\t\t"</span>);</div><div class="line">        builder.append(<span class="string">"Request Path "</span>);</div><div class="line">        builder.append(getFullPath());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天主要就先说说封装好请求的HttpRequest类，下一节我们将封装进行应答的HttpResponse类</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java与C++的异同]]></title>
      <url>http://blublu.xyz/programming/Java%E4%B8%8EC++%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>C++与Java的区别大致分为三类：</p>
<ul>
<li>Java不支持的C++特性</li>
<li>Java的独特之处</li>
<li>C++和Java都有但是不相同的特性</li>
</ul>
</blockquote>
<h3 id="Java摈弃的C-的内容"><a href="#Java摈弃的C-的内容" class="headerlink" title="Java摈弃的C++的内容"></a>Java摈弃的C++的内容</h3><pre><code>有相当一部分C++的特性Java不再支持。在某些情况下，一个特殊的C++特性和Java的运行环境不想关。另一情况下，Java的设计者摈弃了C++中某些重复的内容。还有就是出于对网络应用运行安全的考虑，Java不再支持某些C++的特点。
Java与C++之间最大的不同就是Java不再支持指针，指针是使C++语言成为世界上功能最强大语言的主要原因。但是对于指针的使用有着一定程序的危险。
Java不支持指针出于以下两个原因：
（1）指针本身就不安全。如，使用C++的状态指针，可以访问程序代码和数据段外的内存地址。一个恶意程序可以利用这个特点破坏系统，完成一次或多次非法的访问（获取你的密码）或是违反安全限制。
（2）即使指针可以被限制在Java的运行系统中（理论上），但是设计者仍然认为它的使用是麻烦的Java中不存在指针，所以也没有-&gt;操作符
</code></pre><a id="more"></a>
<h3 id="细举Java中的“省略”内容："><a href="#细举Java中的“省略”内容：" class="headerlink" title="细举Java中的“省略”内容："></a>细举Java中的“省略”内容：</h3><pre><code>（1）Java不再包含结构或者联合。在可以完全包含它们的类出现之后，这些结构就是多余的
（2）Java不再支持操作符重载。操作符的重载在某些情况下造成类C++程序的含糊不清，它带来的麻烦要远远大于它带来的好处
（3）Java中不再包括预处理，也不再支持预处理命令。预处理在C++语言中已经不如在C中那么重要，Java中就彻底弃用了它
（4）Java不支持自动的类型转换，因为这种类型转换会导致精度的降低。在Java中，如果要将长整型转换为整型的时候，必须显式强制执行类型转换。
（5）在Java中的代码必须封装在一个或多个类中，所以Java中不再包括所谓全局变量或是全局函数的概念。
（6）Java中不再允许默认的参数，在C++中，当过程调用时存在没有对应值的参数的时候可以使用一个预先指定的值，Java中不允许这样的做法。
（7）Java不支持多重继承，不允许一个子类继承多个父类
（8）Java支持构造函数，但不支持析构函数，Java增加了finalize()函数。
（9）Java不支持typedef.
（10）Java中不能声明一个无符号的整数。
（11）Java不再支持goto语句
（12）Java没有delete操作符
（13）Java中的《and》不再重载I/O操作
（14）Java中，对象只能由引用传递，C++中对象可由值或引用传递。
</code></pre><h3 id="Java的新特性："><a href="#Java的新特性：" class="headerlink" title="Java的新特性："></a>Java的新特性：</h3><p>Java的许多特点是C++没有的，比如多线程，包和接口，还有其它许多独特多之处。<br>（1）多线程允许两个或者多个相同的线程并发运行。这是一种由语言级支持的并发机制。而C++中并没有这样的机制。如果要并发执行一个C++的程序，必须利用操作系统的功能手工启动，虽然这样也可以执行两个或多个线程，但是很麻烦。<br>（2）C++中没有可以和Java包对应的特性。相对接近的就是用一个公用头文件的一组库函数。而C++中构建和使用函数库与在Java中构建包和使用包是完全不同的方法。<br>（3）Java的接口与C++中的抽象类很像（C++中的抽象类定义为包括至少一个纯虚函数的类）。相同之处就是，Java中的接口与C++中的抽象类不能创建一个实例，两都都用于指定一个子类实现的一致的接口。两者之间最大的区别就在于接口对于这样的功能的实现更为清楚。<br>（4）Java提供一个流线型的内存分配机制，与C++相同，Java支持new关键字，但不支持delete关键字。当一个对象的最后一个引用撤销的时候，对象本身被自动的删除，并进行内存垃圾回收。<br>（5）Java丢弃了C++的标准库，将它替换成自己的API集合类，它们在功能上是相似的，但名字和参数有着明显的不同。同时，因为所有的Java API库都是面向对象的，而C++的标准库中只有一部分是，所以例程调用的方式不同<br>（6）Java增加了break和continue语句以接收标记<br>（7）Java中的char类型是16位的unicode字符。与C++中的wchar_t类型想似，使用时unicode字符增加了代码的可移植性。<br>（8）Java增加了&gt;&gt;&gt;操作，完成无符号的右移<br>（9）除支持单行和多行的注释之外，Java增加了第三种注释方法：文档注释。文档注释以结尾。<br>（10）Java包含一个内置的字符串类型叫做String,String在某种程序上和C++提供的标准string类型相像。当然C++中的String只有在程序中声明后才可以使用，它并不是内置的类型。</p>
<h3 id="Java与C-的不同特性："><a href="#Java与C-的不同特性：" class="headerlink" title="Java与C++的不同特性："></a>Java与C++的不同特性：</h3><ul>
<li>Java和C+都支持布尔类型的数据，但是Java实现true和false的方式和C++不同。在C++中，true是非零值，false是零值。在Java中，true和false都是预先定义好的常量，而且是一个布尔表达式能得到的惟一的两个值。虽然C++也定义了true和false,并指定为布尔变量，但C++自动将非零值转换为true,零值转换为false。Java中是不会出现的。</li>
<li>在创建C++的类的时候，访问说明符应用到一组声明中。在Java中，访问说明符仅应用于其限定的声明中。</li>
<li>C++支持异常的处理，这与Java类似，但是在C++中无需捕捉一个被引发的异常。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下使用shadowsocks科学上网]]></title>
      <url>http://blublu.xyz/hack-gwf/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8shadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>因为最近在家，都是在用ubuntu，所以使用unbutu来进行解释。<br>因为shadowsocks在windows和osx都有客户端，所以不再详细说明。可以从github上clone源码自行编译。</p>
<ul>
<li>用PIP安装很简单</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install python-pip</div></pre></td></tr></table></figure>
<ul>
<li>接着安装shadowsocks</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>启动SS客户端<br>前两步很简单，可是有人就纳闷了安装好了不知道怎么用，其实可以用sslocal -help来查看帮助就知道了。</p>
<p>sslocal -s server_ip -p server_port  -l 1080 -k password -t 600 -m aes-256-cfb</p>
<p>-s表示服务IP, -p指的是服务端的端口，-l是本地端口默认是1080, -k 是密码（要加””）, -t超时默认300,-m是加密方法默认aes-256-cfb，</p>
<p>可以简单的写为：sslocal -s ip  -p  port -k “password”    #用-s -p -k这三个参数就好，其他的默认将服务端的加密方法设为aes-256-cfb。然后就可以启动代理。</p>
<p>现在试试打开你的终端，输入sslocal -s 服务端IP  -p  1080 -k “密码” 回车</p>
<p><strong>## qt版shadowsocks</strong><br>我也是偶然才发现这个版本的shadowsocks的。图形版的嘛。对于一些用户来说也许更方便一些，于是我就把过程顺便在这写一下。</p>
<p>第一步我们先添加该软件作者的 PPA 源以及密钥。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div></pre></td></tr></table></figure>
<p>如图：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/f/8e/507293d85caaf4019ba9acbd6ff41.png" alt=""><br>接着更新软件源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>最后安装 shadowsocks-qt5：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/b/fd/57dcde843c25a1adcd2529b34ac4a.png" alt=""><br>安装完成后打开 shadowsocks-qt5，填入对应信息：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/8/a3/74cd8ddea5aa5ac61bf14ed781f07.png" alt=""><br>最后配置一下浏览器就可以科学上网了！<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/f/6d/c206fd9e144eaa2617f0c325797e8.png" alt=""><br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/0/b2/990474a85c8e3c6f87089c815fc0c.png" alt=""></p>
<p>###后记：<br>程序员都是很懒的，为了省事我觉得大部分人都会想到要开机自动运行的。于是我在网上找了相关的操作过程，具体如下：</p>
<p><pre><br>ubuntu开机后台自动运行<br>现在可以科学上网了，可是每次开机都要手动打开终端输入好长一串命令，关掉终端的时候代理就随着关闭了，这是不是很不舒服啊，至少我感觉是的，虽然我不是什么强迫症患者也不是不愿意动手的孩纸，但是一件事情明显可以有更简单的方法我却用不到那可就不舒服了…</pre></p>
<p>写个sh脚本</p>
<p>我们可以在比如/home下新建个文件叫做dl.sh ,在里面写上我们启动ss客户端需要的命令，然后保存。</p>
<p>#!/bin/bash<br>#文件名:dl.sh<br>sslocal -s ip -p port  -k “password”</p>
<p>看可不可以我们到终端执行命令 sh /home/dl.sh ,如果成功的下会有信息输出的。你也可以到浏览器去试试。这个时候你虽然输入的少了，可是关了终端还是会掉的，我们可以让他后台运行 nohup sh /home/dl.sh &amp;试试看关掉终端还可以科学上网不。</p>
<p>加入开机运行</p>
<p>现在还不可以，你同样需要开机输入命令才可以。</p>
<p>这个时候我们需要在/etc下编辑一个叫rc.local 的文件，需要root权限。在终端先su获取root权限如果你有root帐号的话，然后 vim  /etc/rc.local 编辑，在最下面输入 nohup bash /home/dl.sh&gt;/home/d.txt &amp; 保存。</p>
<p>这个时候你可以reboot重启了，测试下看看能不能后台自动运行，重启后你可以先去看下我们要他输出d.txt，你会发现竟然是/home/dl.sh line 3 :sslocal:command not found,打开浏览器果然是无法连接代理服务器，擦！这什么情况，不能启动？别着急…</p>
<p>经过一番搜索我们发现原来linux是找不到sslocal这条命令？需要添加路径，我们发现sslocal 和ssserver这两个命令是被存在 /usr/local/bin/下面的，其实不用去profile添加了，直接把这两个文件移动到/bin下（同样需要root权限，你可以在root终端下使用cp复制命令）</p>
<p>这个时候reboot试试看？没错，现在你不用操心代理的事情了，开机直接科学自由网络冲浪！奔跑吧～少年！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[即使被拖库，也可以保证密码不泄露]]></title>
      <url>http://blublu.xyz/security/%E5%8D%B3%E4%BD%BF%E8%A2%AB%E6%8B%96%E5%BA%93%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E5%AF%86%E7%A0%81%E4%B8%8D%E6%B3%84%E9%9C%B2/</url>
      <content type="html"><![CDATA[<p>首先，我们明确一下安全加密方案的终极目标：</p>
<p>即使在数据被拖库，代码被泄露，请求被劫持的情况下，也能保障用户的密码不被泄露。</p>
<p>说具体一些，我们理想中的绝对安全的系统大概是这样的：</p>
<p>首先保障数据很难被拖库。<br>即使数据被拖库，攻击者也无法从中破解出用户的密码。<br>即使数据被拖库，攻击者也无法伪造登录请求通过验证。<br>即使数据被拖库，攻击者劫持了用户的请求数据，也无法破解出用户的密码。<br>如何保障数据不被拖库，这里就不展开讲了。首先我们来说说密码加密。现在应该很少系统会直接保存用户的密码了吧，至少也是会计算密码的 <code>md5</code> 后保存。<code>md5</code> 这种不可逆的加密方法理论上已经很安全了，但是随着彩虹表的出现，使得大量长度不够的密码可以直接从彩虹表里反推出来。</p>
<p>所以，只对密码进行 <code>md5</code> 加密是肯定不够的。聪明的程序员想出了个办法，即使用户的密码很短，只要我在他的短密码后面加上一段很长的字符，再计算 <code>md5</code> ，那反推出原始密码就变得非常困难了。加上的这段长字符，我们称为==盐（Salt）==，通过这种方式加密的结果，我们称为 ==加盐 Hash== 。比如：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/a/a0/01a5423571060b8d1d7428749e133.png" alt=""><br><a id="more"></a><br>上一篇我们讲过，常用的哈希函数中，<code>SHA-256、SHA-512</code> 会比 <code>md5</code> 更安全，更难破解，出于更高安全性的考虑，我的这个方案中，会使用 <code>SHA-512</code> 代替 <code>md5</code> 。</p>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/7/9b/9d5bd7bee3d45ebbc4a4bf1484206.png" alt=""></p>
<p>通过上面的加盐哈希运算，即使攻击者拿到了最终结果，也很难反推出原始的密码。不能反推，但可以正着推，假设攻击者将 salt 值也拿到了，那么他可以枚举遍历所有 6 位数的简单密码，加盐哈希，计算出一个结果对照表，从而破解出简单的密码。这就是通常所说的暴力破解。</p>
<p>为了应对暴力破解，我使用了加盐的慢哈希。慢哈希是指执行这个哈希函数非常慢，这样暴力破解需要枚举遍历所有可能结果时，就需要花上非常非常长的时间。比如：<code>bcrypt</code> 就是这样一个慢哈希函数：</p>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/7/69/ecd0a880832f59676acbc87e8c520.png" alt=""></p>
<p>通过调整 <code>cost</code> 参数，可以调整该函数慢到什么程度。假设让 <code>bcrypt</code> 计算一次需要 0.5 秒，遍历 6 位的简单密码，需要的时间为：((26 * 2 + 10)^6) / 2 秒，约 900 年。</p>
<p>好了，有了上面的基础，来看看我的最终解决方案：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/4/c4/da94c77729b0bfc12eb0274ba0ec4.jpg" alt=""><br>上图里有很多细节，我分阶段来讲：</p>
<p>######1. 协商密钥</p>
<p>基于非对称加密的密钥协商算法，可以在通信内容完全被公开的情况下，双方协商出一个只有双方才知道的密钥，然后使用该密钥进行对称加密传输数据。比如图中所用的 ECDH 密钥协商。</p>
<p>######2. 请求 Salt</p>
<p>双方协商出一个密钥 SharedKey 之后，就可以使用 SharedKey 作为 AES 对称加密的密钥进行通信，客户端传给服务端自己的公钥 A ，以及加密了的用户ID（uid）。服务端从数据库中查找到该 uid 对于的 Salt1 和 Salt2 ，然后再加密返回给客户端。</p>
<p>注意，服务端保存的 Salt1 和 Salt2 最好和用户数据分开存储，存到其他服务器的数据库里，这样即使被 SQL 注入，想要获得 Salt1 和 Salt2 也会非常困难。</p>
<p>######3. 验证密码</p>
<p>这是最重要的一步了。客户端拿到 Salt1 和 Salt2 之后，可以计算出两个加盐哈希：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SaltHash1 = bcrypt(SHA512(password), uid + salt1, <span class="number">10</span>)</div><div class="line">SaltHash2 = SHA512(SaltHash1 + uid + salt2)</div></pre></td></tr></table></figure>
<p>使用 SaltHash2 做为 AES 密钥，加密包括 uid，time，SaltHash1，RandKey 等内容传输给服务端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Ticket = AES(SaltHash2, uid + time + SaltHash1 + RandKey)`</div><div class="line">AES(SharedKey, Ticket)</div></pre></td></tr></table></figure>
<p>服务端使用 SharedKey 解密出 Ticket 之后，再从数据库中找到该 uid 对应的 SaltHash2 ，解密 Ticket ，得到 SaltHash1 ，使用 SaltHash1 重新计算 SaltHash2 看是否和数据库中的 SaltHash2 一致，从而验证密码是否正确。</p>
<p>校验两个哈希值是否相等时，使用时间恒定的比较函数，防止试探性攻击。</p>
<p>time 用于记录数据包发送的时间，用来防止录制回放攻击。</p>
<p>######4.加密传输</p>
<p>密码验证通过后，服务端生成一个随机的临时密钥 TempKey（使用安全的随机函数），并使用 RandKey 做为密钥，传输给客户端。之后双方的数据交互都通过 TempKey 作为 AES 密钥进行加密。</p>
<p>假设被拖库了</p>
<p>以上就是整个加密传输、存储的全过程。我们来假设几种攻击场景：</p>
<p>假设数据被拖库了，密码会泄露吗？</p>
<p>数据库中的 Salt1 ，Salt2 ， SaltHash2 暴露了，想从 SaltHash2 直接反解出原始密码几乎是不可能的事情。</p>
<p>假设数据被拖库了，攻击者能不能伪造登录请求通过验证？</p>
<p>攻击者在生成 Ticket 时，需要 SaltHash1 ，但由于并不知道密码，所以无法计算出 SaltHash1 ，又无法从 SaltHash2 反推 SaltHash1 ，所以无法伪造登录请求通过验证。</p>
<p>假设数据被拖库了，攻击者使用中间人攻击，劫持了用户的请求，密码会被泄露吗？</p>
<p>中间人拥有真实服务器所有的数据，仿冒了真实的 Server ，因此，他可以解密出 Ticket 中的 SaltHash1 ，但是 SaltHash1 是无法解密出原始密码的。所以，密码也不会被泄露。</p>
<p>但是，中间人攻击可以获取到最后的 TempKey ，从而能监听后续的所有通信过程。这是很难解决的问题，因为在服务端所有东西都暴露的情况下，中间人假设可以劫持用户数据，仿冒真实 Server , 是很难和真实的 Server 区分开的。解决的方法也许只有防止被中间人攻击，保证 Server 的公钥在客户端不被篡改。</p>
<p>假设攻击已经进展到了这样的程度，还有办法补救吗？有。由于攻击者只能监听用户的登录过程，并不知道真实的密码。所以，只需要在服务端对 Salt2 进行升级，即可生成新的 SaltHash2 ，从而让攻击者所有攻击失效。</p>
<p>具体是这样的：用户正常的登录，服务端验证通过后，生成新的 Salt2 ，然后根据传过来的 SaltHash1 重新计算了 SaltHash2 存入数据库。下次用户再次登录时，获取到的是新的 Salt2 ，密码没有变，同样能登录，攻击者之前拖库的那份数据也失效了。</p>
<p>##Q &amp; A</p>
<p>使用 bcrypt 慢哈希函数，服务端应对大量的用户登录请求，性能承受的了吗？</p>
<p>该方案中，细心一点会注意到， bcrypt 只是在客户端进行运算的，服务端是直接拿到客户端运算好的结果（ SaltHash1 ）后 SHA-512 计算结果进行验证的。所以，把性能压力分摊到了各个客户端。</p>
<p>为什么要使用两个 Salt 值？</p>
<p>使用两个 Salt 值，是为了防止拖库后，劫持了用户请求后将密码破解出来。只有拥有密码的用户，才能用第一个 Salt 值计算出 SaltHash1 ，并且不能反推回原始密码。第二个 Salt 值可以加大被拖库后直接解密出 SaltHash1 的难度。</p>
<p>为什么要动态请求 Salt1 和 Salt2 ？</p>
<p>Salt 值直接写在客户端肯定不好，而且写死了要修改还得升级客户端。动态请求 Salt 值，还可以实现不升级客户端的情况下，对密码进行动态升级：服务端可定期更换 Salt2 ，重新计算 SaltHash2 ，让攻击者即使拖了一次数据也很快处于失效状态。</p>
<p>数据库都已经全被拖走了，密码不泄露还有什么意义呢？</p>
<p>其实是有意义的，正如刚刚提到的升级 Salt2 的补救方案，用户可以在完全不知情的情况下，不需要修改密码就升级了账号体系。同时，保护好用户的密码，不被攻击者拿去撞别家网站的库，也是一份责任。</p>
<p>欢迎大家针对本文的方案进行讨论，如有不实或者考虑不周的地方，请尽情指出。或者有更好的建议或意见，欢迎交流！</p>
<p>作者：CoderZh<br>微信关注：hacker-thinking （一个程序员的思考）<br>本文出处：<a href="http://blog.coderzh.com/2016/01/10/a-password-security-design-example/" target="_blank" rel="external">http://blog.coderzh.com/2016/01/10/a-password-security-design-example/</a><br>文章版权归本人所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++中关于数组的引用]]></title>
      <url>http://blublu.xyz/programming/C++%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>今天在编译一份代码的时候遇到了引用数组作为形参的函数，后来编译遇到了一些问题，虽然数组可以用指针传递来解决。不过既然碰到了用引用数组来作形参的，我是一定要深究下去的，不撞南墙不回头。随后查看了很多资料。感觉有所理解了。所以记录下来，以备过后查看。</p>
<p>首先，当传递一个数组作为参数的时候我们通常的做法就是通过传递数组名指针来作为参数的，但是这样就会有一个问题，传递进来之后你不知道它的具体大小，容易引发越界操作的问题。同时有时候我们希望传递进来的数组仅供读取而不允许修改，那么此时我们可以如以下代码所示，在参数中加上const即可</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * ary)</span></span></div></pre></td></tr></table></figure>
<p>而要确保传进来的数组能够控制大小，可以采用引用的方式。</p>
<p>例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> &amp;ary[] ary首先向右结合，所以这个相当于 (<span class="keyword">int</span>&amp;)ary[] ary是个数组，其中的元素是引用。不过这个是非法的</div><div class="line"><span class="keyword">int</span> (&amp;ary)[<span class="number">10</span>] ary首先和&amp;结合，所以ary是引用，引用的对象是数组</div></pre></td></tr></table></figure>
<p>那么我们可以得出</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> &amp; <span class="built_in">array</span>[<span class="number">10</span>];  <span class="comment">//wrong</span></div><div class="line"><span class="keyword">int</span>(&amp;<span class="built_in">array</span>)[<span class="number">10</span>];  <span class="comment">//ok</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>再列举几个比较清晰的例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line">void function_test(int (&amp;ary)[5])&#123;</div><div class="line">    cout &lt;&lt; sizeof(ary)&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">void function_test(int (&amp;ary)[10])&#123;</div><div class="line">    cout &lt;&lt; sizeof(ary)&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">void function_test1(int (&amp;ary)[5])&#123;</div><div class="line">    cout &lt;&lt; sizeof(ary)&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">int main( void )&#123;</div><div class="line">    int a[5]; </div><div class="line">    int b[10];</div><div class="line">    function_test(a);    // 函数重载， 输出为 20</div><div class="line">    function_test(b);    // 函数重载， 输出为 40</div><div class="line">    function_test1(a);   // OK，输出为20</div><div class="line">    function_test1(b);   // 错误，参数类型不对</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这样是编译不了的。</p>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/0/d0/8321e90e935cfdc80d693a133735f.png" alt=""></p>
<p>接着我们把</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function_test1(b)</div></pre></td></tr></table></figure>
<p>注释掉再编译</p>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/2/ca/c1654d03fe44d1c606147732a8c61.png" alt=""></p>
<p>此时编译已经成功了，而且和我们预期的输出是一样的.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最短路径-Floyd算法]]></title>
      <url>http://blublu.xyz/algorithm/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-Floyd%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>今天在做数据结构作业的时候遇到最短路径求解问题，书上一大堆工程代码看得真心令人眼花缭乱。醉得不行，不过好在在挣扎中摸索了一番之后大概了解了它的具体思想以及编码方案。故在此记录一下想法。希望对大家有一些理解上的帮助。</p>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre><code>求一张有向图中任意两点中最短路径方案。
</code></pre><p><strong> 思路：</strong><br>依照Floyd算法的总体思想来说，求出最短路径不外乎两种情况，一种是两点之间直接可达，另一种就是通过若干个节点之后也可达。若第一种情况下花费代价最小，那么最短路径即为两点之间直接路径；反之，若通过走若干节点之后到达目的地代价较小，那么最短路径即为第二种情况下的所走过的路径。由此我们可以考虑用邻接矩阵来存储各点之间的权值，通过三层循环刷新之后可以得出两点之间代价最小值。（原先某些不可达点通过第二种方案之后也可达，且代价总为最小）。<br><a id="more"></a><br>假设求从Vi走到Vj的最短路径，通过图我们得到，经过k点要比直接从Vi走到Vj代价小，即Vi+Vk+Vj要优于Vi+Vj。那么很容易我们就可以得到代码，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(Graph[i][k] + Graph[k][j] &lt; Graph[i][j])  </div><div class="line">   Graph[i][j] = Graph[i][k] + Graph[k][j];</div></pre></td></tr></table></figure>
<p>所以总的代码就应该是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; Vexs_Len; k++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vexs_Len; i++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Vexs_Len; j++) &#123;	    </div><div class="line">			<span class="keyword">if</span> (!(dist_Money[i][k] == Inf || dist_Money[k][j] == Inf) &amp;&amp; dist_Money[i][k] + dist_Money[k][j] &lt; dist_Money[i][j])&#123;</div><div class="line">				dist_Money[i][j] = dist_Money[i][k] + dist_Money[k][j];</div><div class="line">	    		path[i][j] = path[k][j];</div><div class="line">        	&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>这个k的位置很重要，似乎把k放在最里层更合乎我们的实际想法。但其实如果把k放在内层，则会出现ij位置过早确定，如果有其余点代价更小的时候则无法刷新。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序员最恐怖的梦魇是什么]]></title>
      <url>http://blublu.xyz/programer/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E6%81%90%E6%80%96%E7%9A%84%E6%A2%A6%E9%AD%87%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>这是Quora上的一个问题，其中Mick的回答获得了13.5k“赞同”，他如此回忆道：</p>
<p>曾经有位心理学的博士雇我查一个BUG，程序是他的一个学生写的，经常会出现奇怪的输出。程序的功能是，从文件中读取数据，提出50个问题，进行一系列计算，然后基于这位博士的研究来得出一个分数。程序跑在大学的一台3B2上。他给我演示了程序，确认这个Bug可以重现——每次在问题之间切换的时候，总会闪出一些奇怪的字符。我觉得这应该很简单，所以答应了他，并且我们同意按小时付费。</p>
<p>Day1<br>我来到这台3B2面前，用那个学生的帐号登录，找到了用C写的源代码，并开始测试。代码可读性非常差，所有的代码都写在了一行，变量名都是三个字母，而且还是随机组合的！真庆幸我当初选择按小时收费。我把代码格式化为习惯的风格，这样看起来多少还能读。</p>
<p>做完之后，我用curses库移到屏幕上一个点，打印一个问题和答案，然后等待回应。但是在打印出第一行之后，出现了一些乱码，过了大约1/2秒之后，乱码被问题覆盖掉。这个问题应该很容易解决，只有五个地方需要打印信息，所有的地方都出现了一闪而过的乱码。小意思，只要删掉mvpwintw()应该就ok了。我删掉之后开始编译，觉得问题差不多解决了。但是运行的时候，干扰信息又出现了！只是乱码变了，但是症状还是一样！</p>
<p>我检查了一下代码，发现竟然回到了我改之前的样子！15个文件，混乱的格式，三个字母的变量。当初为什么不备份一下代码呢，真想射自己一枪。我再一次格式化它们，这次把代码放到三个文件中，以不同的名字命名。然后备份了整个文件夹，并且将权限设置为只读。编译之后，一切正常。一运行，这个文件夹中又出现了15个文件！我改过之后的源代码没有被删除，然后干扰信息又回来了。<br><a id="more"></a><br>我明白了，这一定是在硬盘的某个地方的代码，在编译的时候会将程序添加到我修改的代码中去。所以我准备搜索一下include区域（/usr/include），因为我们用的是研究的版本，所以除了kernel别的代码都在机器上。头文件太多了，所以在3B2上搜索需要花一些时间。以上，就是第一天的工作了。</p>
<p>Day2<br>从磁盘的搜索中没有得到什么结果，这说明这些乱码要么是被加密了，要么就是在lib中的某个地方。但是我没有搜到，我决定搜索所有的文本文件，这次花的时间比昨天更长，第二天就这这样过去了。</p>
<p>Day3<br>没有结果。字符串是加密的。我只好根据所有的头文件来一点一点查了。这会花费相当多的时间，我们同时还警告了学校，可能有人得到了Phelps博士计算机的root权限。但他们却对此并不关心，可能只是一台实验室的计算机吧。</p>
<p>我打开#include文件，却没有发现代码。后来发现这些都被编译成一个文件了。也没什么关系，毕竟我们有源代码，大不了就重新编译所有的库。</p>
<p>Days4-6<br>接下来是最难的部分了，我们好不容易向学校的书呆子说明了问题。然后让Mark（我觉得他能做Unix管理员完全是因为娶了Dean的女儿）开始学习编译。最后他终于同意交给我来做，因为他什么都不会。在第6天最后，编译工作终于完成了。</p>
<p>我拿出修改之后的代码，重新开始编译。一切正常，然后我运行了一下，天呐！这问题又出现了。源代码分成了15个文件，干扰信息又出来了。简直跟魔法一样，我觉得自己被打败了，问题肯定不在源代码里。Phelps博士也有点不乐意了，他觉得这么长时间，即使重新写一个也该完成了。“当然”，我失落地说，“你是对的，说不定重写比较好。”“好的，我们明天开始重写。”博士说。</p>
<p>Day7<br>见鬼去吧，我不会认输的！我跟Phelps博士说：“你不用付给我钱了，只要给我时间，我一定要找到这个bug。”</p>
<p>Days8-14<br>我学聪明了，他一定是修改了一些库，我开始研究编译出来的汇编（虽然我之前根本就不懂汇编），从开始学习，到最后看懂汇编代码，花了六天。虽然根本没发现什么异常，完全就是在浪费时间。</p>
<p>Day 15<br>突然，我意识到，问题可能出在编译器上，一定是。每次编译代码的时候，编译器就会往源代码中添加干扰信息。我以前也听说过这种情况。</p>
<p>啊耶！我找到了！我们也有编译器的源代码，我查了一下，谢天谢地，终于找到了。编译器链接器中的代码是这样的：</p>
<p>1)检测所有对fopen（）的调用，在打开的文件中查找Phelps博士的问题，如果找到<br>2）编译的时候，重写15个文件<br>3）使用这15个文件编译博士的程序，在链接的时候会输出-o形式的名字</p>
<p>编译器被这个学生修改了，以便往Phelps博士的程序中添加代码。</p>
<p>几天之后，AT&amp;T的技术支持提供了原版的编译器和链接器代码，我们重新编译，替换了被修改的编译器和链接器。</p>
<p>但是，问题还没有解决。编译器被其他我们没有的源代码污染了。这些代码存在于现在可执行的编译器中，在编译编译器的时候，会加入污染代码。但是它并不修改/usr/src中的代码，而是将其复制到一个隐藏文件夹，修改编译器源代码，编译，最后删除隐藏文件夹。AT&amp;T发现这个问题花了好长时间。这个学生修改了编译器，让编译器重新编译的时候加入污染代码。最后我们不得不从另一台3B2机器上复制过来编译器的字节码文件版本，才终于解决这个问题。</p>
<p>通过编译器的代码我们还发现，如果编译/sbin/login的话会加入一些后门代码，可以允许任何人使用特定的密码来登入root。这台电脑可以通过调制解调器或Tymnet接入。终于，这件事引起了校方注意。</p>
<p>这人真是个天才，不过，也太恐怖了！</p>
<p>其他网友回答<br>Bug只在产品中有，开发版本中却没有或者不可重现<br>bug触发的几率很小很小，却又不能小到可以忽视<br>去改不是你写的代码中的bug，原来写代码的这家伙已经离职了<br>发生bug的地方是99.9%可靠的库，是你绝对不会怀疑的地方<br>几年来很多人尝试去修改的bug，但是没有人成功过<br>存在逻辑错误的bug，只有在运行一段时间之后才会触发<br>debug需要特定领域的知识，正是你不懂的<br>debug的deadline很紧<br>Stack Overflow挂了<br>在Stack Overflow上搜索问题，发现有人一年前问了同样的问题，但是没有人回答。<br>分号键失灵<br>看自己一年以前的代码，有种“这真他妈是我写的”的感觉<br>库没有文档<br>客户又改需求了<br>==写成了=<br>IE（如果你做前端）<br>Github merge冲突<br>在错误的目录下 rm -rf<br>“My code works, I don’t know why”（这句话不需要翻译了）<br>开会，开会，开会……作为程序员让我去死吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://blublu.xyz/knowledge/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p>
<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>
<p>所以我们判断一个字符串是否是合法的Email的方法是：</p>
<p>创建一个匹配Email的正则表达式；</p>
<p>用该正则表达式去匹配用户的输入来判断是否合法。<br><a id="more"></a><br>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p>
<p>在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'00\d'</span>可以匹配<span class="string">'007'</span>，但无法匹配<span class="string">'00A'</span>；</div><div class="line"><span class="string">'\d\d\d'</span>可以匹配<span class="string">'010'</span>；</div><div class="line"><span class="string">'\w\w\d'</span>可以匹配<span class="string">'py3'</span>；</div><div class="line">.可以匹配任意字符，所以：</div><div class="line"><span class="string">'py.'</span>可以匹配<span class="string">'pyc'</span>、<span class="string">'pyo'</span>、<span class="string">'py!'</span>等等。</div></pre></td></tr></table></figure>
<p>要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：</p>
<p>来看一个复杂的例子：<code>\d{3}\s+\d{3,8}</code>。</p>
<p>我们来从左到右解读一下：</p>
<ul>
<li>\d{3}表示匹配3个数字，例如’010’；</li>
<li>\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配’ ‘，’ ‘等；</li>
<li>\d{3,8}表示3-8个数字，例如’1234567’。<br>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</li>
</ul>
<p>如果要匹配’010-12345’这样的号码呢？由于’-‘是特殊字符，在正则表达式中，要用’\’转义，所以，上面的正则是<code>\d{3}\-\d{3,8}</code>。</p>
<p>但是，仍然无法匹配’010 - 12345’，因为带有空格。所以我们需要更复杂的匹配方式。</p>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>要做更精确地匹配，可以用[]表示范围，比如：</p>
<ul>
<li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li>
<li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如’a100’，’0_Z’，’Py3000’等等；</li>
<li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li>
<li><code>[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li>
<li><code>A|B</code>可以匹配A或B，所以<code>[P|p]ython</code>可以匹配’Python’或者’python’。</li>
<li><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</li>
<li><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。<br>你可能注意到了，<code>py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</li>
</ul>
<h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>有了准备知识，我们就可以在Python中使用正则表达式了。Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p>
<p><code>s = &#39;ABC\\-001&#39;</code> # Python的字符串<br>对应的正则表达式字符串变成：<code>&#39;ABC\-001&#39;</code><br>因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：<code>s = r&#39;ABC\-001&#39;</code># Python的字符串<br>对应的正则表达式字符串不变：<code>&#39;ABC\-001&#39;</code><br>先看看如何判断正则表达式是否匹配：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">test = <span class="string">'用户输入的字符串'</span></div><div class="line"><span class="keyword">if</span> re.match(<span class="string">r'正则表达式'</span>, test):</div><div class="line">    print(<span class="string">'ok'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'failed'</span>)</div><div class="line">切分字符串</div></pre></td></tr></table></figure>
<p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</div><div class="line">嗯，无法识别连续的空格，用正则表达式试试：</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'\s+'</span>, <span class="string">'a b   c'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">无论多少个空格都可以正常分割。加入,试试：</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">再加入;试试：</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</div></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：<br><code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div></pre></td></tr></table></figure>
<p>如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。<br>注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。<br><strong>提取子串非常有用。来看一个更凶残的例子：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">'19:05:30'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'</span>, t)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</div><div class="line">(<span class="string">'19'</span>, <span class="string">'05'</span>, <span class="string">'30'</span>)</div><div class="line">这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</div><div class="line"><span class="string">'^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'</span></div><div class="line">对于<span class="string">'2-30'</span>，<span class="string">'4-31'</span>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</div></pre></td></tr></table></figure>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; re.match(r'^(\d+)(0*)$', '102300').groups()</div><div class="line">('102300', '')</div><div class="line">由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。</div><div class="line">必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：</div><div class="line">&gt;&gt;&gt; re.match(r'^(\d+?)(0*)$', '102300').groups()</div><div class="line">('1023', '00')</div></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：<br>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；<br>用编译后的正则表达式去匹配字符串。<br>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="comment">#编译:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</div><div class="line"><span class="comment">#使用：</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-8086'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'8086'</span>)</div></pre></td></tr></table></figure>
<p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下安装brew]]></title>
      <url>http://blublu.xyz/tools/Mac%E4%B8%8B%E5%AE%89%E8%A3%85brew/</url>
      <content type="html"><![CDATA[<p>先说说什么是brew，brew又叫Homebrew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，只需要一个命令， 非常方便，brew类似ubuntu系统下的apt-get的功能。从Ubuntu换到MacOS之后就很感叹为什么没有apt-get这样方便快捷的安装命令，后来找到了brew。不用多说，真的相当好用！！！</p>
<p>直接用terminal来进行安装</p>
<p>安装命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/<span class="built_in">local</span> --strip 1</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/8/5c/5640b169b14244d4fece87654939c.png" alt=""><br>查看版本号：<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/f/65/eaa487bc223d56a3e99e3489a99c2.png" alt=""><br>当brew安装成功后，我们就可以随意安装自己想要安装的软件了，例如wget，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo brew install wget</div><div class="line">```  </div><div class="line"></div><div class="line">当我们想卸载的时候，使用以下命令：</div><div class="line"></div><div class="line">```bash</div><div class="line">sudo brew uninstall wget</div></pre></td></tr></table></figure>
<p>当然，有时候，你不知道你安装的软件的名字， 那么你需要先搜索下, 查到包的名字。</p>
<p>比如我要安装wget,那么我们可以用正则表达式来进行搜索：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search /wge*/</div></pre></td></tr></table></figure>
<p>==注意：==<br><strong>/wge*/是个正则表达式，需要用/分割</strong></p>
<p>其它的brew命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">brew list       列出已安装的软件</div><div class="line">brew update     更新brew</div><div class="line">brew home       用浏览器打开brew的官方网站</div><div class="line">brew info       显示软件信息</div><div class="line">brew deps       显示包依赖</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript中string与int转换]]></title>
      <url>http://blublu.xyz/front-end/Javascript%E4%B8%ADstring%E4%B8%8Eint%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>因为javascript只有一种类型var ，为变量赋值时会自动判断类型并进行转换，所以javascript是弱类型语言。所以在数据转换的时候要特别注意。</p>
<p><strong>下面简单说说关于string与int互转方面的一些问题：</strong></p>
<p>###<strong>==将int型转换成string型==</strong></p>
<p>#####1.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="number">100</span>   </div><div class="line">a = x.toString()</div></pre></td></tr></table></figure>
<p><strong>值得说明的是：number对象调用toString()报SyntaxError错误，因为javascript的解析器试图将点操作符解析为浮点数字面值的一部分，相当于123.0toString(),这样是肯定会报错的。</strong><br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">123.</span>toString(); <span class="comment">// SyntaxError遇到这种情况，要特殊处理一下：</span></div><div class="line"><span class="number">123.</span>.toString(); <span class="comment">// '123', 注意是两个点！</span></div><div class="line">(<span class="number">123</span>).toString(); <span class="comment">// '123'</span></div></pre></td></tr></table></figure>
<p>#####2.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="number">100</span>;   </div><div class="line">a =x + <span class="string">""</span>;   <span class="comment">//JS会自动隐性转换 </span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">###** 将string型转换成int型**</div><div class="line"></div><div class="line">**(1)使用Number()**</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> s = <span class="string">"32"</span>; </div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> <span class="built_in">Number</span>(s); <span class="comment">//会自动把s转换成int类型并返回</span></div></pre></td></tr></table></figure>
<p><em>当 Number() 和运算符 new 一起作为构造函数使用时，它返回一个新创建的 Number 对象。而如果不用 new 运算符，把 Number()当作一个函数来调用，它将把自己的参数转换成一个原始的数值，并且返回这个值（如果转换失败，则返回 NaN）</em>    </p>
<p><strong>(2)使用parseInt()</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s= <span class="string">"1234"</span>;</div><div class="line"><span class="keyword">var</span> i=<span class="built_in">parseInt</span>(s);<span class="comment">//得到1234</span></div><div class="line">又如： </div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"abc"</span>) <span class="comment">// Returns NaN. </span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"1256abc"</span>) <span class="comment">// Returns 1256. </span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"1234"</span>) <span class="comment">//Return 1234.</span></div></pre></td></tr></table></figure>
<p>最后，可以根据自己的需要来进行选择不同的操作，下面写出几个实例方便理解：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'12.34'</span>); <span class="comment">// =&gt; 12</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">'12.34'</span>); <span class="comment">// =&gt; 12.34</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">'12.34'</span>); <span class="comment">// =&gt; 12.34</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">''</span>); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">''</span>); <span class="comment">// =&gt; 0</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脑洞大开：只用函数来实现四则运算]]></title>
      <url>http://blublu.xyz/front-end/%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%EF%BC%9A%E5%8F%AA%E7%94%A8%E5%87%BD%E6%95%B0%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>最近在学JavaScript,然后翻到一篇博文，里面说到：</p>
<blockquote>
<p>很久很久以前，有个叫阿隆佐·邱奇的帅哥，发现只需要用函数，就可以用计算机实现运算，而不需要0、1、2、3这些数字和+、-、*、/这些符号。<br>我第一反应就是…这怎么可能呢？？？</p>
</blockquote>
<p>JavaScript支持函数，所以可以用JavaScript用函数来写这些计算。来试试：<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="comment">// 定义数字0:</span></div><div class="line"><span class="keyword">var</span> zero = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 定义数字1:</span></div><div class="line"><span class="keyword">var</span> one = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> f(x);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 定义加法:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n, m</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> m(f)(n(f)(x));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 计算数字2 = 1 + 1:</span></div><div class="line"><span class="keyword">var</span> two = add(one, one);</div><div class="line"><span class="comment">// 计算数字3 = 1 + 2:</span></div><div class="line"><span class="keyword">var</span> three = add(one, two);</div><div class="line"><span class="comment">// 计算数字5 = 2 + 3:</span></div><div class="line"><span class="keyword">var</span> five = add(two, three);</div><div class="line"><span class="comment">// 你说它是3就是3，你说它是5就是5，你怎么证明？</span></div><div class="line"><span class="comment">// 呵呵，看这里:</span></div><div class="line"><span class="comment">// 给3传一个函数,会打印3次:</span></div><div class="line">(three(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'print 3 times'</span>);</div><div class="line">&#125;))();</div><div class="line"><span class="comment">// 给5传一个函数,会打印5次:</span></div><div class="line">(five(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'print 5 times'</span>);</div><div class="line">&#125;))();</div></pre></td></tr></table></figure>
<p><strong>## 是不是很有意思，我当时玩了很久…</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何删除远程的Git分支]]></title>
      <url>http://blublu.xyz/skills/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E7%9A%84Git%E5%88%86%E6%94%AF/</url>
      <content type="html"><![CDATA[<p>平时基本上不怎么用到删除Git的远程分支，今天突然有了这个需求，一时间竟无法下手。Google了一下关于Git删除远程分支的用法。</p>
<p>可以用这个非常无厘头的语法来删除它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push  [远程名] :[分支名]</div></pre></td></tr></table></figure>
<p>例如：如果想在服务器上删除 Develop 分支，运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :Develop</div></pre></td></tr></table></figure>
<p>相信你将来也会用到那个命令的，而且你很可能会忘掉它的语法。我们可以这样记住：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [远程名] [本地分支]:[远程分支]</div></pre></td></tr></table></figure>
<p>语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。这样就很容易记忆了。</p>
<p><strong> 注意origin后边的空格哟 </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git的一些常用命令集合]]></title>
      <url>http://blublu.xyz/skills/Git%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>== 查看、添加、提交、删除、找回，重置修改文件 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git help &lt;command&gt; # 显示command的help</div><div class="line">git show # 默认显示最新版本提交的内容 </div><div class="line">git show $id #显示指定版本的提交内容</div><div class="line">git co -- &lt;file&gt; # 抛弃工作区修改</div><div class="line">git co . # 抛弃工作区修改</div><div class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</div><div class="line">git add . # 将所有修改过的工作文件提交暂存区</div><div class="line">git rm &lt;file&gt; # 从版本库中删除文件</div><div class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</div><div class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</div><div class="line">git reset -- . # 从暂存区恢复到工作文件</div><div class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class="line">git ci --amend # 修改最后一次提交记录</div><div class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</div><div class="line">git revert HEAD # 恢复最后一次提交的状态</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>== 查看文件diff ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异</div><div class="line">git diff # 此命令比较的是工作目录(Working tree)和暂存区域快照(index)之间的差异，也就是修改之后还没有暂存起来的变化内容。</div><div class="line">git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异</div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class="line">git diff --staged # 比较暂存区和版本库差异</div><div class="line">git diff --cached # 比较暂存区和版本库差异</div><div class="line">git diff --stat # 仅仅比较统计信息</div></pre></td></tr></table></figure>
<p>== 查看提交记录 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</div><div class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</div><div class="line">git log -p -2 # 查看最近两次详细修改内容的diff</div><div class="line">git log --stat #查看提交统计信息</div></pre></td></tr></table></figure>
<blockquote>
<p>tig</p>
<p>Mac上可以使用tig代替diff和log，brew install tig</p>
</blockquote>
<h1 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h1><p>== 查看、切换、创建和删除分支 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git br -r # 查看远程分支</div><div class="line">git br &lt;new_branch&gt; # 创建新的分支</div><div class="line">git br -v # 查看各个分支最后提交信息</div><div class="line">git br --merged # 查看已经被合并到当前分支的分支</div><div class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</div><div class="line">git co &lt;branch&gt; # 切换到某个分支</div><div class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过</div><div class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</div><div class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</div><div class="line">git br -d &lt;branch&gt; # 删除某个分支</div><div class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div></pre></td></tr></table></figure>
<p>== 分支合并和rebase ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</div><div class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</div><div class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>
<p>== Git补丁管理(方便在多台机器上开发同步时用) ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff &gt; ../sync.patch # 生成补丁</div><div class="line">git apply ../sync.patch # 打补丁</div><div class="line">git apply --check ../sync.patch #测试补丁能否成功</div></pre></td></tr></table></figure>
<p>== Git暂存管理 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git stash # 暂存</div><div class="line">git stash list # 列所有stash</div><div class="line">git stash apply # 恢复暂存的内容</div><div class="line">git stash drop # 删除暂存区</div></pre></td></tr></table></figure>
<h1 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</div><div class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class="line">git fetch origin # 抓取远程仓库更新</div><div class="line">git merge origin/master # 将远程主分支合并到本地当前分支</div><div class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</div><div class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</div><div class="line">git push # push所有分支</div><div class="line">git push origin master # 将本地主分支推到远程主分支</div><div class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</div><div class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div></pre></td></tr></table></figure>
<p>== Git远程仓库管理 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git remote -v # 查看远程服务器地址和仓库名称</div><div class="line">git remote show origin # 查看远程服务器仓库状态</div><div class="line">git remote add git@github:sample/sample.git 添加远程仓库地址</div><div class="line">git remote set-url origin git@github:sample/sample.git# 设置远程仓库地址(用于修改远程仓库地址) </div><div class="line">git remote rm &lt;repository&gt; # 删除远程仓库</div></pre></td></tr></table></figure>
<p>== 创建远程仓库 ==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone --bare sample sample.git # 用带版本的项目创建纯版本仓库</div><div class="line">scp -r my_project.git git@ git.coding.net:~ # 将纯仓库上传到服务器上</div><div class="line">mkdir sample.git &amp;&amp; cd sample.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class="line">git remote add origin git@github:sample/sample.git # 设置远程仓库地址  </div><div class="line">git push -u origin master # 客户端首次提交   </div><div class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track    </div><div class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库</div><div class="line">git branch --set-upstream master origin/master</div><div class="line">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>
<p>##最后！最后放一张最常用的命令图<br><img src="http://7xpajj.com1.z0.glb.clouddn.com/image/8/3c/0ab3df9796aa66672ead4d5f93d83.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机相关书籍]]></title>
      <url>http://blublu.xyz/programer/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<p>在<a href="https://github.com/EZLippi/practical-programming-books" target="_blank" rel="external">github</a>上发现一个比较好的项目，收录比较实用的计算机相关技术书籍，特别感谢EZLippi以及为此项目作出贡献的人。特此转发其内容过来分享给每一个需要的人。 </p>
<hr>
<ul>
<li><a href="http://coolshell.info/blog/2014/07/qualified-programmer-should-read-what-books.html" target="_blank" rel="external">程序员必读书籍</a></li>
<li><a href="http://www.freeprogrammingbook.com/" target="_blank" rel="external">免费下载编程类电子书的网站</a></li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><p><a href="#语言相关类">语言相关类</a></p>
<ul>
<li><a href="#android">Android</a></li>
<li><a href="#awk">AWK</a></li>
<li><a href="#SED">SED</a></li>
<li><a href="#cc">C/C++</a></li>
<li><a href="#css">CSS/HTML</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#fortran">Fortran</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#groovy">Groovy</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a><a id="more"></a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#latex">LaTeX</a></li>
<li><a href="#lisp">LISP</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#perl">Perl</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#prolog">Prolog</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#scheme">Scheme</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#swift">Swift</a></li>
</ul>
</li>
<li><p><a href="#语言无关类">语言无关类</a></p>
<ul>
<li><a href="#操作系统">操作系统</a></li>
<li><a href="#web服务器">WEB服务器</a></li>
<li><a href="#版本控制">版本控制</a></li>
<li><a href="#编辑器">编辑器</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#项目相关">项目相关</a></li>
<li><a href="#设计模式">设计模式</a></li>
<li><a href="#web">Web</a></li>
<li><a href="#大数据">大数据</a></li>
<li><a href="#编程艺术">编程艺术</a></li>
</ul>
</li>
</ul>
<h2 id="语言无关类"><a href="#语言无关类" class="headerlink" title="语言无关类"></a>语言无关类</h2><p>###操作系统</p>
<ul>
<li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external">开源世界旅行手册</a></li>
<li><a href="http://linux.vbird.org/" target="_blank" rel="external">鸟哥的Linux私房菜</a></li>
<li><a href="http://sourceforge.net/apps/trac/elpi/wiki/ALP" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="external">Linux 设备驱动</a> (第三版)</li>
<li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external">深入分析Linux内核源码</a></li>
<li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external">Docker入门实战</a></li>
<li><a href="http://freeradius.akagi201.org" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="http://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/index.html" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="http://billie66.github.io/TLCL/book/" target="_blank" rel="external">Linux 命令行(中文版)</a></li>
<li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external">Linux 构建指南</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external">理解Linux进程</a></li>
<li><a href="https://github.com/ryanzz/LFS-systemd-zh_CN" target="_blank" rel="external">Linux From Scratch systemd 中文翻译</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/30-minutes-to-learn-regex.md" target="_blank" rel="external">55分钟学会正则表达式</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/use-linux.md" target="_blank" rel="external">每个Linux用户都应该知道的命令行技巧</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/memory.md" target="_blank" rel="external">每个程序员都应该了解的内存知识</a> </li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/cpu-cache.md" target="_blank" rel="external">每个程序员都应该了解的CPU缓存知识</a> </li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/virtual-memory.md" target="_blank" rel="external">每个程序员都应该了解的虚拟内存知识</a> </li>
<li><a href="http://billie66.gitbooks.io/tlcl-cn/content/" target="_blank" rel="external">shell脚本教程</a></li>
<li><a href="http://www.commandlinefu.com/commands/matching/ls/bHM=/sort-by-votes" target="_blank" rel="external">查找命令行的网站</a></li>
<li><a href="http://www.rubular.com/" target="_blank" rel="external">正则表达式在线测试</a></li>
</ul>
<hr>
<h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><ul>
<li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
<li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li>
<li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external">Apache 中文手册</a></li>
<li><a href="http://looly.gitbooks.io/elasticsearch-the-definitive-guide-cn/" target="_blank" rel="external">Elasticsearch权威指南</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/how-stackoverflow-works.md" target="_blank" rel="external">25 台服务器是怎样支撑 StackOverflow 的？</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/picture-server.md" target="_blank" rel="external">图片服务架构演进（孔凡勇）</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/logging.md" target="_blank" rel="external">最佳日志实践（王健）</a></li>
</ul>
<hr>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> </li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git简易指南</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
<li><a href="http://gitref.justjavac.com" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a> (整理在gitbook上)</li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://mercurial.selenic.com/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="http://igit.linuxtoy.org/" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="http://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github帮助文档</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li>
</ul>
<hr>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul>
<li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external">exvim–vim 改良成IDE项目</a></li>
<li><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
<li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="https://stackedit.io/#" target="_blank" rel="external">在线MarkDown编辑</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/vim.md" target="_blank" rel="external">简明VIM练级攻略</a></li>
</ul>
<hr>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><a href="http://www.php100.com/manual/MySQL/" target="_blank" rel="external">MySQL中文手册</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/sql.md" target="_blank" rel="external">十步完全理解SQL</a></li>
<li><a href="http://www.cnblogs.com/leoo2sk/archive/2011/07/10/mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟MySQL入门教程</a></li>
</ul>
<hr>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html" target="_blank" rel="external">NoSQL数据库笔谈</a> (<a href="http://yankaycom-wordpress.stor.sinaapp.com/uploads/2012/12/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%B0%88v2.pdf" target="_blank" rel="external">PDF</a>)</li>
<li><a href="http://redisbook.com/" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="http://www.redisdoc.com/" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
<li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="http://docs.neo4j.org.cn/" target="_blank" rel="external">Neo4j 简体中文手册 v1.8</a></li>
<li><a href="http://neo4j.tw/" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/nosql.md" target="_blank" rel="external">8种Nosql数据库系统对比</a></li>
</ul>
<hr>
<h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul>
<li><a href="http://lippiouyang.gitbooks.io/gradle-in-action-cn/content/" target="_blank" rel="external">Gradle实战</a></li>
<li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
<li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="http://local.joelonsoftware.com/wiki/Chinese_\(Simplified\" target="_blank" rel="external">Joel谈软件</a>)</li>
<li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范</a></li>
<li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">开源软件架构</a></li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">史上最全设计模式导学目录</a></li>
</ul>
<hr>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li><a href="http://coolshell.info/blog/2015/04/web-transmission-basis.html" target="_blank" rel="external">网络传输基础</a></li>
<li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="http://knowledge.ecomfe.com/" target="_blank" rel="external">前端知识体系</a></li>
<li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="http://www.gruntjs.org/" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="http://yeomanjs.org/" target="_blank" rel="external">Yeoman中文文档</a></li>
<li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="http://www.flygon.net/archives/427" target="_blank" rel="external">w3school教程整理</a></li>
<li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external">Wireshark用户手册</a></li>
<li><a href="http://happypeter.github.io/tealeaf-http/" target="_blank" rel="external">HTTP 下午茶</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
</ul>
<hr>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul>
<li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
<li><a href="https://github.com/jizhang/guidetodatamining" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
<li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external">大型集群上的快速和通用数据处理架构</a></li>
<li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external">数据挖掘中经典的算法实现和详细的注释</a></li>
</ul>
<hr>
<h2 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h2><ul>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
<li><a href="http://xiaobeicn.gitbooks.io/programming-skills-summary/" target="_blank" rel="external">编程技巧总汇</a></li>
</ul>
<hr>
<h2 id="语言相关类"><a href="#语言相关类" class="headerlink" title="语言相关类"></a>语言相关类</h2><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul>
<li><a href="http://awk.readthedocs.org/en/latest/" target="_blank" rel="external">awk程序设计语言</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/awk.md" target="_blank" rel="external">awk教程</a></li>
</ul>
<hr>
<h3 id="SED"><a href="#SED" class="headerlink" title="SED"></a>SED</h3><ul>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/sed.md" target="_blank" rel="external">sed教程</a></li>
</ul>
<hr>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external">Spring Boot参考指南</a> (翻译中)</li>
<li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
<li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external">用jersey构建REST服务</a></li>
<li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external">Activiti 5.x 用户指南</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/jvm.md" target="_blank" rel="external">JVM必备指南</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/java-string.md" target="_blank" rel="external">Java入门教程</a></li>
<li><a href="http://javarevisited.blogspot.com/" target="_blank" rel="external">javarevisited博客</a></li>
<li><a href="http://www.journaldev.com/" target="_blank" rel="external">journaldev教程</a></li>
</ul>
<hr>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">开发工具下载</a></li>
<li><a href="http://guides.codepath.com/android/Home" target="_blank" rel="external">CodePath Android教程</a></li>
<li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li>Google Material Design 正體中文版 (<a href="http://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">译本二</a>)</li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
<li><a href="http://tools.android.com/tech-docs/new-build-system" target="_blank" rel="external">Android构建工具</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">Android开发技术前线(android-tech-frontier)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/android-memory-prof1.md" target="_blank" rel="external">Android内存优化(上)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/android-memory-prof2.md" target="_blank" rel="external">Android内存优化(中)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/android-memory-prof3.md" target="_blank" rel="external">Android内存优化(全)</a></li>
<li><a href="http://www.codota.com/" target="_blank" rel="external">查找代码的一个网站</a></li>
<li><a href="https://android-arsenal.com/free" target="_blank" rel="external">Android开源库汇总</a></li>
<li><a href="http://www.codota.com/" target="_blank" rel="external">查找示例代码的网站</a></li>
<li><a href="http://tutsplus.com/" target="_blank" rel="external">Android SDK使用教程</a></li>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">Android最佳实践</a></li>
<li><a href="http://google.github.io/material-design-icons/#icons-for-android" target="_blank" rel="external">Android Material icons</a></li>
</ul>
<hr>
<h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><ul>
<li><a href="https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial" target="_blank" rel="external">C++ 并发编程指南</a> (<a href="http://weibo.com/1702076100" target="_blank" rel="external">@傅海平ICT</a>)</li>
<li><a href="http://akaedu.github.io/book/" target="_blank" rel="external">Linux C编程一站式学习</a> (宋劲杉, 北京亚嵌教育研究中心)</li>
<li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips" target="_blank" rel="external">学习gdb调试技巧</a></li>
<li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">How to Think Like a Computer Scientist</a> (中英文版)</li>
<li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a></li>
<li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="external">GNU make中文手册</a></li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> (by @andycai)</li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF版)</li>
<li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/c1.md" target="_blank" rel="external">C进阶指南（1)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/c2.md" target="_blank" rel="external">C进阶指南（2)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/c3.md" target="_blank" rel="external">C进阶指南（3)</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/c-globle-variable.md" target="_blank" rel="external">C语言全局变量那些事儿</a></li>
<li><a href="https://github.com/LippiOuYang/practical-computer-skills/blob/master/src/malloc.md" target="_blank" rel="external">如何实现一个malloc</a></li>
<li><a href="http://ideone.com/" target="_blank" rel="external">在线编程和调试的网站</a></li>
</ul>
<hr>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul>
<li><a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
<li><a href="http://css.doyoe.com/" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="http://alloyteam.github.io/code-guide/" target="_blank" rel="external">前端代码规范</a> (腾讯alloyteam团队)</li>
<li><a href="http://codeguide.bootcss.com/" target="_blank" rel="external">HTML和CSS编码规范</a></li>
<li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external">Sass Guidelines 中文</a></li>
</ul>
<hr>
<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ul>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go编程基础</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go入门指南</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a> (<a href="http://xxiyy.qiniudn.com/%E5%AD%A6%E4%B9%A0%20Go%20%E8%AF%AD%E8%A8%80\(Golang\" target="_blank" rel="external">PDF</a>.pdf?download))</li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a> (此书已经出版，希望开发者们去购买，支持作者的创作)</li>
<li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="external">捐赠</a>，以鼓励作者的继续创作)</li>
<li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
<li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external">Effective Go</a></li>
</ul>
<hr>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<hr>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul>
<li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="external">Real World Haskell 中文版</a></li>
<li><a href="http://fleurer-lee.com/lyah/" target="_blank" rel="external">Haskell趣学指南</a></li>
</ul>
<hr>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="external">马上着手开发 iOS 应用程序</a></li>
<li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<hr>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">Google JSON 风格指南</a></li>
<li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></li>
<li><a href="http://pij.robinqu.me/" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</li>
<li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>
<li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>
<li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</li>
<li>jQuery<ul>
<li><a href="http://www.cn-cuckoo.com/deconstructed/jquery.html" target="_blank" rel="external">jQuery 解构</a></li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
</ul>
</li>
<li>Node.js<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="http://expressjs.jser.us/" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="https://github.com/turingou/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://www.npmjs.org/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">nodejs中文文档</a></li>
</ul>
</li>
<li>underscore.js<ul>
<li><a href="http://learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li>backbone.js<ul>
<li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
<li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="external">Developing Backbone.js Applications(中文版)</a></li>
</ul>
</li>
<li>AngularJS<ul>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
<li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
</ul>
</li>
<li>Zepto.js<ul>
<li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external">Zepto.js 中文文档</a></li>
</ul>
</li>
<li>Sea.js<ul>
<li><a href="http://island205.github.io/HelloSea.js/" target="_blank" rel="external">Hello Sea.js</a></li>
</ul>
</li>
<li>React.js<ul>
<li><a href="http://reactjs.cn/" target="_blank" rel="external">React.js 中文文档</a></li>
</ul>
</li>
<li>CoffeeScript<ul>
<li><a href="http://island205.github.io/coffeescript-cookbook.github.com/" target="_blank" rel="external">CoffeeScript Cookbook</a></li>
<li><a href="http://island205.github.io/tlboc/" target="_blank" rel="external">The Little Book on CoffeeScript中文版</a></li>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">CoffeeScript 编码风格指南</a></li>
</ul>
</li>
<li>ExtJS<ul>
<li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li>Meteor<ul>
<li><a href="http://zh.discovermeteor.com/" target="_blank" rel="external">Discover Meteor</a></li>
</ul>
</li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></li>
</ul>
<hr>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul>
<li><a href="http://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="external">一份其实很短的 LaTeX 入门文档</a></li>
<li><a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="external">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li>
</ul>
<hr>
<h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul>
<li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻譯版</a></li>
</ul>
<hr>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul>
<li><a href="https://github.com/andycai/luaprimer" target="_blank" rel="external">Lua编程入门</a></li>
<li><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="external">Lua 5.1 参考手册 中文翻译</a></li>
<li><a href="http://cloudwu.github.io/lua53doc/" target="_blank" rel="external">Lua 5.3 参考手册 中文翻译</a></li>
</ul>
<hr>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul>
<li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external">Modern Perl 中文版</a></li>
<li><a href="http://perl.linuxtoy.org/" target="_blank" rel="external">Perl 程序员应该知道的事</a></li>
</ul>
<hr>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li><a href="http://www.laruence.com/2010/06/21/1608.html" target="_blank" rel="external">PHP调试技术手册</a>(PDF)</li>
<li><a href="http://www.blogkun.com/project.html" target="_blank" rel="external">XDebug 2中文手册(译)</a> (CHM)</li>
<li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP之道</a></li>
<li><a href="https://github.com/justjavac/PHP-Best-Practices-zh_CN" target="_blank" rel="external">PHP 最佳实践</a></li>
<li><a href="http://ryancao.gitbooks.io/php-developer-prepares/content/" target="_blank" rel="external">PHP 开发者实践</a></li>
<li><a href="https://github.com/reeze/tipi" target="_blank" rel="external">深入理解PHP内核</a></li>
<li><a href="http://www.walu.cc/phpbook/" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="http://codeigniter.org.cn/user_guide/index.html" target="_blank" rel="external">CodeIgniter 用户指南</a></li>
<li><a href="http://www.golaravel.com/docs/" target="_blank" rel="external">Laravel4 中文文档</a></li>
<li><a href="https://github.com/huanghua581/laravel-getting-started" target="_blank" rel="external">Laravel 入门</a></li>
<li><a href="http://symfony-docs-chs.readthedocs.org/en/latest/" target="_blank" rel="external">Symfony2中文文档</a> (未译完)</li>
<li><a href="http://phalcon.5iunix.net/" target="_blank" rel="external">Phalcon中文文档</a>（翻译进行中）</li>
<li><a href="http://yiibook.com//doc" target="_blank" rel="external">YiiBook几本Yii框架的在线教程</a></li>
<li><a href="http://www.digpage.com/" target="_blank" rel="external">深入理解 Yii 2.0</a></li>
<li><a href="http://www.yiichina.com/" target="_blank" rel="external">Yii 框架中文文檔</a></li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/php" target="_blank" rel="external">简单易懂的PHP魔法</a></li>
<li><a href="https://github.com/LinkedDestiny/swoole-doc" target="_blank" rel="external">swoole文档及入门教程</a></li>
<li><a href="http://www.phpcomposer.com" target="_blank" rel="external">Composer 中文网</a></li>
<li><a href="http://minimee.org/php/slim" target="_blank" rel="external">Slim 中文文档</a></li>
</ul>
<hr>
<h3 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h3><ul>
<li><a href="http://fengdidi.github.io/blog/2011/11/15/qian-yan/" target="_blank" rel="external">笨办法学Prolog</a></li>
</ul>
<hr>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">小白的Python教程</a></li>
<li><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external">简明Python教程</a></li>
<li><a href="http://looly.gitbooks.io/python-basic" target="_blank" rel="external">零基础学Python</a></li>
<li><a href="http://lovelypython.readthedocs.org/en/latest/" target="_blank" rel="external">可爱的 Python </a></li>
<li><a href="http://www.pythondoc.com/pythontutorial27/index.html" target="_blank" rel="external">Python 2.7 官方教程中文版</a></li>
<li><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="external">Python 3.3 官方教程中文版</a></li>
<li><a href="http://sebug.net/paper/books/dive-into-python3/" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="https://code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="external">PEP8 Python代码风格规范</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="external">Google Python 风格指南 中文版</a></li>
<li><a href="http://liam0205.me/2013/11/02/Python-tutorial-zh_cn/" target="_blank" rel="external">Python入门教程</a> (<a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf" target="_blank" rel="external">PDF</a>)</li>
<li><a href="http://article.yeeyan.org/view/311527/287706" target="_blank" rel="external">Python的神奇方法指南</a></li>
<li><a href="http://sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a> （<a href="http://liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf" target="_blank" rel="external">PDF</a>版下载）</li>
<li><a href="http://django-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="external">Django 1.5 文档中文版</a> 正在翻译中</li>
<li><a href="http://django-1-7-doc.coding.io/" target="_blank" rel="external">Diango 1.7 文档中文版</a>  正在翻译中，目前只翻译了目录</li>
<li><a href="https://github.com/brantyoung/zh-django-best-practices" target="_blank" rel="external">Django 最佳实践</a></li>
<li><a href="http://andrew-liu.gitbooks.io/django-blog/" target="_blank" rel="external">Django搭建简易博客教程</a></li>
<li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">The Django Book 中文版</a></li>
<li><a href="http://webpy.org/tutorial3.zh-cn" target="_blank" rel="external">web.py 0.3 新手指南</a></li>
<li><a href="http://webpy.org/cookbook/index.zh-cn" target="_blank" rel="external">Web.py Cookbook 简体中文版</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython/" target="_blank" rel="external">Dive Into Python 中文版</a></li>
<li><a href="https://associates.amazon.cn/gp/associates/network/main.html" target="_blank" rel="external">Bottle 文档中文版</a> (需翻墙)</li>
<li><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="external">Flask 文档中文版</a></li>
<li><a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="external">Jinja2 文档中文版</a></li>
<li><a href="http://werkzeug-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Werkzeug 文档中文版</a></li>
<li><a href="http://spacewander.github.io/explore-flask-zh" target="_blank" rel="external">Flask之旅</a></li>
<li><a href="http://demo.pythoner.com/itt2zh/index.html" target="_blank" rel="external">Introduction to Tornado 中文翻译</a></li>
<li><a href="http://pan.baidu.com/s/1qW4pvnY" target="_blank" rel="external">Python自然语言处理中文版</a> （感谢陈涛同学的翻译，也谢谢 <a href="https://github.com/shwley" target="_blank" rel="external">@shwley</a> 联系了作者）</li>
<li><a href="http://liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/" target="_blank" rel="external">Python 绘图库 matplotlib 官方指南中文翻译</a></li>
<li><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Scrapy 0.25 文档</a></li>
<li><a href="https://github.com/carfly/thinkpython-cn" target="_blank" rel="external">ThinkPython</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html" target="_blank" rel="external">Python快速教程</a></li>
<li><a href="http://wiki.ubuntu.org.cn/Python正则表达式操作指南" target="_blank" rel="external">Python 正则表达式操作指南</a></li>
<li><a href="http://www.crifan.com/files/doc/docbook/python_beginner_tutorial/release/html/python_beginner_tutorial.html" target="_blank" rel="external">python初级教程：入门详解</a></li>
<li><a href="http://python3-cookbook.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Python Cookbook 第3版 中文版</a></li>
<li><a href="http://likebeta.gitbooks.io/twisted-intro-cn/" target="_blank" rel="external">Twisted 与异步编程入门</a></li>
<li><a href="http://textgrocery.readthedocs.org/zh/latest/index.html" target="_blank" rel="external">TextGrocery 中文 API</a> ( 基于svm算法的一个短文本分类 Python 库 )</li>
<li><a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Requests: HTTP for Humans</a></li>
<li><a href="http://pillow-cn.readthedocs.org/en/latest/#" target="_blank" rel="external">Pillow 中文文档</a></li>
</ul>
<hr>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul>
<li><a href="https://github.com/yihui/r-ninja" target="_blank" rel="external">R语言忍者秘笈</a></li>
</ul>
<hr>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul>
<li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="http://lrthw.github.io/" target="_blank" rel="external">笨方法學 Ruby</a></li>
<li><a href="http://guides.ruby-china.org/" target="_blank" rel="external">Ruby on Rails 指南</a></li>
<li><a href="http://ihower.tw/rails4/index.html" target="_blank" rel="external">Ruby on Rails 實戰聖經</a></li>
<li><a href="http://railstutorial-china.org/" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 3 版</a> (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)</li>
<li><a href="http://wusuopu.gitbooks.io/write-ruby-extension-with-c/content/" target="_blank" rel="external">编写Ruby的C拓展</a></li>
<li><a href="https://ruby-china.org/topics/22386" target="_blank" rel="external">Ruby 源码解读</a></li>
</ul>
<hr>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala课堂</a> (Twitter的Scala中文教程)</li>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a>(Twitter的Scala最佳实践的中文翻译)</li>
<li><a href="http://zh.scala-tour.com/" target="_blank" rel="external">Scala指南</a></li>
</ul>
<hr>
<h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><ul>
<li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external">Yet Another Scheme Tutorial Scheme入门教程</a></li>
<li><a href="http://songjinghe.github.io/TYS-zh-translation/" target="_blank" rel="external">Scheme语言简明教程</a></li>
</ul>
<hr>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell脚本编程30分钟入门</a></li>
<li><a href="http://blog.sae.sina.com.cn/archives/3606" target="_blank" rel="external">Bash脚本15分钟进阶教程</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="https://github.com/wzb56/13_questions_of_shell" target="_blank" rel="external">shell十三问</a></li>
</ul>
<hr>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="http://numbbbbb.github.io/the-swift-programming-language-in-chinese/" target="_blank" rel="external">The Swift Programming Language 中文版</a></li>
<li><a href="http://dev.swiftguide.cn" target="_blank" rel="external">Swift 语言指南</a></li>
<li><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="external">Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件</a></li>
</ul>
<hr>
]]></content>
    </entry>
    
  
  
</search>
