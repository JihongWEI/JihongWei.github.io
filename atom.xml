<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&amp;三鹿伴我长大</title>
  <subtitle>纠正错误的方式有很多，而解决一个错误的终极办法就是不让它发生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blublu.xyz/"/>
  <updated>2016-10-16T07:19:30.000Z</updated>
  <id>http://blublu.xyz/</id>
  
  <author>
    <name>jhWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于二进制运算中的原码反码补码的一些理解</title>
    <link href="http://blublu.xyz/computer-principle/%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://blublu.xyz/computer-principle/关于二进制运算中的原码反码补码的一些理解/</id>
    <published>2016-10-11T14:39:23.000Z</published>
    <updated>2016-10-16T07:19:30.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在上计组的课的时候又再次提到了位运算，当然也提到了加减法中的经典问题，为什么计算机要用补码（Two’s Complement）来表示负数。&lt;/p&gt;
&lt;h3 id=&quot;二进制的基本表示范围&quot;&gt;&lt;a href=&quot;#二进制的基本表示范围&quot; class=&quot;headerlink&quot; title=&quot;二进制的基本表示范围&quot;&gt;&lt;/a&gt;二进制的基本表示范围&lt;/h3&gt;&lt;p&gt;首先先从8位二进制说起吧，依次类推，直到64位及以上都是适用的。&lt;br&gt;8位二进制正数表示范围：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见直观的二进制方案只能表示正数，那么如果需要表示负数就需要占用最高位来作为符号位，0表示正数，1表示负数。这样，8位二进制数表示范围就发生了变化：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;负数：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    （&lt;span class=&quot;number&quot;&gt;-127&lt;/span&gt; ~  &lt;span class=&quot;number&quot;&gt;-0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;正数：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    （&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;若要计算16 + (-8) = ?，则我们可以得到以下算式：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果出乎意料，并非我们想象中的8，而是-24。&lt;/p&gt;
&lt;h3 id=&quot;补码运算&quot;&gt;&lt;a href=&quot;#补码运算&quot; class=&quot;headerlink&quot; title=&quot;补码运算&quot;&gt;&lt;/a&gt;补码运算&lt;/h3&gt;&lt;p&gt;如果要保证结果正确，就需要修改计算机做加法的方式，非常不方便。所以我们需要采用补码形式来表示有符号数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到这是一个9位的二进制，因为我们只有8位，所以舍弃最高位1，看下结果，非常完美，就是8.&lt;/p&gt;
&lt;p&gt;那么补码怎么计算出来的呢？&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、正数：原码和补码一致&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、负数：符号位不变，原码取反，然后加&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;补码的本质&quot;&gt;&lt;a href=&quot;#补码的本质&quot; class=&quot;headerlink&quot; title=&quot;补码的本质&quot;&gt;&lt;/a&gt;补码的本质&lt;/h3&gt;&lt;p&gt;要将证书转变成对应的负数，只要用0减去这个数就可以了，但是明显不够减，所以我们需要&lt;strong&gt;向前借一位&lt;/strong&gt;，0-16就可以用以下式子求出：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0001&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这不就是我们上边所说的，符号位不变，按位取反再加1么。结果已经很快的出来了，是正确的。&lt;strong&gt;根据&lt;code&gt;1 111 0000&lt;/code&gt;再求一次补码就可以得到它的真值&lt;code&gt;1 001 0000&lt;/code&gt;。&lt;/strong&gt;当然如果是正数也是需要再求一次补码才能得到真值的，但是因为正数的补码与原码相同，所以可以直接求值。&lt;/p&gt;
&lt;p&gt;我们再来看看之前16-8产生溢出的情况，因为结果肯定是为正数，那么前一位的符号位此时为1必然要溢出掉变为0才会得到我们想要的正数结果，是什么造成这样的溢出呢？我们可以看前文，补码的本质是向前借了一位来进行运算求补码的，所以其实这多溢出的一位就是之前向前借的那一位。&lt;/p&gt;
&lt;h3 id=&quot;关于补码再求补码为真值&quot;&gt;&lt;a href=&quot;#关于补码再求补码为真值&quot; class=&quot;headerlink&quot; title=&quot;关于补码再求补码为真值&quot;&gt;&lt;/a&gt;关于补码再求补码为真值&lt;/h3&gt;&lt;p&gt;其实我们可以假设一个时钟的周期为12小时，当前为2点钟，如果要把时钟调整到5点，一种方案是顺时针转动3个单位，另一种方案是逆时针转动9个单位，我们约定顺时针为-，逆时针为+。那么就有-3的补码就是+9，补码的再求补就是-3，就是原值了。相当于反复拨时钟而已。&lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;不难发现，-1的补码还可以这么求：1取反（包括符号位），然后加1，其实也能得到-1的补码。在程序中，可以让表示一个数的相反数表示如下：~num + 1。当然，表示为-1* num更为直观。其实本质就是先通过符号位取反来达到负数的效果，然后求补码，因为在C语言中int型变量是要用补码来表示的，所以自然而然就求出了相反数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是正数，比如0001，那么求出的负数的补码就是1111，当计算机要显示为十进制时，又需要再求一次补码，变为1001，结果就是-1；&lt;/li&gt;
&lt;li&gt;如果是负数，比如1011(-3)，那么求出的正数的补码就是0101，当计算机要显示为十进制的时候同样需要再求一次补码，但是因为正数补码相同，所以结果是3. &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在上计组的课的时候又再次提到了位运算，当然也提到了加减法中的经典问题，为什么计算机要用补码（Two’s Complement）来表示负数。&lt;/p&gt;
&lt;h3 id=&quot;二进制的基本表示范围&quot;&gt;&lt;a href=&quot;#二进制的基本表示范围&quot; class=&quot;headerlink&quot; title=&quot;二进制的基本表示范围&quot;&gt;&lt;/a&gt;二进制的基本表示范围&lt;/h3&gt;&lt;p&gt;首先先从8位二进制说起吧，依次类推，直到64位及以上都是适用的。&lt;br&gt;8位二进制正数表示范围：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见直观的二进制方案只能表示正数，那么如果需要表示负数就需要占用最高位来作为符号位，0表示正数，1表示负数。这样，8位二进制数表示范围就发生了变化：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;负数：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    （&lt;span class=&quot;number&quot;&gt;-127&lt;/span&gt; ~  &lt;span class=&quot;number&quot;&gt;-0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;正数：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    （&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ~ &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="http://blublu.xyz/categories/computer-principle/"/>
    
    
      <category term="编程素养" scheme="http://blublu.xyz/tags/Programming-literacy/"/>
    
  </entry>
  
  <entry>
    <title>二级指针操纵单向链表</title>
    <link href="http://blublu.xyz/programming/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E6%93%8D%E7%BA%B5%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://blublu.xyz/programming/二级指针操纵单向链表/</id>
    <published>2016-10-10T07:52:29.000Z</published>
    <updated>2016-10-10T12:07:06.000Z</updated>
    
    <content type="html">&lt;p&gt;越往深处学越感觉底层的重要性，在受不了上层无穷多的新武器的学习之后，打算再潜心修炼一下基本功。正好看到了一个比较有趣的关于单向链表删除的问题，下来就来细细剖析这个问题。&lt;/p&gt;
&lt;p&gt;如果对二级指针不太清楚的同学，可以查看我之前写的关于&lt;a href=&quot;/programming/指针的指针——二级指针/&quot;&gt;二级指针&lt;/a&gt;的文章。&lt;/p&gt;
&lt;p&gt;一般来说，在单项链表中要删除当前curr节点时，只需要令&lt;code&gt;prev-&amp;gt;next = next&lt;/code&gt;，再&lt;code&gt;free(curr)&lt;/code&gt;就完成了这个删除操作。但是这样做不好的地方是我们必然要维护一个previous先序结点，且在每次判断时还需要区分当前结点是否是头节点，如果是头节点在删除之前还要令&lt;code&gt;head = next&lt;/code&gt;。完整的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; node&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; node * next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//给bool(*)(node const)的类型函数指针取一个别名为remove_fn &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(* remove_fn)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; * v)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remove all nodes from the supplied list for which the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// supplied remove function returns true.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Returns the new head of the list.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;node * &lt;span class=&quot;title&quot;&gt;remove_if&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node * head, remove_fn rm)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (node * prev = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, * curr = head; curr != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;; )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        node * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; next = curr-&amp;gt;next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rm(curr))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (prev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                prev-&amp;gt;next = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                head = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(curr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            prev = curr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        curr = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果你了解指针这一神器搬的东西的话，那么我们意识到删除操作的本质是指针值的改变，这样自然而然就会想要用二级指针去操纵指针的值。下面来看一段用二级指针改进的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove_if&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node ** head, remove_fn rm)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (node** curr = head; *curr; )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        node * entry = *curr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rm(entry))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            *curr = entry-&amp;gt;next;            &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(entry);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            curr = &amp;amp;entry-&amp;gt;next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以很清楚的看到，不需要再维护prev指针了，也不需要再判断是否为链表头了，奇妙之处就在于，curr变成了一个指向指针的指针。&lt;/p&gt;
&lt;p&gt;我们来好好分析一下上面的代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;假设当前为程序刚开始的情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用函数时应为：remove_if(&amp;amp;phead, rm)取phead指针的地址赋给函数里的形参head，phead为指向首节点的指针；&lt;/li&gt;
&lt;li&gt;c/c++ 语言的函数 参数传递一律为值传递。要达到改变所传递的参数的值,我们只能想法把存放这个实际值的内存地址当做参数进行传递，然后我们操作内存地址，通过修改这个地址所指向的值，间接达到修改这个值的效果；&lt;/li&gt;
&lt;li&gt;*curr（我们马上删除它）也就是首节点的地址，因为head的值为phead的地址，所以*head为phead的内容，也就是首节点的地址，**head即为*phead，也就是首节点的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*curr = entry-&amp;gt;next&lt;/code&gt;语句中，entry当前值为首节点的地址，也表示首节点，所以*curr在语句执行完之后就会是第二个节点的地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curr = &amp;amp;entry-&amp;gt;next&lt;/code&gt;语句中，curr保存的是当前结点next指针的地址，也就意味着*curr为下一个节点的地址，**curr为下一个节点的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于不是刚开始的情况：&lt;ol&gt;
&lt;li&gt;如果不删除当前结点 —— curr保存的是当前结点next指针的地址&lt;/li&gt;
&lt;li&gt;entry 保存了 *curr —— 这意味着在下一次循环：entry就是prev-&amp;gt;next指针所指向的内存&lt;/li&gt;
&lt;li&gt;删除结点：*curr = entry-&amp;gt;next; —— 于是：prev-&amp;gt;next 指向了 entry -&amp;gt; next&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不是很清楚的话，来看看下面的几张图：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-10-10-19%3A31%3A33.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;越往深处学越感觉底层的重要性，在受不了上层无穷多的新武器的学习之后，打算再潜心修炼一下基本功。正好看到了一个比较有趣的关于单向链表删除的问题，下来就来细细剖析这个问题。&lt;/p&gt;
&lt;p&gt;如果对二级指针不太清楚的同学，可以查看我之前写的关于&lt;a href=&quot;/programming/指针的指针——二级指针/&quot;&gt;二级指针&lt;/a&gt;的文章。&lt;/p&gt;
&lt;p&gt;一般来说，在单项链表中要删除当前curr节点时，只需要令&lt;code&gt;prev-&amp;gt;next = next&lt;/code&gt;，再&lt;code&gt;free(curr)&lt;/code&gt;就完成了这个删除操作。但是这样做不好的地方是我们必然要维护一个previous先序结点，且在每次判断时还需要区分当前结点是否是头节点，如果是头节点在删除之前还要令&lt;code&gt;head = next&lt;/code&gt;。完整的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; node&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; node * next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//给bool(*)(node const)的类型函数指针取一个别名为remove_fn &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(* remove_fn)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; * v)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remove all nodes from the supplied list for which the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// supplied remove function returns true.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Returns the new head of the list.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;node * &lt;span class=&quot;title&quot;&gt;remove_if&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node * head, remove_fn rm)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (node * prev = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, * curr = head; curr != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;; )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        node * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; next = curr-&amp;gt;next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rm(curr))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (prev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                prev-&amp;gt;next = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                head = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(curr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            prev = curr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        curr = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="C/C++" scheme="http://blublu.xyz/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>指针的指针--二级指针</title>
    <link href="http://blublu.xyz/programming/%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <id>http://blublu.xyz/programming/指针的指针——二级指针/</id>
    <published>2016-10-09T09:32:12.000Z</published>
    <updated>2016-10-10T12:06:29.000Z</updated>
    
    <content type="html">&lt;p&gt;在重新温习C/C++的时候不可避免的重头戏就是指针，指针要用得好，光用一层显然是不行的，我们还需要知道二级指针的操纵。&lt;/p&gt;
&lt;p&gt;假设A-&amp;gt;B-&amp;gt;C,即A指向B，B指向C的关系中，C是一段我们实际关心的内容，假如我们用malloc或者new分配了一块内存，然后赋值”一段内容”进去，那么就是C了。我们假设C的内存起始地址为0x00000008.那么我们自然而然就可以得出：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//B内存块的实际内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*B == &lt;span class=&quot;string&quot;&gt;&quot;一段内容&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//B解引用，也就是B指针指向的C的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;//B取地址，B的地址是0x00000004&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么我们再来看看A此时的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*A == B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A解引用也就是B的内容   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**A == *B == &lt;span class=&quot;string&quot;&gt;&quot;一段内容&quot;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//B解引用，也就是B指针指向的C的值  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A == &amp;amp;B == &lt;span class=&quot;number&quot;&gt;0x00000004&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A存的是B的地址，B的地址是0x00000004  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;A == &lt;span class=&quot;number&quot;&gt;0x00000000&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A取地址，A的地址是0x00000000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-10-10-17%3A58%3A23.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;二级指针的意义&lt;/strong&gt;：之所以定义二级指针**P，不是为了使用**P表示指向的值，而是为了使用*P来存储存储值的那个单元的地址。&lt;strong&gt;同时也是希望别人给自己的一个指针赋值（可以拿来动态申请内存地址等等）&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;看看下面一段代码：有两个变量a,b,指针q,q指向a，我们想让q指向b,在函数里面实现：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *q;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;func:&amp;amp;p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;p&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;note:&lt;/span&gt;3  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p = &amp;amp;b;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;func:&amp;amp;p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;p&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;note:&lt;/span&gt;4  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;a=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;a&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;b=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;b&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;note:&lt;/span&gt;1  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    q = &amp;amp;a;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;*q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;note:&lt;/span&gt;2  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func(q);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;*q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;note:&lt;/span&gt;5  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看看输出的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;a=&lt;span class=&quot;number&quot;&gt;0x101d6a0c8&lt;/span&gt;,&amp;amp;b=&lt;span class=&quot;number&quot;&gt;0x101d6a0cc&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x101d6a0d0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*q=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,q=&lt;span class=&quot;number&quot;&gt;0x101d6a0c8&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x101d6a0d0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func:&amp;amp;p=&lt;span class=&quot;number&quot;&gt;0x7fff5de97ab8&lt;/span&gt;,p=&lt;span class=&quot;number&quot;&gt;0x101d6a0c8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func:&amp;amp;p=&lt;span class=&quot;number&quot;&gt;0x7fff5de97ab8&lt;/span&gt;,p=&lt;span class=&quot;number&quot;&gt;0x101d6a0cc&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*q=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,q=&lt;span class=&quot;number&quot;&gt;0x101d6a0c8&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x101d6a0d0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为什么*q不是100？&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;note:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&amp;gt;a,b,q都有一个地址.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;note:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;-&amp;gt;q指向a.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;note:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-&amp;gt;我们发现参数p的地址变了,跟q不一样了，是的参数传递是制作了一个副本,也就是p和q不是同一个指针,但是指向的地址&lt;span class=&quot;number&quot;&gt;0x0032F000&lt;/span&gt;(a的地址)还是不变的.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;note:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&amp;gt;p重新指向b.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;note:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;-&amp;gt;退出函数,p的修改并不会对q造成影响。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会问，我们可以通过&lt;em&gt;p = b,来使得\&lt;/em&gt;q==100啊，但是这样，q的内容还是指向a，是a的值变为了100，而不是指针q指向了b。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 p，编译器使 p = q(但是&amp;amp;p != &amp;amp;q,也就是他们并不在同一块内存地址，只是他们的内容一样，都是a的地址)。如果函数体内的程序修改了p的内容(比如在这里它指向b)。在本例中，p申请了新的内存，只是把 p所指的内存地址改变了(变成了b的地址,但是q指向的内存地址没有影响)，所以在这里并不影响函数外的指针q。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来看看二级指针的操作：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *q;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **p)&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;func:&amp;amp;p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;, p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,*p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,**p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;**p&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *p = &amp;amp;b;  &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;func:&amp;amp;p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;, p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,*p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*p&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,**p=&quot;&lt;/span&gt;&amp;lt;&amp;lt;**p&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;a=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;a&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;b=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;b&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    q = &amp;amp;a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;*q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func(&amp;amp;q);  &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;*q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;*q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;q&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;,&amp;amp;q=&quot;&lt;/span&gt;&amp;lt;&amp;lt;&amp;amp;q&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;a=&lt;span class=&quot;number&quot;&gt;0x1088990c8&lt;/span&gt;,&amp;amp;b=&lt;span class=&quot;number&quot;&gt;0x1088990cc&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x1088990d0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*q=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,q=&lt;span class=&quot;number&quot;&gt;0x1088990c8&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x1088990d0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func:&amp;amp;p=&lt;span class=&quot;number&quot;&gt;0x7fff57368ab8&lt;/span&gt;, p=&lt;span class=&quot;number&quot;&gt;0x1088990d0&lt;/span&gt;,*p=&lt;span class=&quot;number&quot;&gt;0x1088990c8&lt;/span&gt;,**p=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func:&amp;amp;p=&lt;span class=&quot;number&quot;&gt;0x7fff57368ab8&lt;/span&gt;, p=&lt;span class=&quot;number&quot;&gt;0x1088990d0&lt;/span&gt;,*p=&lt;span class=&quot;number&quot;&gt;0x1088990cc&lt;/span&gt;,**p=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*q=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,q=&lt;span class=&quot;number&quot;&gt;0x1088990cc&lt;/span&gt;,&amp;amp;q=&lt;span class=&quot;number&quot;&gt;0x1088990d0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果一目了然了，p的值为q的地址,&lt;em&gt;p的值为b的地址，\&lt;/em&gt;*p的值为b的值100，也就是q的地址的值为b的地址了，q指向了b。&lt;/p&gt;
&lt;p&gt;上面的代码对于第一次一级指针的代码来说只改了三个地方，变成了传二级指针。&lt;/p&gt;
&lt;p&gt;当然二级指针这个东西，需要有更多的时间，理解更深之后，就能够自然而然地理解了。&lt;/p&gt;
&lt;p&gt;现在举个简单例子来说明它。画一个地址大小为 1byte 的内存空间：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;addr&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;0A&lt;/td&gt;
&lt;td&gt;//ch1;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;//p1;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;//pp1;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在我们假设有一个变量&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ch1 = &lt;span class=&quot;number&quot;&gt;0x0A&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 假设 ch1 的地址位于 20H: m[20H] = 0AH;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* p1 = &amp;amp;ch1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** pp1 = &amp;amp;p1;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设内存空间，我们看做一个数组： char[ ]; 为这个数组取个名字叫做 m，例如：&lt;br&gt;&lt;code&gt;char m[256];&lt;/code&gt;&lt;br&gt;现在我们得到那个 0x0A ，就可以通过&lt;br&gt;&lt;code&gt;char ch2 = **pp1;&lt;/code&gt;&lt;br&gt;因此，我们就可以理解成：&lt;br&gt;&lt;code&gt;char ch2 = m[ m[ pp1 ] ];  //解二级指针引用。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上是二级指针&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同样，&lt;br&gt;&lt;code&gt;char ch3 = *p1;&lt;/code&gt;&lt;br&gt;可以理解成：&lt;br&gt;&lt;code&gt;char ch3 = m[ p1 ]; //解指针引用&lt;/code&gt;&lt;br&gt;OK，在汇编层面，就是这样（在汇编语言中，没有 m，只会出现 [ ]） 。比如说：&lt;/p&gt;
&lt;figure class=&quot;highlight as&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MOV EAX, [ EDX + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CALL EAX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在重新温习C/C++的时候不可避免的重头戏就是指针，指针要用得好，光用一层显然是不行的，我们还需要知道二级指针的操纵。&lt;/p&gt;
&lt;p&gt;假设A-&amp;gt;B-&amp;gt;C,即A指向B，B指向C的关系中，C是一段我们实际关心的内容，假如我们用malloc或者new分配了一块内存，然后赋值”一段内容”进去，那么就是C了。我们假设C的内存起始地址为0x00000008.那么我们自然而然就可以得出：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//B内存块的实际内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*B == &lt;span class=&quot;string&quot;&gt;&quot;一段内容&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//B解引用，也就是B指针指向的C的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;//B取地址，B的地址是0x00000004&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么我们再来看看A此时的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*A == B == &lt;span class=&quot;number&quot;&gt;0x00000008&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A解引用也就是B的内容   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**A == *B == &lt;span class=&quot;string&quot;&gt;&quot;一段内容&quot;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//B解引用，也就是B指针指向的C的值  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A == &amp;amp;B == &lt;span class=&quot;number&quot;&gt;0x00000004&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A存的是B的地址，B的地址是0x00000004  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;A == &lt;span class=&quot;number&quot;&gt;0x00000000&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//A取地址，A的地址是0x00000000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-10-10-17%3A58%3A23.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="C/C++" scheme="http://blublu.xyz/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>AT&amp;T风格汇编语言语法</title>
    <link href="http://blublu.xyz/programming/AT-T%E9%A3%8E%E6%A0%BC%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://blublu.xyz/programming/AT-T风格汇编语言语法/</id>
    <published>2016-10-01T12:17:39.000Z</published>
    <updated>2016-10-10T12:28:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;AT-amp-T风格汇编语言语法&quot;&gt;&lt;a href=&quot;#AT-amp-T风格汇编语言语法&quot; class=&quot;headerlink&quot; title=&quot;AT&amp;amp;T风格汇编语言语法&quot;&gt;&lt;/a&gt;AT&amp;amp;T风格汇编语言语法&lt;/h1&gt;&lt;h4 id=&quot;1-Register-Reference&quot;&gt;&lt;a href=&quot;#1-Register-Reference&quot; class=&quot;headerlink&quot; title=&quot;1. Register Reference&quot;&gt;&lt;/a&gt;1. Register Reference&lt;/h4&gt;&lt;p&gt;引用寄存器要在寄存器号前加百分号&lt;code&gt;%&lt;/code&gt;,如&lt;code&gt;“movl %eax, %ebx”&lt;/code&gt;。&lt;br&gt;80386 有如下寄存器:&lt;br&gt;[1] 8 个32-bit 寄存器 &lt;code&gt;%eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp&lt;/code&gt;；&lt;br&gt;( 8 个16-bit 寄存器，它们事实上是上面8 个32-bit 寄存器的低16 位：&lt;code&gt;%ax，%bx，%cx，%dx，%di，%si，%bp，%sp&lt;/code&gt;；8 个8-bit 寄存器：&lt;code&gt;%ah，%al，%bh，%bl，%ch，%cl，%dh，%dl&lt;/code&gt;。它们事实上是寄存器&lt;code&gt;%ax，%bx，%cx，%dx 的高8 位和低8位&lt;/code&gt;；)&lt;br&gt;[2] 6 个段寄存器：&lt;code&gt;%cs(code)，%ds(data)，%ss(stack), %es，%fs，%gs&lt;/code&gt;；&lt;br&gt;[3] 3 个控制寄存器：&lt;code&gt;%cr0，%cr2，%cr3&lt;/code&gt;；&lt;br&gt;[4] 6 个debug 寄存器：&lt;code&gt;%db0，%db1，%db2，%db3，%db6，%db7&lt;/code&gt;；&lt;br&gt;[5] 2 个测试寄存器：&lt;code&gt;%tr6，%tr7&lt;/code&gt;；&lt;br&gt;[6] 8 个浮点寄存器&lt;br&gt;栈：&lt;code&gt;%st(0)，%st(1)，%st(2)，%st(3)，%st(4)，%st(5)，%st(6)，%st(7)&lt;/code&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Operator-Sequence&quot;&gt;&lt;a href=&quot;#2-Operator-Sequence&quot; class=&quot;headerlink&quot; title=&quot;2. Operator Sequence&quot;&gt;&lt;/a&gt;2. Operator Sequence&lt;/h4&gt;&lt;p&gt;操作数排列是从源（左）到目的（右），如“movl %eax(源）, %ebx(目的）”   &lt;/p&gt;
&lt;h4 id=&quot;3-Immediately-Operator&quot;&gt;&lt;a href=&quot;#3-Immediately-Operator&quot; class=&quot;headerlink&quot; title=&quot;3. Immediately Operator&quot;&gt;&lt;/a&gt;3. Immediately Operator&lt;/h4&gt;&lt;p&gt;使用立即数，要在数前面加符号\$, 如 &lt;code&gt;“movl $0x04, %ebx”&lt;/code&gt;&lt;br&gt;或者：&lt;br&gt;&lt;code&gt;para = 0x04&lt;/code&gt;&lt;br&gt;&lt;code&gt;movl $para, %ebx&lt;/code&gt;&lt;br&gt;指令执行的结果是将立即数 &lt;code&gt;0x04&lt;/code&gt; 装入寄存器&lt;code&gt;ebx&lt;/code&gt;。   &lt;/p&gt;
&lt;h4 id=&quot;4-Symbol-Constant&quot;&gt;&lt;a href=&quot;#4-Symbol-Constant&quot; class=&quot;headerlink&quot; title=&quot;4. Symbol Constant&quot;&gt;&lt;/a&gt;4. Symbol Constant&lt;/h4&gt;&lt;p&gt;符号常数直接引用 如:&lt;br&gt;&lt;code&gt;value: .long 0x12a3f2de&lt;/code&gt;&lt;br&gt;&lt;code&gt;movl value , %ebx&lt;/code&gt;&lt;br&gt;指令执行的结果是将常数&lt;code&gt;0x12a3f2de&lt;/code&gt; 装入寄存器&lt;code&gt;ebx&lt;/code&gt;。&lt;br&gt;引用符号地址在符号前加符号\$, 如 &lt;code&gt;“movl $value, % ebx”&lt;/code&gt;则是将符号&lt;code&gt;value&lt;/code&gt; 的地址装入寄存器&lt;code&gt;ebx&lt;/code&gt;。   &lt;/p&gt;
&lt;h4 id=&quot;5-Length-of-Operator&quot;&gt;&lt;a href=&quot;#5-Length-of-Operator&quot; class=&quot;headerlink&quot; title=&quot;5. Length of Operator&quot;&gt;&lt;/a&gt;5. Length of Operator&lt;/h4&gt;&lt;p&gt;操作数的长度用加在指令后的符号表示&lt;code&gt;b(byte, 8-bit), w(word, 16-bits), l(long,32-bits)&lt;/code&gt;，如&lt;code&gt;“movb %al, %bl”&lt;/code&gt;，&lt;code&gt;“movw %ax, %bx”&lt;/code&gt;，&lt;code&gt;“movl %eax, %ebx”&lt;/code&gt;。&lt;br&gt;&lt;strong&gt;如果没有指定操作数长度的话，编译器将按照目标操作数的长度来设置。&lt;/strong&gt;&lt;br&gt;比如指令 &lt;code&gt;“mov %ax, %bx”&lt;/code&gt;，由于目标操作数&lt;code&gt;bx&lt;/code&gt; 的长度为&lt;code&gt;word&lt;/code&gt;，那么编译器将把此指令等同于&lt;code&gt;“movw %ax,%bx”&lt;/code&gt;。同样道理，指令&lt;code&gt;“mov $4, %ebx”&lt;/code&gt;等同于指令&lt;code&gt;“movl $4, %ebx”&lt;/code&gt;，&lt;code&gt;“push %al”&lt;/code&gt;等同于&lt;code&gt;“pushb %al”&lt;/code&gt;。&lt;br&gt;对于没有指定操作数长度，但编译器又无法猜测的指令，编译器将会报错，比如指令&lt;code&gt;“push $4”&lt;/code&gt;。   &lt;/p&gt;
&lt;h4 id=&quot;6-Sign-and-Zero-Extension&quot;&gt;&lt;a href=&quot;#6-Sign-and-Zero-Extension&quot; class=&quot;headerlink&quot; title=&quot;6. Sign and Zero Extension&quot;&gt;&lt;/a&gt;6. Sign and Zero Extension&lt;/h4&gt;&lt;p&gt;绝大多数面向80386 的AT&amp;amp;T 汇编指令与Intel 格式的汇编指令都是相同的，但符号扩展指令和零扩展指令有不同格式。符号扩展指令和零扩展指令需要指定源操作数长度和目的操作数长度，即使在某些指令中这些操作数是隐含的。&lt;br&gt;在AT&amp;amp;T 语法中，符号扩展和零扩展指令的格式为，基本部分&lt;code&gt;&amp;quot;movs&amp;quot;&lt;/code&gt;和&lt;code&gt;&amp;quot;movz&amp;quot;&lt;/code&gt;（对应Intel 语法的&lt;code&gt;movsx&lt;/code&gt; 和&lt;code&gt;movzx&lt;/code&gt;），后面跟上源操作数长度和目的操作数长度。&lt;br&gt;&lt;code&gt;movsbl&lt;/code&gt;意味着&lt;code&gt;movs（from）byte（to）long&lt;/code&gt;；&lt;br&gt;&lt;code&gt;movbw&lt;/code&gt;意味着&lt;code&gt;movs （from）byte （to）word&lt;/code&gt;；&lt;br&gt;&lt;code&gt;movswl&lt;/code&gt;意味着&lt;code&gt;movs （from）word （to）long&lt;/code&gt;。&lt;br&gt;对于movz 指令也一样。比如指令“movsbl %al,%edx”意味着将al 寄存器的内容进行符号扩展后放置到edx 寄存器中。 其它的Intel 格式的符号扩展指令还有：&lt;br&gt;&lt;figure class=&quot;highlight mel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cbw -- &lt;span class=&quot;keyword&quot;&gt;sign&lt;/span&gt;-extend byte &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %al to word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %ax； &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cwde -- &lt;span class=&quot;keyword&quot;&gt;sign&lt;/span&gt;-extend word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %ax to long &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %eax； &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cwd -- &lt;span class=&quot;keyword&quot;&gt;sign&lt;/span&gt;-extend word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %ax to long &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %dx:%ax； &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cdq -- &lt;span class=&quot;keyword&quot;&gt;sign&lt;/span&gt;-extend dword &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %eax to quad &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; %edx:%eax； &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;对应的AT&amp;amp;T 语法的指令为cbtw，cwtl，cwtd，cltd.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;7-Call-and-Jump&quot;&gt;&lt;a href=&quot;#7-Call-and-Jump&quot; class=&quot;headerlink&quot; title=&quot;7. Call and Jump&quot;&gt;&lt;/a&gt;7. Call and Jump&lt;/h4&gt;&lt;p&gt;段内调用和跳转指令为&lt;code&gt;call&lt;/code&gt;，&lt;code&gt;ret&lt;/code&gt;和&lt;code&gt;jmp&lt;/code&gt;，段间调用和跳转指令为&lt;code&gt;lcall&lt;/code&gt;，&lt;code&gt;lret&lt;/code&gt;和&lt;code&gt;ljmp&lt;/code&gt;。段间调用和跳转指令的格式为&lt;code&gt;lcall/ljmp $SECTION, $OFFSET&lt;/code&gt;，而段间返回指令则为&lt;code&gt;lret $STACK-ADJUST&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;8-Prefix&quot;&gt;&lt;a href=&quot;#8-Prefix&quot; class=&quot;headerlink&quot; title=&quot;8. Prefix&quot;&gt;&lt;/a&gt;8. Prefix&lt;/h4&gt;&lt;p&gt;操作码前缀被用在下列的情况：&lt;br&gt;[1]字符串重复操作指令(rep,repne)；&lt;br&gt;[2]指定被操作的段(cs,ds,ss,es,fs,gs)；&lt;br&gt;[3]进行总线加锁(lock)；&lt;br&gt;[4]指定地址和操作的大小(data16,addr16)；&lt;br&gt;在AT&amp;amp;T 汇编语法中，操作码前缀通常被单独放在一行，后面不跟任何操作数。例如，对于重复scas 指令，其写法为：&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;repne&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scas&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述操作码前缀的意义和用法如下：&lt;br&gt;[1]指定被操作的段前缀为&lt;code&gt;cs,ds,ss,es,fs&lt;/code&gt;,和&lt;code&gt;gs&lt;/code&gt;。在AT&amp;amp;T 语法中，只需要按照 section:memory-operand 的格式就指定了相应的段前缀。比如：&lt;code&gt;lcall %cs:realmode_swtch&lt;/code&gt;&lt;br&gt;[2]操作数／地址大小前缀是&lt;code&gt;data16&lt;/code&gt;和&lt;code&gt;addr16&lt;/code&gt;，它们被用来在32-bit 操作数／地址代码中指定16-bit 的操作数／地址。&lt;br&gt;[3]总线加锁前缀&lt;code&gt;lock&lt;/code&gt;，它是为了在多处理器环境中，保证在当前指令执行期间禁止一切中断。这个前缀仅仅对&lt;br&gt;&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;ADC&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;BTC&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;BTR&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;BTS&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;CMPXCHG&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;DEC&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INC&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;NEG&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;OR&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;SBB&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;SUB&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;XOR&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;XADD&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;XCHG&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指令有效，如果将Lock 前 缀用在其它指令之前，将会引起异常。&lt;br&gt;[4]字符串重复操作前缀&lt;code&gt;rep&lt;/code&gt;,&lt;code&gt;repe&lt;/code&gt;,&lt;code&gt;repne&lt;/code&gt;用来让字符串操作重复&lt;code&gt;%ecx&lt;/code&gt;次。&lt;/p&gt;
&lt;h4 id=&quot;9-Memory-Reference&quot;&gt;&lt;a href=&quot;#9-Memory-Reference&quot; class=&quot;headerlink&quot; title=&quot;9. Memory Reference&quot;&gt;&lt;/a&gt;9. Memory Reference&lt;/h4&gt;&lt;p&gt;Intel 语法的间接内存引用的格式为：&lt;code&gt;section:[base+index*scale+displacement]&lt;/code&gt;&lt;br&gt;而在AT&amp;amp;T 语法中对应的形式为： &lt;code&gt;section:displacement(base,index,scale)&lt;/code&gt;&lt;br&gt;其中，&lt;code&gt;base&lt;/code&gt; 和&lt;code&gt;index&lt;/code&gt;是任意的&lt;code&gt;32-bit base 和index 寄存器&lt;/code&gt;。&lt;code&gt;scale&lt;/code&gt; 可以取值1，2，4，8。如果不指定scale 值，则默认值为1。&lt;br&gt;&lt;code&gt;section&lt;/code&gt;可以指定任意的段寄存器作为段前缀，默认的段寄存器在不同的情况下不一样。如果在指令中指定了默认的段前缀，则编译器在目标代码中不会产生此段前缀代码。下面是一些例子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-4(%ebp)&lt;/code&gt;：&lt;code&gt;base=%ebp，displacement=-4&lt;/code&gt;，&lt;code&gt;section&lt;/code&gt;没有指定，由于&lt;code&gt;base＝%ebp&lt;/code&gt;，所以默认的&lt;code&gt;section=%ss&lt;/code&gt;，&lt;code&gt;index,scale&lt;/code&gt; 没有指定，则&lt;code&gt;index&lt;/code&gt;为0。&lt;br&gt;&lt;code&gt;foo(,%eax,4)&lt;/code&gt;：&lt;code&gt;index=%eax，scale=4，displacement=foo&lt;/code&gt;。其它域没有指定。这里默认的&lt;code&gt;section=%ds&lt;/code&gt;。&lt;br&gt;&lt;code&gt;foo(,1)&lt;/code&gt;：这个表达式引用的是指针&lt;code&gt;foo&lt;/code&gt;指向的地址所存放的值。注意这个表达式中没有&lt;code&gt;base&lt;/code&gt; 和&lt;code&gt;index&lt;/code&gt;，并且只有一个逗号，这是一种异常语法，但却合法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%gs:foo&lt;/code&gt;：这个表达式引用的是放置于&lt;code&gt;%gs&lt;/code&gt;段里变量&lt;code&gt;foo&lt;/code&gt;的值。&lt;br&gt;如果&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;jump&lt;/code&gt;操作在操作数前指定前缀“*”，则表示是一个绝对地址调用/跳转，也就是说&lt;code&gt;jmp/call&lt;/code&gt;指令指定的是一个绝对地址。如果没有指定”*“，则操作数是一个相对地址。任何指令如果其操作数是一个内存操作，则指令必须指定它的操作尺寸&lt;code&gt;byte,word,long&lt;/code&gt;，也就是说必须带有指令后缀&lt;code&gt;b,w,l&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AT-amp-T风格汇编语言语法&quot;&gt;&lt;a href=&quot;#AT-amp-T风格汇编语言语法&quot; class=&quot;headerlink&quot; title=&quot;AT&amp;amp;T风格汇编语言语法&quot;&gt;&lt;/a&gt;AT&amp;amp;T风格汇编语言语法&lt;/h1&gt;&lt;h4 id=&quot;1-Register-Reference&quot;&gt;&lt;a href=&quot;#1-Register-Reference&quot; class=&quot;headerlink&quot; title=&quot;1. Register Reference&quot;&gt;&lt;/a&gt;1. Register Reference&lt;/h4&gt;&lt;p&gt;引用寄存器要在寄存器号前加百分号&lt;code&gt;%&lt;/code&gt;,如&lt;code&gt;“movl %eax, %ebx”&lt;/code&gt;。&lt;br&gt;80386 有如下寄存器:&lt;br&gt;[1] 8 个32-bit 寄存器 &lt;code&gt;%eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp&lt;/code&gt;；&lt;br&gt;( 8 个16-bit 寄存器，它们事实上是上面8 个32-bit 寄存器的低16 位：&lt;code&gt;%ax，%bx，%cx，%dx，%di，%si，%bp，%sp&lt;/code&gt;；8 个8-bit 寄存器：&lt;code&gt;%ah，%al，%bh，%bl，%ch，%cl，%dh，%dl&lt;/code&gt;。它们事实上是寄存器&lt;code&gt;%ax，%bx，%cx，%dx 的高8 位和低8位&lt;/code&gt;；)&lt;br&gt;[2] 6 个段寄存器：&lt;code&gt;%cs(code)，%ds(data)，%ss(stack), %es，%fs，%gs&lt;/code&gt;；&lt;br&gt;[3] 3 个控制寄存器：&lt;code&gt;%cr0，%cr2，%cr3&lt;/code&gt;；&lt;br&gt;[4] 6 个debug 寄存器：&lt;code&gt;%db0，%db1，%db2，%db3，%db6，%db7&lt;/code&gt;；&lt;br&gt;[5] 2 个测试寄存器：&lt;code&gt;%tr6，%tr7&lt;/code&gt;；&lt;br&gt;[6] 8 个浮点寄存器&lt;br&gt;栈：&lt;code&gt;%st(0)，%st(1)，%st(2)，%st(3)，%st(4)，%st(5)，%st(6)，%st(7)&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="assembly" scheme="http://blublu.xyz/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>使用Intellij Idea + Maven构建Java Web项目</title>
    <link href="http://blublu.xyz/Web/%E4%BD%BF%E7%94%A8Intellij-Idea-Maven%E6%9E%84%E5%BB%BAJava-Web%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blublu.xyz/Web/使用Intellij-Idea-Maven构建Java-Web项目/</id>
    <published>2016-09-18T12:57:49.000Z</published>
    <updated>2016-10-10T12:04:48.000Z</updated>
    
    <content type="html">&lt;p&gt;   最近正好需要用到Java来做一个web项目，好久也没接触Java了，也是趁着这个机会再熟悉熟悉Java。用Java来做web项目，配置是至关重要的，也是相当繁琐的。不过好在自从servlet3.0与Spring之后，编写Java web已经变得比较简单了，不再需要那么多的xml配置，确实大大提高了生产力。&lt;/p&gt;
&lt;p&gt;   接下来该进入主题了，主要还是用maven来构建一个web项目，首先还是先要来了解一下Maven是什么，以及它可以拿来干嘛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maven 其实是很多东西，Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后Maven可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。Maven 有一个生命周期，当你运行 mvn install 的时候被调用。这条命令告诉 Maven 执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven 运行了许多默认的插件目标，这些目标完成了像编译和创建一个 JAR 文件这样的工作。此外，Maven能够很方便的帮你管理项目报告，生成站点，管理JAR文件，等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;但是简而言之，maven是把设计模式应用于构建架构的一种尝试，如下列出了maven 的大部分功能。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-Builds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Documentation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Reporting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Dependencies&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-SCMs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Releases&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Distribution.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;值得一提的是，&lt;strong&gt;maven是约定优于配置的&lt;/strong&gt; src/main/java约定用于存放源代码，src/main/test用于存放单元测试代码，src/target用于存放编译、打包后的输出文件。这是maven项目的通用约定，所以必须记住这些固定的目录结构。&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A29%3A32.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接下来就是说一些常用的命令了：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译项目&lt;ul&gt;
&lt;li&gt;切换到项目所在的目录，执行&lt;code&gt;mvn compile&lt;/code&gt; 这样就能对项目进行编译了，编译后会自动在target目录中生成class文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单元测试&lt;ul&gt;
&lt;li&gt;同样的需要切换到项目所在的目录，执行&lt;code&gt;mvn clean test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目打包&lt;ul&gt;
&lt;li&gt;一般来说我们会把项目打包成jar或者war，打包命令为&lt;code&gt;mvn clean package&lt;/code&gt;。运行完后，会在target目录下生成jar包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;当然了，以上说的都是在命令行方式下的使用方式，关于maven的安装，如果在OSX系统上的话可以用homebrew来进行安装，其他的Linux发行版的话可以根据不同的包管理器来进行安装，都非常简单。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;然后就开始用idea来一步步新建一个web项目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个项目&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A42%3A50.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;在弹出的new project 页面，选择maven -&amp;gt; 勾选Create from artifactype&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A48%3A25.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;接下来就是填写GroupId和ArtifactId了。GroupId就是项目组织唯一标识符，说简单点就是类似Java包的结构，习惯上都是域名反过来。而ArtifactId就是项目的唯一标识符，其实就是项目的名称而已。&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A51%3A56.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;这一步直接默认next也可以，archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据，这样创建的速度会快很多。&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A29%3A17.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;填写project name和module name，module name默认和project name 一样的。如果有多个module，还是可以改一下module名。&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-22%3A58%3A23.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;接着就在创建中了，根据网络的情况时间不定&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A00%3A54.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;光配置完maven不配置tomcat怎么行，接下来就开始配置一下tomcat.&lt;br&gt;&lt;strong&gt;在配置tomcat之前有一点重要的要说，因为如果是使用OSX系统的话，从10.10开始1024一下的端口是不能够使用的，所以如果需要外网域名映射到本地80端口的话需要进行端口转发才可以（踩了不少坑..）特别是在做微信开发的时候，需要与Tencent的服务器交互验证，同时也需要在本地进行调试才方便。对这一块应该还是比较需要的。至于用外网域名映射到本地的方案，可以选择ngrok。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A37%3A08.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A41%3A29.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A46%3A30.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A49%3A16.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/2016-09-18-23%3A54%3A18.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   最近正好需要用到Java来做一个web项目，好久也没接触Java了，也是趁着这个机会再熟悉熟悉Java。用Java来做web项目，配置是至关重要的，也是相当繁琐的。不过好在自从servlet3.0与Spring之后，编写Java web已经变得比较简单了，不再需要那么多的xml配置，确实大大提高了生产力。&lt;/p&gt;
&lt;p&gt;   接下来该进入主题了，主要还是用maven来构建一个web项目，首先还是先要来了解一下Maven是什么，以及它可以拿来干嘛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maven 其实是很多东西，Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后Maven可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。Maven 有一个生命周期，当你运行 mvn install 的时候被调用。这条命令告诉 Maven 执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven 运行了许多默认的插件目标，这些目标完成了像编译和创建一个 JAR 文件这样的工作。此外，Maven能够很方便的帮你管理项目报告，生成站点，管理JAR文件，等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;但是简而言之，maven是把设计模式应用于构建架构的一种尝试，如下列出了maven 的大部分功能。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-Builds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Documentation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Reporting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Dependencies&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-SCMs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Releases&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-Distribution.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="http://blublu.xyz/categories/Web/"/>
    
    
      <category term="web后端" scheme="http://blublu.xyz/tags/web-background/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="http://blublu.xyz/knowledge/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blublu.xyz/knowledge/vim常用命令/</id>
    <published>2016-06-27T12:19:43.000Z</published>
    <updated>2016-10-11T07:39:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Vim常用命令&quot;&gt;&lt;a href=&quot;#Vim常用命令&quot; class=&quot;headerlink&quot; title=&quot;Vim常用命令&quot;&gt;&lt;/a&gt;Vim常用命令&lt;/h1&gt;&lt;h3 id=&quot;光标移动-Cursor-Movement&quot;&gt;&lt;a href=&quot;#光标移动-Cursor-Movement&quot; class=&quot;headerlink&quot; title=&quot;光标移动(Cursor Movement)&quot;&gt;&lt;/a&gt;光标移动(Cursor Movement)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h,j,k,l&lt;/td&gt;
&lt;td&gt;h表示往左，j表示往下，k表示往右，l表示往上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+f&lt;/td&gt;
&lt;td&gt;上一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+b&lt;/td&gt;
&lt;td&gt;下一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w, e, W, E&lt;/td&gt;
&lt;td&gt;跳到单词的后面，小写包括标点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b, B&lt;/td&gt;
&lt;td&gt;以单词为单位往前跳动光标，小写包含标点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;开启新的一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;一行的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;一行的结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gg&lt;/td&gt;
&lt;td&gt;文档的第一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[N]G&lt;/td&gt;
&lt;td&gt;文档的第N行或者最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;插入模式-Insert-Mode&quot;&gt;&lt;a href=&quot;#插入模式-Insert-Mode&quot; class=&quot;headerlink&quot; title=&quot;插入模式(Insert Mode)&quot;&gt;&lt;/a&gt;插入模式(Insert Mode)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;插入到光标前面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;插入到行的开始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;插入到光标的后面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;插入到行的最后位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o, O&lt;/td&gt;
&lt;td&gt;新开一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;td&gt;关闭插入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;编辑-Editing&quot;&gt;&lt;a href=&quot;#编辑-Editing&quot; class=&quot;headerlink&quot; title=&quot;编辑(Editing)&quot;&gt;&lt;/a&gt;编辑(Editing)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;在插入模式替换光标所在的一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;合并下一行到上一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;删除光标所在的一个字符, 光标还在当行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;删除光标所在的一行，光标还在当行，不同于dd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;撤销上一步操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+r&lt;/td&gt;
&lt;td&gt;恢复上一步操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;重复最后一个命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;变换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[N]&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;一行或N行往右移动一个tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[N]&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;一行或N行往左移动一个tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;关闭-Exiting&quot;&gt;&lt;a href=&quot;#关闭-Exiting&quot; class=&quot;headerlink&quot; title=&quot;关闭(Exiting)&quot;&gt;&lt;/a&gt;关闭(Exiting)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:w&lt;/td&gt;
&lt;td&gt;保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:wq, :x&lt;/td&gt;
&lt;td&gt;保存并关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:q&lt;/td&gt;
&lt;td&gt;关闭（已保存）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:q!&lt;/td&gt;
&lt;td&gt;强制关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;搜索-Search&quot;&gt;&lt;a href=&quot;#搜索-Search&quot; class=&quot;headerlink&quot; title=&quot;搜索(Search)&quot;&gt;&lt;/a&gt;搜索(Search)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/pattern&lt;/td&gt;
&lt;td&gt;搜索（非插入模式)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?pattern&lt;/td&gt;
&lt;td&gt;往后搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;光标到达搜索结果的前一个目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;光标到达搜索结果的后一个目标&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;视觉模式-Visual-Mode&quot;&gt;&lt;a href=&quot;#视觉模式-Visual-Mode&quot; class=&quot;headerlink&quot; title=&quot;视觉模式(Visual Mode)&quot;&gt;&lt;/a&gt;视觉模式(Visual Mode)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;选中一个或多个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;选中一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;剪切和复制-Cut-and-Paste&quot;&gt;&lt;a href=&quot;#剪切和复制-Cut-and-Paste&quot; class=&quot;headerlink&quot; title=&quot;剪切和复制(Cut and Paste)&quot;&gt;&lt;/a&gt;剪切和复制(Cut and Paste)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dd&lt;/td&gt;
&lt;td&gt;删除一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dw&lt;/td&gt;
&lt;td&gt;删除一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;删除后一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;删除前一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;删除一行最后一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[N]yy&lt;/td&gt;
&lt;td&gt;复制一行或者N行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yw&lt;/td&gt;
&lt;td&gt;复制一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;窗口操作&quot;&gt;&lt;a href=&quot;#窗口操作&quot; class=&quot;headerlink&quot; title=&quot;窗口操作&quot;&gt;&lt;/a&gt;窗口操作&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:split&lt;/td&gt;
&lt;td&gt;水平方向分割出一个窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:vsplit&lt;/td&gt;
&lt;td&gt;垂直方向分割出一个窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:close&lt;/td&gt;
&lt;td&gt;关闭窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+W&lt;/td&gt;
&lt;td&gt;切换窗口, h到左边窗口，j到下方窗口，k到上方窗口，l到右边窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vim常用命令&quot;&gt;&lt;a href=&quot;#Vim常用命令&quot; class=&quot;headerlink&quot; title=&quot;Vim常用命令&quot;&gt;&lt;/a&gt;Vim常用命令&lt;/h1&gt;&lt;h3 id=&quot;光标移动-Cursor-Movement&quot;&gt;&lt;a href=&quot;#光标移动-Cursor-Movement&quot; class=&quot;headerlink&quot; title=&quot;光标移动(Cursor Movement)&quot;&gt;&lt;/a&gt;光标移动(Cursor Movement)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h,j,k,l&lt;/td&gt;
&lt;td&gt;h表示往左，j表示往下，k表示往右，l表示往上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+f&lt;/td&gt;
&lt;td&gt;上一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+b&lt;/td&gt;
&lt;td&gt;下一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w, e, W, E&lt;/td&gt;
&lt;td&gt;跳到单词的后面，小写包括标点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b, B&lt;/td&gt;
&lt;td&gt;以单词为单位往前跳动光标，小写包含标点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;开启新的一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;一行的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;一行的结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gg&lt;/td&gt;
&lt;td&gt;文档的第一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[N]G&lt;/td&gt;
&lt;td&gt;文档的第N行或者最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;插入模式-Insert-Mode&quot;&gt;&lt;a href=&quot;#插入模式-Insert-Mode&quot; class=&quot;headerlink&quot; title=&quot;插入模式(Insert Mode)&quot;&gt;&lt;/a&gt;插入模式(Insert Mode)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用（解释)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;插入到光标前面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;插入到行的开始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;插入到光标的后面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;插入到行的最后位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o, O&lt;/td&gt;
&lt;td&gt;新开一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;td&gt;关闭插入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="必备知识" scheme="http://blublu.xyz/categories/knowledge/"/>
    
    
      <category term="vim" scheme="http://blublu.xyz/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Python元类到底是什么</title>
    <link href="http://blublu.xyz/programming/python%E5%85%83%E7%B1%BB%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://blublu.xyz/programming/python元类到底是什么/</id>
    <published>2016-06-01T01:01:41.000Z</published>
    <updated>2016-07-21T03:57:41.000Z</updated>
    
    <content type="html">&lt;p&gt;最近趁着有点时间，就打算把python重拾一下，以前虽然了解了python的大概语法，但并没有拿来当作主力语言.为了不让它在脑子里荒废，决定重新学一下python的各种用法.老话说得好，温故而知新.果然再过一段时间重新读一遍python的语法以及相关用法,和以前的感觉完全不同了.如果以前是似懂非懂的话，现在应该是半知半解的状态了！（(&lt;em&gt;^__^&lt;/em&gt;) 好像没什么区别）Python确实在很大意义上方便了我们的编程，解放了双手。特别是从Java变换过来，所以这也是为什么那么多人感叹“人生苦短，我用Python！”&lt;/p&gt;
&lt;p&gt;在读到Python元类的时候，刚开始看到下面这段代码的我是一脸懵逼的.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object, type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(type, object)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object(), type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;wtf？type和object互为子类？深受静态语言洗脑的我完全无法接受这样的现实.然后就开始了啃书啃知识的阶段了…各种搜寻它们俩到底是个什么关系？&lt;/p&gt;
&lt;p&gt;最后打破世界观的观点来了.type和object就好比蛋鸡关系那样，它们是一个共生关系，并不能说先有谁后有谁，需要同时存在.object的类型是type，也就是说object类是type类的实例对象，它们之间的关系就是实例关系.说起来有点拗口，不嫌烦的话再啰嗦一句，object类是type的实例化对象.&lt;/p&gt;
&lt;p&gt;首先，要缕清这个关系，还是需要舍弃掉之前静态语言所带来的概念，重新构造我们的世界观.在python里，一切都是对象，这个一切比号称完全面向对象的java还要完全.&lt;strong&gt; 包括class、type、object等等都是对象 &lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“鸡・蛋”问题通常都是通过一种叫“自举”（bootstrap）的过程来解决的。其实“鸡蛋问题”的根本矛盾就在于假定了“鸡”或“蛋”的其中一个要先进入“完全可用”的状态。而许多现实中被简化为“鸡蛋问题”的情况实际可以在“混沌”中把“鸡”和“蛋”都初始化好，而不存在先后问题；在它们初始化的过程中，两者都不处于“完全可用”状态，而完成初始化后它们就同时都进入了可用状态。&lt;/p&gt;
&lt;p&gt;打个比方，番茄炒蛋。并不是要先把番茄完全炒好，然后把鸡蛋完全炒好，然后把它们混起来；而是先炒番茄炒到半熟，再炒鸡蛋炒到半熟，然后把两个半熟的部分混在一起同时炒熟。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象之间需要联系在一起，靠什么？靠的就是关系，在python中，对象之间有两种关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承关系&lt;/li&gt;
&lt;li&gt;实例关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先说说继承关系，这个应该不会很陌生，引用知乎上的一段解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如有class A和class B(A)，再强调一下，A和B都是对象，则对象B继承了对象A，或者说A是B的超类，继承关系可以通过&lt;strong&gt;base&lt;/strong&gt;属性得知，如&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;B.__base__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在python里，所有对象（包括type）均继承自object，而object则是继承体系的根，上面再无对象：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;object.__base__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type.__base__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着在说说实例关系，比如有class A， a = A()，不嫌烦的再强调一下，a和A都是对象，则对象a是对象A的实例，或者说对象A是对象a的类型.如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.__class__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在python里，对象又可以分为三种：type object、class object和non-class object。&lt;br&gt;&lt;strong&gt; non-class object指通过实例化class object得来的对象 &lt;/strong&gt;&lt;br&gt;就如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;l=Mylist()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三者的区别和联系在于：&lt;br&gt;type object都是type的实例，&lt;br&gt;class object是type object的实例，&lt;br&gt;non-class object是class object的实例，&lt;br&gt;type object和class object都可以进行实例化，&lt;br&gt;而non-class object不能进行实例化&lt;/p&gt;
&lt;p&gt;最后借用一下在某blog里看到的图，不记得是在哪看到的了..没法引用地址，请原谅.&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/ca54cfa2cc510d2dcc40e3cc7fb2e051_b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一列，元类列，type是所有元类的父亲。我们可以通过继承type来创建元类。&lt;/p&gt;
&lt;p&gt;第二列，TypeObject列，也称类列，object是所有类的父亲，大部份我们直接使用的数据类型都存在这个列的。&lt;/p&gt;
&lt;p&gt;第三列，实例列，实例是对象关系链的末端，不能再被子类化和实例化。&lt;/p&gt;
&lt;p&gt;如果type和object只保留一个，那么一定是object。只有object 时，第一列将不复存在，只剩下二三列，第二列表示类型，第三列表示实例，这个和大部分静态语言的类型架构类似，如java 。&lt;br&gt;这样的架构将让python 失去一种很重要的动态特性–动态创建类型。本来，类(第二列的同学)在Python里面是一个对象(typeobject)，对象是可以在运行时动态修改的，所以我们能在你定义一个类之后去修改他的行为或属性！拿掉第一列后，第二列变成了纯类型，写成怎样的，运行时行为就怎样。在这一点上，并不比静态语言有优势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; “鸡蛋问题”在于：Python里的所有类型都确实用一个type object表示，而所有类型都是object类的子类。&lt;br&gt;换句话说，&lt;type &#39;type&#39;=&quot;&quot;&gt;类是&lt;type &#39;object&#39;=&quot;&quot;&gt;的子类；而&lt;type &#39;object&#39;=&quot;&quot;&gt;既是类又是个对象，是&lt;type &#39;type&#39;=&quot;&quot;&gt;的实例。&lt;br&gt;这些核心类型的type对象在CPython里的C层面的类型是PyTypeObject，其结构是确定的；它们的存储空间通过静态变量分配，例如&lt;type &#39;type&#39;=&quot;&quot;&gt;就声明为在object.h的PyTypeObject PyType_Type，对应的还有&lt;type &#39;object&#39;=&quot;&quot;&gt;的PyTypeObject PyBaseObject_Type。&lt;br&gt;所以在进行初始化动作之前它们的存储空间就已经有着落了，真正做初始化时只要把它们的相互引用串起来就好. &lt;/type&gt;&lt;/type&gt;&lt;/type&gt;&lt;/type&gt;&lt;/type&gt;&lt;/type&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近趁着有点时间，就打算把python重拾一下，以前虽然了解了python的大概语法，但并没有拿来当作主力语言.为了不让它在脑子里荒废，决定重新学一下python的各种用法.老话说得好，温故而知新.果然再过一段时间重新读一遍python的语法以及相关用法,和以前的感觉完全不同了.如果以前是似懂非懂的话，现在应该是半知半解的状态了！（(&lt;em&gt;^__^&lt;/em&gt;) 好像没什么区别）Python确实在很大意义上方便了我们的编程，解放了双手。特别是从Java变换过来，所以这也是为什么那么多人感叹“人生苦短，我用Python！”&lt;/p&gt;
&lt;p&gt;在读到Python元类的时候，刚开始看到下面这段代码的我是一脸懵逼的.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object, type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(type, object)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object(), type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;wtf？type和object互为子类？深受静态语言洗脑的我完全无法接受这样的现实.然后就开始了啃书啃知识的阶段了…各种搜寻它们俩到底是个什么关系？&lt;/p&gt;
&lt;p&gt;最后打破世界观的观点来了.type和object就好比蛋鸡关系那样，它们是一个共生关系，并不能说先有谁后有谁，需要同时存在.object的类型是type，也就是说object类是type类的实例对象，它们之间的关系就是实例关系.说起来有点拗口，不嫌烦的话再啰嗦一句，object类是type的实例化对象.&lt;/p&gt;
&lt;p&gt;首先，要缕清这个关系，还是需要舍弃掉之前静态语言所带来的概念，重新构造我们的世界观.在python里，一切都是对象，这个一切比号称完全面向对象的java还要完全.&lt;strong&gt; 包括class、type、object等等都是对象 &lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“鸡・蛋”问题通常都是通过一种叫“自举”（bootstrap）的过程来解决的。其实“鸡蛋问题”的根本矛盾就在于假定了“鸡”或“蛋”的其中一个要先进入“完全可用”的状态。而许多现实中被简化为“鸡蛋问题”的情况实际可以在“混沌”中把“鸡”和“蛋”都初始化好，而不存在先后问题；在它们初始化的过程中，两者都不处于“完全可用”状态，而完成初始化后它们就同时都进入了可用状态。&lt;/p&gt;
&lt;p&gt;打个比方，番茄炒蛋。并不是要先把番茄完全炒好，然后把鸡蛋完全炒好，然后把它们混起来；而是先炒番茄炒到半熟，再炒鸡蛋炒到半熟，然后把两个半熟的部分混在一起同时炒熟。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="Python" scheme="http://blublu.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java中常见的坑</title>
    <link href="http://blublu.xyz/programming/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91/"/>
    <id>http://blublu.xyz/programming/java中常见的坑/</id>
    <published>2016-03-30T11:42:21.000Z</published>
    <updated>2016-07-18T02:45:29.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;把数组转成ArrayList&quot;&gt;&lt;a href=&quot;#把数组转成ArrayList&quot; class=&quot;headerlink&quot; title=&quot;把数组转成ArrayList&quot;&gt;&lt;/a&gt;把数组转成ArrayList&lt;/h3&gt;&lt;p&gt;为了将数组转换为ArrayList，我们经常会这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(arr);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;Arrays.asList()&lt;/code&gt;方法可以得到一个&lt;code&gt;ArrayList&lt;/code&gt;，但是得到这个&lt;code&gt;ArrayList&lt;/code&gt;其实是定义在&lt;code&gt;Arrays&lt;/code&gt;类中的一个私有的静态内部类。这个类虽然和&lt;code&gt;java.util.ArrayList&lt;/code&gt;同名，但是并不是同一个类。我就曾经被深深地坑过…&lt;code&gt;java.util.Arrays.ArrayList&lt;/code&gt;类中实现了&lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;contains()&lt;/code&gt;等方法，但是并没有定义向其中增加元素的方法。也就是说通过&lt;code&gt;Arrays.asList()&lt;/code&gt;得到的&lt;code&gt;ArrayList&lt;/code&gt;的大小是固定的。&lt;/p&gt;
&lt;p&gt;如果在开发过程中，想得到一个真正的&lt;code&gt;ArrayList&lt;/code&gt;对象（java.util.ArrayList的实例），可以通过以下方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; arrayList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(arr));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java.util.ArrayList中包含一个可以接受集合类型参数的构造函数。因为java.util.Arrays.ArrayList这个内部类继承了AbstractList类，所以，该类也是Collection的子类。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;判断一个数组是否包含某个值&quot;&gt;&lt;a href=&quot;#判断一个数组是否包含某个值&quot; class=&quot;headerlink&quot; title=&quot;判断一个数组是否包含某个值&quot;&gt;&lt;/a&gt;判断一个数组是否包含某个值&lt;/h3&gt;&lt;p&gt;在判断一个数组中是否包含某个值的时候，我们经常这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Set&amp;lt;String&amp;gt; set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;(Arrays.asList(arr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; set.contains(targetValue);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上方式虽然可以实现功能，但是效率却比较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。&lt;/p&gt;
&lt;p&gt;在判断一个数组是否包含某个值的时候，推荐使用for循环遍历的形式或者使用Apache Commons类库中提供的ArrayUtils类的contains方法。&lt;/p&gt;
&lt;h3 id=&quot;在循环中删除列表中的元素&quot;&gt;&lt;a href=&quot;#在循环中删除列表中的元素&quot; class=&quot;headerlink&quot; title=&quot;在循环中删除列表中的元素&quot;&gt;&lt;/a&gt;在循环中删除列表中的元素&lt;/h3&gt;&lt;p&gt;在讨论这个问题之前，先考虑以下代码的输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;list.size();i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;list.remove(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(list);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[b,d]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码的目的是想遍历删除list中所有元素，但是结果却没有成功。原因是忽略了一个关键的问题：当一个元素被删除时，列表的大小缩小并且下标也会随之变化，所以当你想要在一个循环中用下标删除多个元素的时候，它并不会正常的生效。&lt;/p&gt;
&lt;p&gt;也有些人知道以上代码的问题就由于数组下标变换引起的。所以，他们想到使用增强for循环的形式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String s:list)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.equals(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        list.remove(s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，很不幸的是，以上代码会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;，有趣的是，如果在remove操作后增加一个break，代码就不会报错：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String s:list)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.equals(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        list.remove(s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;迭代器（Iterator）是工作在一个独立的线程中，并且拥有一个 mutex 锁。 迭代器被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 迭代器会马上抛出java.util.ConcurrentModificationException 异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，正确的在遍历过程中删除元素的方法应该是使用Iterator：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Iterator&amp;lt;String&amp;gt; iter = list.iterator();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String s = iter.next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.equals(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        iter.remove();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;next()方法必须在调用remove()方法之前调用。如果在循环过程中先调用remove()，再调用next()，就会导致异常ConcurrentModificationException。原因如上。&lt;/p&gt;
&lt;h3 id=&quot;HashTable-和-HashMap-的选择&quot;&gt;&lt;a href=&quot;#HashTable-和-HashMap-的选择&quot; class=&quot;headerlink&quot; title=&quot;HashTable 和 HashMap 的选择&quot;&gt;&lt;/a&gt;HashTable 和 HashMap 的选择&lt;/h3&gt;&lt;p&gt;了解算法的人可能对HashTable比较熟悉，因为他是一个数据结构的名字。但在Java里边，用HashMap来表示这样的数据结构。Hashtable和 HashMap的一个关键性的不同是，HashTable是同步的，而HashMap不是。所以通常不需要HashTable，HashMap用的更多。&lt;/p&gt;
&lt;h3 id=&quot;使用原始集合类型&quot;&gt;&lt;a href=&quot;#使用原始集合类型&quot; class=&quot;headerlink&quot; title=&quot;使用原始集合类型&quot;&gt;&lt;/a&gt;使用原始集合类型&lt;/h3&gt;&lt;p&gt;在Java里边，原始类型和无界通配符类型很容易混合在一起。以Set为例，&lt;code&gt;Set&lt;/code&gt;是一个原始类型，而&lt;code&gt;Set&amp;lt; ? &amp;gt;&lt;/code&gt;是一个无界通配符类型。 （可以把原始类型理解为没有使用泛型约束的类型）&lt;/p&gt;
&lt;p&gt;考虑下面使用原始类型List作为参数的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List list, Object o)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    list.add(o);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    List&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    add(list, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String s = list.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码将会抛出异常：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用原始集合类型是很危险的，因为原始集合类型跳过了泛型类型检查，是不安全的。&lt;code&gt;Set&lt;/code&gt;、&lt;code&gt;Set&amp;lt; ? &amp;gt;&lt;/code&gt;和&lt;code&gt;Set&amp;lt; Object &amp;gt;&lt;/code&gt;之间有很大差别。&lt;/p&gt;
&lt;h3 id=&quot;访问级别&quot;&gt;&lt;a href=&quot;#访问级别&quot; class=&quot;headerlink&quot; title=&quot;访问级别&quot;&gt;&lt;/a&gt;访问级别&lt;/h3&gt;&lt;p&gt;程序员们经常使用public作为类中的字段的修饰符，因为这样可以很简单的通过引用得到值，但这并不是好的设计，按照经验，分配给成员变量的访问级别应该尽可能的低。参考Java中的四种访问级别&lt;/p&gt;
&lt;h3 id=&quot;ArrayList与LinkedList的选择&quot;&gt;&lt;a href=&quot;#ArrayList与LinkedList的选择&quot; class=&quot;headerlink&quot; title=&quot;ArrayList与LinkedList的选择&quot;&gt;&lt;/a&gt;ArrayList与LinkedList的选择&lt;/h3&gt;&lt;p&gt;当程序员们不知道&lt;code&gt;ArrayList&lt;/code&gt;与&lt;code&gt;LinkedList&lt;/code&gt;的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之前有巨大的性能差别。简而言之，如果有大量的增加删除操作并且没有很多的随机访问元素的操作，应该首先&lt;code&gt;LinkedList&lt;/code&gt;。（&lt;code&gt;LinkedList&lt;/code&gt;更适合从中间插入或者删除（链表的特性））&lt;/p&gt;
&lt;h3 id=&quot;可变与不可变&quot;&gt;&lt;a href=&quot;#可变与不可变&quot; class=&quot;headerlink&quot; title=&quot;可变与不可变&quot;&gt;&lt;/a&gt;可变与不可变&lt;/h3&gt;&lt;p&gt;不可变对象有许多的优点，比如简单，安全等等。同时，也有人提出疑问：既然不可变有这么多好处，为什么不把所有类都搞成不可变的呢？&lt;/p&gt;
&lt;p&gt;通常情况下，可变对象可以用来避免产生过多的中间对象。一个经典的实例就是连接大量的字符串，如果使用不可变的字符串，将会产生大量的需要进行垃圾回收的对象。这会浪费CPU大量的时间，使用可变对象才是正确的方案(比如StringBuilder)。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String result=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String s: arr)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result = result + s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23616211/why-we-need-mutable-classes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow&lt;/a&gt;中也有关于这个的讨论。&lt;/p&gt;
&lt;h3 id=&quot;父类和子类的构造函数&quot;&gt;&lt;a href=&quot;#父类和子类的构造函数&quot; class=&quot;headerlink&quot; title=&quot;父类和子类的构造函数&quot;&gt;&lt;/a&gt;父类和子类的构造函数&lt;/h3&gt;&lt;p&gt;上图的代码中有两处编译时错误，原因其实很简单，主要和构造函数有关。首先，我们都知道：&lt;/p&gt;
&lt;p&gt;如果一个类没有定义构造函数，编译器将会插入一个无参数的默认构造函数。&lt;/p&gt;
&lt;p&gt;如果一个类中定义了一个带参数的构造函数，那么编译器就不会再帮我们创建无参的构造函数。&lt;/p&gt;
&lt;p&gt;上面的Super类中定义了一个带参数的构造函数。编译器将不会插入默认的无参数构造函数。&lt;/p&gt;
&lt;p&gt;我们还应该知道：&lt;/p&gt;
&lt;p&gt;子类的所有构造函数（无论是有参还是无参）在执行时，都会调用父类的无参构造函数。&lt;/p&gt;
&lt;p&gt;所以，编译器试图调用Super类中的无参构造函数。但是父类默认的构造函数未定义，编译器就会报出这个错误信息。&lt;/p&gt;
&lt;p&gt;要解决这个问题，可以简单的通过&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在父类中添加一个Super()构造方法，就像这样：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;public Super(){}&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;移除自定义的父类构造函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在子类的构造函数中调用父类的super(value)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;””还是构造函数&quot;&gt;&lt;a href=&quot;#””还是构造函数&quot; class=&quot;headerlink&quot; title=&quot;””还是构造函数&quot;&gt;&lt;/a&gt;””还是构造函数&lt;/h3&gt;&lt;p&gt;关于这个问题，也是经常容易出现困惑的地方。&lt;/p&gt;
&lt;p&gt;其实，如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。&lt;/p&gt;
&lt;p&gt;在String d = new String(“abcd”)时，因为字面值“abcd”已经是字符串类型，那么使用构造函数方式只会创建一个额外没有用处的对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;把数组转成ArrayList&quot;&gt;&lt;a href=&quot;#把数组转成ArrayList&quot; class=&quot;headerlink&quot; title=&quot;把数组转成ArrayList&quot;&gt;&lt;/a&gt;把数组转成ArrayList&lt;/h3&gt;&lt;p&gt;为了将数组转换为ArrayList，我们经常会这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(arr);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;Arrays.asList()&lt;/code&gt;方法可以得到一个&lt;code&gt;ArrayList&lt;/code&gt;，但是得到这个&lt;code&gt;ArrayList&lt;/code&gt;其实是定义在&lt;code&gt;Arrays&lt;/code&gt;类中的一个私有的静态内部类。这个类虽然和&lt;code&gt;java.util.ArrayList&lt;/code&gt;同名，但是并不是同一个类。我就曾经被深深地坑过…&lt;code&gt;java.util.Arrays.ArrayList&lt;/code&gt;类中实现了&lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;contains()&lt;/code&gt;等方法，但是并没有定义向其中增加元素的方法。也就是说通过&lt;code&gt;Arrays.asList()&lt;/code&gt;得到的&lt;code&gt;ArrayList&lt;/code&gt;的大小是固定的。&lt;/p&gt;
&lt;p&gt;如果在开发过程中，想得到一个真正的&lt;code&gt;ArrayList&lt;/code&gt;对象（java.util.ArrayList的实例），可以通过以下方式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; arrayList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(Arrays.asList(arr));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java.util.ArrayList中包含一个可以接受集合类型参数的构造函数。因为java.util.Arrays.ArrayList这个内部类继承了AbstractList类，所以，该类也是Collection的子类。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="Java" scheme="http://blublu.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、session、OAuth token的异同之处</title>
    <link href="http://blublu.xyz/security/Cookie%E3%80%81session%E3%80%81OAuth%20token%E7%9A%84%E5%BC%82%E5%90%8C%E4%B9%8B%E5%A4%84/"/>
    <id>http://blublu.xyz/security/Cookie、session、OAuth token的异同之处/</id>
    <published>2016-03-22T07:49:53.000Z</published>
    <updated>2016-07-18T02:46:04.000Z</updated>
    
    <content type="html">&lt;p&gt;今天朋友在开发网站后台的时候遇到验证这方面的问题，然后一直很困惑Cookie与session的区别，还有OAuth token.我把我的想法和他解释半天他还是似懂非懂。顺便就在此记录一下cookie与session的区别.如果有错误，欢迎批评指正。&lt;/p&gt;
&lt;h3 id=&quot;Cookie和Session到底是什么？？？&quot;&gt;&lt;a href=&quot;#Cookie和Session到底是什么？？？&quot; class=&quot;headerlink&quot; title=&quot;Cookie和Session到底是什么？？？&quot;&gt;&lt;/a&gt;Cookie和Session到底是什么？？？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 因为Http协议是一种无状态协议，一请求一返回就完成了一次事务操作。这样做的的好处就是能够减轻服务器的压力，避免不必要的长连接,占用资源。但是弊端也是显而易见的，没有办法保持上一个会话状态，就比如最简单的购物车，下一次请求后无法知晓上一步的具体选择。虽然Http1.1加入了长连接，但是keep-alive是连接层上的事情，对于应用层来说并没有改变无状态的本质。http2.0那就另说了。（默认的http1.1 keep-alive的时间是300s，增加长连接是为了减少不必要的连接-断开-连接这样的操作）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回到正题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie是保存在本地的为了保存会话状态的一种机制，服务器生成，保存在本地，当然了，保存的信息由服务器决定，可能是账号密码，这些都由服务器开发者来进行抉择。不过Cookie一般不会拿来存储很重要的信息，当然了，即使是密码，也肯定是经过签名了的。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;正是由于http请求是无状态的，每次访问服务端是不知道是否是登录用户，所以人们很自然的想到在http请求报文中加入登录标识就可以了，这个登录标识就可以是cookie，这样的cookie服务端要保存有所有登录用户的cookie，这样请求报文来了之后拿到登录标识cookie，在服务端进行比较久可以了。再比如购物网站，多次点击添加商品到购物车客户端很容易知道哪些物品在购物车中，但是服务端怎么知道每次添加的物品放到哪个登录用户的购物车中呢？也需要请求报文中带着cookie才行（在不登陆的情况下京东也是可以不断添加商品的，推测应该是登录的时候一并创建cookie并且发送物品信息），这些cookie都是为了跟踪会话用的，所以客户端有，服务端也有，并且服务端有全部的会话cookie。&lt;/li&gt;
&lt;li&gt;Session也是为了保存和服务器之间的会话状态而产生的一种机制，因为cookie是存在客户端的，所以还是有泄露的风险，而session则是后来为了安全衍生出来的技术。session把数据保存在服务器上，把一个相对应的sid(SessionId)发送给客户端，客户端用sid来读取存储在服务器上的信息。由此也可以看到，sid是需要保存的，所以session机制有时会需要借助于Cookie的机制来达到保存sid的目的。但除此之外我们还可以有别的选择。因为Cookie是可以人为关闭的，为了能够在cookie被关闭的情况下还能把sid发送回服务器，经常使用的就是URL重写，把sid直接加在URL路径后面。还可以使用表单隐藏字段等等，这些不在我们今天讨论的范围。&lt;/li&gt;
&lt;li&gt;以上所说的session是session的实现方法，而本质上来说session是一个抽象的概念，开发者为了实现终端和继续等待等操作，将 user agent 和 server 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 session 的概念。而我们今天常说的 “session”，是为了绕开 cookie 的各种限制，通常借助 cookie 本身和后端存储实现的，一种更高级的会话状态实现。&lt;/li&gt;
&lt;li&gt;通常我们一般常用的选择是用Cookie来存储sid和一些不重要的信息，像账号密码这些隐私信息就会保存在服务器的长久session中，通过sid来读取从而进行验证。到这里似乎问题就来了，那岂不是获取到sid就可以仿照拥有者进行登录，对服务器进行欺骗了？事实上，是这样的，当sid泄露之后就相当于任何拿到sid的人都可以成为你，对服务器上属于你的资源与信息都拥有完全的访问权限。&lt;/li&gt;
&lt;li&gt;在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放Session。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt; 综上所述，可以知道cookie和session本质上就是一回事，区别就在于在于一个对客户端可见一个不可见。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 当然，最重要的一点，session和cookie都是可以设置时间期限的，超过相应的期限就无法再使用了，具体的信息可自行搜索查阅，在这里就不在阐述了&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;那么有什么办法能够减轻甚至防止这样的情况发生呢？&quot;&gt;&lt;a href=&quot;#那么有什么办法能够减轻甚至防止这样的情况发生呢？&quot; class=&quot;headerlink&quot; title=&quot;那么有什么办法能够减轻甚至防止这样的情况发生呢？&quot;&gt;&lt;/a&gt;那么有什么办法能够减轻甚至防止这样的情况发生呢？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过SSL，传输内容被建立连接时的随机公钥对加密，偷窃者极难分析了解包中的内容，更不可能伪装客户端来进行会话。正规的网站在登录阶段都是HTTPS传输的，银行官方网银/淘宝 。&lt;/li&gt;
&lt;li&gt;在敏感/关键的步骤之前增加校验步骤。例如，在交易页面之前增加一个安全问题页面，如‘自己最喜欢的食物’ 之类的，即使被恶意窃取或模仿，提高关键交易/步骤的安全性。工商银行的网上支付就有类似机制。 &lt;/li&gt;
&lt;li&gt;服务器端时常变化sessionid, sesisonid被窃取后，很可能是一个过时的sessionid。例如每次客户端请求都会拿到新的sessionid，老的sessionid作废，这样极大的降低sessionid被偷窃进行session欺骗的机会。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;现在来说说浏览器上保存密码和cookie保存密码的区别&quot;&gt;&lt;a href=&quot;#现在来说说浏览器上保存密码和cookie保存密码的区别&quot; class=&quot;headerlink&quot; title=&quot;现在来说说浏览器上保存密码和cookie保存密码的区别&quot;&gt;&lt;/a&gt;现在来说说浏览器上保存密码和cookie保存密码的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当我们登录网站时勾选保存用户名和密码或者保持登录状态XXX天的时候，一般保存的都是cookie，将用户名和密码的cookie保存到硬盘中或者服务器session中，这样再次登录的时候浏览器直接将cookie（如果是存储在服务器session中则是发送cookie中的sid）发送到服务端验证。&lt;/li&gt;
&lt;li&gt;浏览器也有一套保存账号密码的方案，不过这个和cookie无关，每个浏览器都可以有自己的加密解密方式，把相应的账号密码加密后存储起来，当需要的时候解密然后置入登录框。如果浏览器保存了账号密码，即使cookie过期了，弹出登录页面，这时输入框就会显示你曾经保存的用户名和密码。如果cookie没有过期，会直接调转到后台，无需登录。这是两种方式，要注意区分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;那么OAuth-token又是什么呢？&quot;&gt;&lt;a href=&quot;#那么OAuth-token又是什么呢？&quot; class=&quot;headerlink&quot; title=&quot;那么OAuth token又是什么呢？&quot;&gt;&lt;/a&gt;那么OAuth token又是什么呢？&lt;/h3&gt;&lt;p&gt;token简单来说就是一个授权码，你可以对一个账号的操作权限进行分级，当第三方客户端需要访问你在服务器上的资源时，而你又不想把你的账号密码告诉它，那么最好的方式就是对其进行授权。OAuth提供的是&lt;strong&gt; 认证&lt;/strong&gt; 和 &lt;strong&gt; 授权&lt;/strong&gt; ，认证是针对用户，授权是针对App 。其目的是让 某App 有权利访问 某用户 的信息。这里的Token是唯一的。不可以转移到其它App上，也不可以转到其它用户上。&lt;/p&gt;
&lt;p&gt;事实上“用户登录系统”可以是由Auth + Session组成的。Auth系统在Auth过程之后就完成操作了，剩下的继续由“用户登录系统”交给Session或者Token来实现用户绑定。实际上TokenID也可以看做SessionID，但是这完全取决于你如何实现你的系统。它们其实完全是两个相同的概念，都是认证完毕之后得到的&lt;code&gt;令牌&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;看到这好像大家觉得又绕回来了，token也可以当作sessionId是什么意思？原因其实就在于，sessionId就是我们经过了认证之后获得的一个能够证明我们身份的唯一标志码。那么如果我们把一个登录系统分成认证和维护状态两个模块来看的话，token其实就是sessionId。如果你把一个登录系统看成一个模块，那么session就是cookie的服务器版。&lt;/p&gt;
&lt;p&gt;总之，在我看来 &lt;strong&gt; 一切维护用户状态的技术都是session，一切动态生成的服务端有能力鉴别真假而本身无涵义的字符串都是token。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于OAuth2.0的认证方式以及流程，在阮一峰的博客里写得很好，推荐大家看看。&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？&quot;&gt;&lt;a href=&quot;#可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？&quot; class=&quot;headerlink&quot; title=&quot;可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？&quot;&gt;&lt;/a&gt;可能大家都会讨论的是cookie和session的安全性，至于安全性，非HTTPS有安全性可言吗？HTTPS就一定安全吗？&lt;/h5&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天朋友在开发网站后台的时候遇到验证这方面的问题，然后一直很困惑Cookie与session的区别，还有OAuth token.我把我的想法和他解释半天他还是似懂非懂。顺便就在此记录一下cookie与session的区别.如果有错误，欢迎批评指正。&lt;/p&gt;
&lt;h3 id=&quot;Cookie和Session到底是什么？？？&quot;&gt;&lt;a href=&quot;#Cookie和Session到底是什么？？？&quot; class=&quot;headerlink&quot; title=&quot;Cookie和Session到底是什么？？？&quot;&gt;&lt;/a&gt;Cookie和Session到底是什么？？？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 因为Http协议是一种无状态协议，一请求一返回就完成了一次事务操作。这样做的的好处就是能够减轻服务器的压力，避免不必要的长连接,占用资源。但是弊端也是显而易见的，没有办法保持上一个会话状态，就比如最简单的购物车，下一次请求后无法知晓上一步的具体选择。虽然Http1.1加入了长连接，但是keep-alive是连接层上的事情，对于应用层来说并没有改变无状态的本质。http2.0那就另说了。（默认的http1.1 keep-alive的时间是300s，增加长连接是为了减少不必要的连接-断开-连接这样的操作）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回到正题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie是保存在本地的为了保存会话状态的一种机制，服务器生成，保存在本地，当然了，保存的信息由服务器决定，可能是账号密码，这些都由服务器开发者来进行抉择。不过Cookie一般不会拿来存储很重要的信息，当然了，即使是密码，也肯定是经过签名了的。
    
    </summary>
    
      <category term="安全" scheme="http://blublu.xyz/categories/security/"/>
    
    
      <category term="web后端" scheme="http://blublu.xyz/tags/web-background/"/>
    
      <category term="web前端" scheme="http://blublu.xyz/tags/web-developer/"/>
    
  </entry>
  
  <entry>
    <title>字符编码--UTF-8与Unicode</title>
    <link href="http://blublu.xyz/knowledge/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%9A%84%E6%98%8E%E5%9D%91%E4%B8%8E%E6%9A%97%E5%9D%91/"/>
    <id>http://blublu.xyz/knowledge/字符编码的明坑与暗坑/</id>
    <published>2016-03-15T11:11:09.000Z</published>
    <updated>2016-07-18T02:45:41.000Z</updated>
    
    <content type="html">&lt;p&gt;自从上个学期简单地了解了字符编码之后就一直没有再过多的理会它。对字符编码这一块总是似懂非懂，今天突然就想把它彻底地了解一遍，不想再有这种疑惑的感觉。重新理顺了一遍字符编码之间的关系，以及utf-8、utf-16以及utf-32和Unicode之间的那些千丝万缕的关系。&lt;/p&gt;
&lt;h3 id=&quot;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot;&gt;&lt;a href=&quot;#首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot; class=&quot;headerlink&quot; title=&quot;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot;&gt;&lt;/a&gt;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&lt;/h3&gt;&lt;h2 id=&quot;首先我们来看看关于Unicode的介绍&quot;&gt;&lt;a href=&quot;#首先我们来看看关于Unicode的介绍&quot; class=&quot;headerlink&quot; title=&quot;首先我们来看看关于Unicode的介绍&quot;&gt;&lt;/a&gt;首先我们来看看关于Unicode的介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&lt;br&gt;可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。&lt;br&gt;Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询&lt;a href=&quot;http://unicode.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode官网&lt;/a&gt;，或者专门的汉字对应表。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。Unicode 用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。码位就是可以分配给字符的数字。UTF-8、 UTF-16、UTF-32都是将数字转换到程序数据的编码方案。&lt;/p&gt;
&lt;p&gt;Unicode字符集可以简写为UCS（Unicode Character Set）。早期的Unicode标准有UCS-2、UCS-4的说法。UCS-2用两个字节编码，UCS-4用4个字节编码。UCS-4根据最高位为0的 最高字节分成2^7=128个group。每个group再根据次高字节分为256个平面（plane）。每个平面根据第3个字节分为256行 （row），每行有256个码位（cell）。group 0的平面0被称作BMP（Basic Multilingual Plane）。将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。&lt;br&gt;每个平面有2^16=65536个码位。Unicode计划使用了17个平面，一共有 17*65536=1114112个码位。在Unicode 5.0.0版本中，已定义的码位只有238605个，分布在平面0、平面1、平面2、平面14、平面15、平面16。其中平面15和平面16上只是定义了 两个各占65534个码位的专用区（Private Use Area），分别是0xF0000-0xFFFFD和0x100000-0x10FFFD。所谓专用区，就是保留给大家放自定义字符的区域，可以简写为 PUA。&lt;/p&gt;
&lt;p&gt;平面0也有一个专用区：0xE000-0xF8FF，有6400个码位。平面0的 0xD800-0xDFFF，共2048个码位，是一个被称作代理区（Surrogate）的特殊区域。代理区的目的用两个UTF-16字符表示BMP以 外的字符。在介绍UTF-16编码时会介绍。&lt;br&gt;如前所述在Unicode 5.0.0版本中，238605-65534*2-6400-2408=99089。余下的99089个已定义码位分布在平面0、平面1、平面2和平面 14上，它们对应着Unicode目前定义的99089个字符，其中包括71226个汉字。平面0、平面1、平面2和平面14上分别定义了52080、 3419、43253和337个字符。平面2的43253个字符都是汉字。平面0上定义了27973个汉字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;那么，问题来了。utf-8与Unicode之间有什么联系呢？&quot;&gt;&lt;a href=&quot;#那么，问题来了。utf-8与Unicode之间有什么联系呢？&quot; class=&quot;headerlink&quot; title=&quot;那么，问题来了。utf-8与Unicode之间有什么联系呢？&quot;&gt;&lt;/a&gt;那么，问题来了。utf-8与Unicode之间有什么联系呢？&lt;/h2&gt;&lt;p&gt;Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。 &lt;/p&gt;
&lt;p&gt;比如，汉字“严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。 &lt;/p&gt;
&lt;p&gt;这里就有两个严重的问题，第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。 &lt;/p&gt;
&lt;p&gt;它们造成的结果是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现了unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。&lt;/li&gt;
&lt;li&gt;unicode在很长一段时间内无法推广，直到互联网的出现。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着说一下普遍的认为Unicode是2个字节的问题，其实我觉得这是第一代程序员的一种误读吧。因为java虚拟机采用UCS2（通用字符集)标准即UTF-16保存字符，所有的字符在内存中都是2个字节，这样虚拟机处理字符串的截取、长度和判断都非常容易。其他语言如PHP、Python也是，在运行时采用固定长度存储字符。包括windows也都是使用utf-16标准来保存字符。&lt;strong&gt; 但在微软资料中将其错误称为unicode &lt;/strong&gt; 所以有了现在的一个Unicode字符占两个字节的错误说法，其实他们本质上说的就是UTF-16。&lt;br&gt;当然，因为UTF-16相当浪费空间，相对应编译后的class，java规定采用UTF-8保存，因为大部分是英文字符，只有一个字节，可以大量节省存储空间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说完一些它们之间屡不清的关系，接下来来看看它们的本质究竟是什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;UTF-16&quot;&gt;&lt;a href=&quot;#UTF-16&quot; class=&quot;headerlink&quot; title=&quot;UTF-16&quot;&gt;&lt;/a&gt;UTF-16&lt;/h4&gt;&lt;p&gt;   UTF-16比较好理解,就是任何字符对应的数字都用两个字节来保存.我们通常对Unicode的误解就是把Unicode与UTF-16等同了.但是很显然如果都是英文字母这做有点浪费.明明用一个字节能表示一个字符为啥整两个啊.&lt;/p&gt;
&lt;p&gt;   于是又有个UTF-8,这里的8非常容易误导人,8不是指一个字节,难道一个字节表示一个字符?实际上不是.当用UTF-8时表示一个字符是可变的,有可能是用一个字节表示一个字符,也可能是两个,三个.当然最多不能超过3个字节了.反正是根据字符对应的数字大小来确定.&lt;/p&gt;
&lt;p&gt;   于是UTF-8和UTF-16的优劣很容易就看出来了.如果全部英文或英文与其他文字混合,但英文占绝大部分,用UTF-8就比UTF-16节省了很多空间.而如果全部是中文这样类似的字符或者混合字符中中文占绝大多数.UTF-16就占优势了,可以节省很多空间.&lt;/p&gt;
&lt;h4 id=&quot;UTF-8&quot;&gt;&lt;a href=&quot;#UTF-8&quot; class=&quot;headerlink&quot; title=&quot;UTF-8&quot;&gt;&lt;/a&gt;UTF-8&lt;/h4&gt;&lt;p&gt;互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UTF-8的编码规则很简单，只有二条： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 &lt;/li&gt;
&lt;li&gt;对于n字节的符号（n&amp;gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其以字节为单位对Unicode进行编码。从Unicode到UTF-8的编码方式如 下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Unicode编码(16进制)&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;UTF-8 字节流(二进制)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;000000 - 00007F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0xxxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;000080 - 0007FF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;110xxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;000800 - 00FFFF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1110xxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;010000 - 10FFFF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;假如中文字”汉”对应的unicode是6C49(这是用十六进制表示,用十进制表示是27721为啥不用十进制表示呢?很明显用十六进制表示要短点.其实都是等价的没啥不一样.就跟你说60分钟和1小时一样.).你可能会问当用程序打开一个文件时我们怎么知道那是用的UTF-8还是UTF-16啊.自然会有点啥标志,在文件的开头几个字节就是标志.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EF BB BF 表示UTF-8&lt;/li&gt;
&lt;li&gt;FE FF 表示UTF-16.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;UTF-32&quot;&gt;&lt;a href=&quot;#UTF-32&quot; class=&quot;headerlink&quot; title=&quot;UTF-32&quot;&gt;&lt;/a&gt;UTF-32&lt;/h4&gt;&lt;p&gt;前面说的都是unicode的第一个版本.但65536显然不算太多的数字,用它来表示常用的字符是没一点问题.足够了,但如果加上很多特殊的就也不够了.于是从1996年开始又来了第二个版本.用四个字节表示所有字符.这样就出现了UTF-8,UTF16,UTF-32.原理和之前肯定是完全一样的,UTF-32就是把所有的字符都用32bit也就是4个字节来表示.然后UTF-8,UTF-16就视情况而定了.UTF-8可以选择1至8个字节中的任一个来表示.而UTF-16只能是选两字节或四字节..由于unicode版本2的原理完全是一样的,就不多说了.&lt;/p&gt;
&lt;p&gt;前面说了要知道具体是哪种编码方式,需要判断文本开头的标志,下面是所有编码对应的开头标志&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;标志&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;EF BB BF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UTF-8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FE FF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UTF-16/UCS-2, little endian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FF FE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UTF-16/UCS-2, big endian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FF FE 00 00&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UTF-32/UCS-4, little endian.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;00 00 FE FF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UTF-32/UCS-4, big-endian.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;UCS就是前面说的ISO制定的标准,和Unicode是完全一样的,只不过名字不一样.ucs-2对应utf-16,ucs-4对应UTF-32.UTF-8是没有对应的UCS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 总之说到底，Unicode是一种字符与数字间的映射关系，而utf-8等不同的编码则是其在计算机上的实现方式而已。 &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自从上个学期简单地了解了字符编码之后就一直没有再过多的理会它。对字符编码这一块总是似懂非懂，今天突然就想把它彻底地了解一遍，不想再有这种疑惑的感觉。重新理顺了一遍字符编码之间的关系，以及utf-8、utf-16以及utf-32和Unicode之间的那些千丝万缕的关系。&lt;/p&gt;
&lt;h3 id=&quot;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot;&gt;&lt;a href=&quot;#首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot; class=&quot;headerlink&quot; title=&quot;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&quot;&gt;&lt;/a&gt;首先需要明确的是Unicode是一套字符编码规范，而UTF-8、UTF-16以及UTF-32只是它的一种实现方式！！！任何的字符在计算机里都是已bit来存储的，更上层一点，每个字符其实都是已byte流来进行存储使用，依照编码方式的不同，在使用时按照规定的编码方式来读取映射，从而达到需要的效果。说白了其实Unicode就是一种数学映射关系而已。&lt;/h3&gt;&lt;h2 id=&quot;首先我们来看看关于Unicode的介绍&quot;&gt;&lt;a href=&quot;#首先我们来看看关于Unicode的介绍&quot; class=&quot;headerlink&quot; title=&quot;首先我们来看看关于Unicode的介绍&quot;&gt;&lt;/a&gt;首先我们来看看关于Unicode的介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&lt;br&gt;可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。&lt;br&gt;Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询&lt;a href=&quot;http://unicode.org&quot;&gt;Unicode官网&lt;/a&gt;，或者专门的汉字对应表。&lt;br&gt;
    
    </summary>
    
      <category term="必备知识" scheme="http://blublu.xyz/categories/knowledge/"/>
    
    
      <category term="碎片" scheme="http://blublu.xyz/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>密码加密——计时攻击</title>
    <link href="http://blublu.xyz/security/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E2%80%94%E2%80%94%E8%AE%A1%E6%97%B6%E6%94%BB%E5%87%BB/"/>
    <id>http://blublu.xyz/security/密码加密——计时攻击/</id>
    <published>2016-03-06T06:20:29.000Z</published>
    <updated>2016-07-18T02:46:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;今天在扒加密相关的代码的时候发现了一段比较有意思的代码。google后才知道“计时攻击”（Timing Attack）这么个东西的存在，安全方面真心弱鸡啊。看来要补的东西还是很多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###先贴代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;slowEquals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] a, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; diff = a.length ^ b.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; a.length &amp;amp;&amp;amp; i &amp;lt; b.length; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    diff |= a[i] ^ b[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; diff == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;其实刚开始看的时候大多数人肯定第一感觉就是：这就是一个比较字符串啊，有什么稀奇的？？？但是接着看的时候就会发现不一样了，略带一点点蛋疼。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码中使用了异或运算符“&lt;code&gt;^&lt;/code&gt;”（XOR）来比较两个整数是否相等，而不是“&lt;code&gt;==&lt;/code&gt;”。当且仅当两位相等时，异或的结果才是0。因为&lt;code&gt;0 XOR 0 = 0&lt;/code&gt;, &lt;code&gt;1 XOR 1 = 0&lt;/code&gt;, &lt;code&gt;0 XOR 1 = 1&lt;/code&gt;, &lt;code&gt;1 XOR 0 = 1&lt;/code&gt;。应用到整数中每一位就是说，当且仅当字节两个整数各位都相等，结果才是0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码中的第一行，比较a.length和b.length，相同的话diff是0，否则diff非0。然后使用异或比较数组中各字节，并且将结果和diff求或。如果有任何一个字节不相同，diff就会变成非0的值。因为或运算没有“置0”的功能，所以循环结束后diff是0的话只有一种可能，那就是循环前两个数组长度相等&lt;code&gt;（a.length == b.length）&lt;/code&gt;，并且数组中每一个字节都相同（每次异或的结果都非0）。&lt;br&gt;我们使用XOR而不是“&lt;code&gt;==&lt;/code&gt;”来比较整数的原因是：“&lt;code&gt;==&lt;/code&gt;”通常被翻译/编译/解释为带有分支的语句。例如C语言中的“&lt;code&gt;diff &amp;amp;= a == b&lt;/code&gt;”可能在x86机器成被编译为如下汇编语言：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MOV EAX, [A]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CMP [B], EAX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JZ equal&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JMP done&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;equal:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;AND [VALID], 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;done:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;AND [VALID], 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的分支导致代码运行的时间不固定，决定于两个整数相等的程度和CPU内部的跳转预测机制（branch prediction）。&lt;/p&gt;
&lt;p&gt;而C语言代码“diff |=a ^ b”会被编译为下面的样子，它执行的时间和两个整数是什么样的情况无关。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MOV EAX, [A]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;XOR EAX, [B]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OR [DIFF], EAX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;计时攻击，属于旁路攻击的一种, 所谓旁路攻击就是通过对系统的物理学分析和实现方式分析, 而不是密码学分析或暴力破解, 来尝试破解密码学系统的行为.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当攻击者准备256个字符串，它们的哈希值包第一字节包含了所有的情况。然后用它们去尝试系统登录，记录返回结果所需的时间，耗时最长的那个就是第一字节猜对的那个。虽然是微秒级别，但通过大量数据的采集，是完全可以推测到所有的哈希值的。然后通过离线计算，绕过系统的登录验证次数的限制。&lt;/p&gt;
&lt;p&gt;可能乍看之下几乎没有人能做到，但是这个世界就是这么神奇，还真有人做到了，而且已经运到到实际项目中。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今天在扒加密相关的代码的时候发现了一段比较有意思的代码。google后才知道“计时攻击”（Timing Attack）这么个东西的存在，安全方面真心弱鸡啊。看来要补的东西还是很多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###先贴代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;slowEquals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] a, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; diff = a.length ^ b.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; a.length &amp;amp;&amp;amp; i &amp;lt; b.length; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    diff |= a[i] ^ b[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; diff == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="安全" scheme="http://blublu.xyz/categories/security/"/>
    
    
      <category term="碎片" scheme="http://blublu.xyz/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Java服务端解析http请求（一）</title>
    <link href="http://blublu.xyz/programming/Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A7%A3%E6%9E%90http%E8%AF%B7%E6%B1%82%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blublu.xyz/programming/Java服务端解析http请求（一）/</id>
    <published>2016-02-01T10:18:36.000Z</published>
    <updated>2016-07-21T03:52:36.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;现在服务端的设计都有许多的框架可以选择，很方便的完成我们的需求。虽然说程序员大多数站在前人的肩膀上，用前人造的轮子来造汽车。何况一些框架已经不仅仅是轮子那么简单了，甚至可以是一辆马上就可以开的跑车。但是直接使用框架和现成工具并不利于我们的学习，从学习的角度来说，我们还是最好能够自己深入了解技术原理并自己实现它。虽然自己写的程序功能可能不及它们强大，但是只要学会了其中的原理，就已经达到了我们的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;平时在进行web解析的时候，我们一般都使用tomcat这个庞然大物来对client的请求进行解析，它返回给我们一个完整的HttpRequest对象，其中含有client向我们传输的所需要的各种信息。今天我们就来说说如何模仿tomcat服务器解析程序的雏形，自己写一个http服务器解析程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端与服务端的通信有三步：&lt;/strong&gt;&lt;br&gt;1.与服务端进行连接(当然，连接还是用socket来实现的)&lt;br&gt;2.向服务端发出请求&lt;br&gt;3.服务端返回结果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/超文本传输协议&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http&lt;/a&gt;其实就是一个web交互协议，通过一套完整的协议约束，对于不同的浏览器只要能够解析http协议就可以和服务器进行通信。&lt;/p&gt;
&lt;p&gt;我们在设计一个服务端的时候，当连接完成后的第一步就是能够正确解析客户端发出的请求。&lt;br&gt;在原始的时候，没有协议，我们一般都是通过在向服务器发送命令的时候在String前含有几位保留字符，用数字或者其他来标识此条命令，告诉服务器应该使用哪个部分进行解析，但是当程序扩展之后，这种方式难免不利于维护。同时也不利于复用，于是各种通信协议就产生了，在web上用得最多的就是http协议。今天要说的就是http服务器的解析。&lt;/p&gt;
&lt;p&gt;在服务端，通过一个客户端线程，获取客户端的输入流就可以得到一个客户端封装好的http请求信息。而一般来说，一些现成的工具（tomcat）已经帮我们自动对这些信息进行解析。如果我们要自己动手造一个解析程序，此时我们获取到的信息首先是一串字节流，通过解码还原成string，但这还远远达不到我们要求，我们需要一个HttpRequest类来存储request中各个部分的信息。所以第一步就是对这串string进行切割解析。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Kicks off the request&#39;s parsing. Called inside constructor.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IOException      When an InputStream can&#39;t be retreived from the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *                          socket.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; SocketException  When the client breaks early. This is a browser&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *                          issue, and not a server issue, but it gets thrown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *                          upstream because it can&#39;t be dealt with until it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *                          gets to the HttpServer.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; HttpException    When headers aren&#39;t in key/value pairs separated&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *                          by &quot;: &quot;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpServer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parseRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, SocketException, HttpException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Used to read in from the socket&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BufferedReader input = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(getConnection().getInputStream()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    StringBuilder requestBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*  The HTTP spec (Section 4.1) says that a blank first line should be&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ignored, and that the next line SHOULD have the request line. To be&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        extra sure, all initial blank lines are discarded.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String firstLine = input.readLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstLine == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpException(&lt;span class=&quot;string&quot;&gt;&quot;Input is returning nulls...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (firstLine.isEmpty()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        firstLine = input.readLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// start with the first non-empty line.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setRequestLine(firstLine);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    requestBuilder.append(getRequestLine());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    requestBuilder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*  Every line after the first, but before an empty line is a header,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        which is a key/value pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        The key is before the &quot;: &quot;, the value, after&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; parse this to spec. Spec says it&#39;s cool to have any number of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        whitespace characters following the colon, and the values&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        can be spread accross multiple lines provided each following line&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        starts with a whitespace character.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        For more information, see issue 12 and RFC 2616#4.2.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Issue 12: https://github.com/dkuntz2/java-httpserver/issues/12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RFC 2616#4.2: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String line = input.readLine(); line != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !line.isEmpty(); line = input.readLine()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBuilder.append(line);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBuilder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String[] items = line.split(&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (items.length == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpException(&lt;span class=&quot;string&quot;&gt;&quot;No key value pair in \n\t&quot;&lt;/span&gt; + line);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String value = items[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt; items.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            value += &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + items[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getHeaders().put(items[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*  If the client sent over a POST, PUT, or DELETE request, there&#39;s *probably* still data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        in the stream. This reads in only the number of chars specified in the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;Content-Length&quot; header.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((getRequestType().equals(POST_REQUEST_TYPE) || getRequestType().equals(DELETE_REQUEST_TYPE) || getRequestType().equals(PUT_REQUEST_TYPE)) &amp;amp;&amp;amp; getHeaders().containsKey(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contentLength = Integer.parseInt(getHeaders().get(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; contentLength; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            b.append((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)input.read());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBuilder.append(b.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBody = b.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String[] data = requestBody.split(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getParams().putAll(parseInputData(data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setHttpRequest(requestBuilder.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Turns an array of &quot;key=value&quot; strings into a map. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Any item in the array missing an &quot;=&quot; is given a value of null.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; data  List of strings in &quot;key=value&quot; form, you know, like HTTP GET&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *              or POST lines?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;  Map of key value pairs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; &lt;span class=&quot;title&quot;&gt;parseInputData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Map&amp;lt;String, String&amp;gt; out = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String item : data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt;) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            out.put(item, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String value = item.substring(item.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  Attempt to URL decode the value, because it *might* be user input.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            If it can&#39;t be decoded, it doesn&#39;t matter, the original, undecoded&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            value is still used.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            value = URLDecoder.decode(value, &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        out.put(item.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, item.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;)), value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; out;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;信息如下:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/index&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;User-Agent&lt;/span&gt;: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: localhost:10086&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept&lt;/span&gt;: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Language&lt;/span&gt;: zh-CN,zh;q=0.9,en;q=0.8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Charset&lt;/span&gt;: iso-8859-1, utf-8, utf-16, *;q=0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Encoding&lt;/span&gt;: deflate, gzip, x-gzip, identity, *;q=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: Keep-Alive&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Tomcat中所有的请求信息我们都已经封装好放入一个HttpRequest对象中；我们自己模仿的解析程序也是如此，将解析后的字符串放入一个HttpRequest对象中，以供后续使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HttpRequst类源码如下:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;232&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;233&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;234&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;235&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;236&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;237&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;238&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;239&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;240&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;241&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;242&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;243&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;244&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;245&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;246&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;247&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;248&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;249&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;250&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;251&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;252&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;253&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;254&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;255&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;257&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;258&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;259&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;260&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;261&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;262&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;263&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;264&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;265&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;266&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;267&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;268&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;269&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;270&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;271&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;272&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;273&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;274&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;275&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;276&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;277&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;278&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;279&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;280&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;281&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;282&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;283&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;284&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;285&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;286&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;287&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;288&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;289&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;290&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;291&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;292&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;293&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;294&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;295&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;296&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;297&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;298&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;299&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;300&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;301&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;302&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;303&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;304&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;305&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;306&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;307&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;308&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;309&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;310&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;311&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;312&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;313&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;314&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;315&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;316&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;317&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;318&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;319&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;320&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;321&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;322&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;323&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;324&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;325&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;326&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;327&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;328&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;329&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;330&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;331&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;332&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;333&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;334&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;335&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;336&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;337&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;338&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;339&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;340&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;341&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;342&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;343&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;344&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;345&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;346&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;347&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;348&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;349&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;350&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;351&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;352&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;353&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;354&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;355&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;356&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;357&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;358&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;359&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;360&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;361&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;362&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;363&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;364&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;365&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;366&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;367&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;368&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;369&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;370&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;371&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;372&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;373&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;374&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;375&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;376&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;377&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;378&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;379&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;380&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;381&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;382&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;383&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;384&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;385&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;386&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;387&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;388&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;389&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;390&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;391&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;392&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;393&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;394&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;395&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;396&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;397&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;398&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;399&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;400&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;401&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;402&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;403&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;404&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;405&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;406&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;407&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;408&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;409&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;410&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;411&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;412&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;413&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;414&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;415&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;416&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;417&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;418&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;419&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;420&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;421&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;422&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;423&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;424&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;425&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;426&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;427&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;428&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;429&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;430&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;431&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;432&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;433&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;434&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;435&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;436&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;437&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;438&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;439&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;440&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;441&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;442&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;443&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;444&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;445&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;446&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;447&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;448&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;449&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;450&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;451&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;452&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;453&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;454&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;455&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;456&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;457&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;458&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;459&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;460&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;461&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;462&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;463&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;464&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;465&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;466&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;467&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;468&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;469&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;470&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;471&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;472&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;473&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;474&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;475&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;476&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;477&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;478&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;479&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;480&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;481&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;482&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;483&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;484&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;485&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;486&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;487&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;488&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;489&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;490&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;491&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;492&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;493&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;494&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;495&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;496&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;497&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;498&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;499&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;501&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;502&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;503&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;504&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;505&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;506&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;507&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;508&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;509&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;510&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;511&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;512&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;513&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;514&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;515&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;516&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;517&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;518&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;519&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;520&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;521&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;522&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;523&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;524&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;525&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;526&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; httpserver;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.Socket;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.SocketException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.URLDecoder;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * An HttpRequest takes an incoming connection and parses out all of the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * relevant data, supposing the connection follows HTTP protocol.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * At present, HttpRequest only knows how to handle HTTP 1.1 requests, and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * doesn&#39;t handle persistent connections. Technically, it could handle an&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * HTTP 1.0 request, because 1.0 doesn&#39;t have persistent connections.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;   &amp;lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *        HTTP 1.1 Spec&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpHandler&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** HTTP GET request type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String GET_REQUEST_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** HTTP POST request type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String POST_REQUEST_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** HTTP HEAD request type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String HEAD_REQUEST_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;HEAD&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** HTTP DELETE request type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String DELETE_REQUEST_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** HTTP PUT request type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PUT_REQUEST_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;PUT&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// used to determine what one does with the request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; HttpRouter router;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// connection with client&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Socket connection;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the handler used to determine what the server actually does&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// with this request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; HttpHandler handler;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the full text of the incoming request, including headers&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// and sent over data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String httpRequest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the request line, or first line of entire request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String requestLine;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the type of request, as in GET, POST, ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String requestType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the protocol the client is using&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String requestProtocol;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// All headers, because they&#39;re all key/value pairs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; headers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The requested path, split by &#39;/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; splitPath = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The path relative to the handler&#39;s path&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String path;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the full path&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String fullPath;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the POST data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; varargs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String requestBody;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Used to parse out an HTTP request provided a Socket and figure out the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * handler to be used.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; connection The socket between the server and client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IOException      When it gets thrown by&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; HttpRequest#parseRequest&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; SocketException  When it gets thrown by&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; HttpRequest#parseRequest&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; HttpException    When something that doesn&#39;t follow HTTP spec&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          occurs.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#parseRequest&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpRouter router, Socket connection)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, SocketException, HttpException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.router = router;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connection.setKeepAlive(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setConnection(connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getConnection().isClosed()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Socket is closed...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            createResponse().respond();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException | HttpException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpResponse &lt;span class=&quot;title&quot;&gt;createResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, HttpException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        parseRequest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        HttpResponse response = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpResponse(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        determineHandler().handle(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Kicks off the request&#39;s parsing. Called inside constructor.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IOException      When an InputStream can&#39;t be retreived from the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          socket.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; SocketException  When the client breaks early. This is a browser&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          issue, and not a server issue, but it gets thrown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          upstream because it can&#39;t be dealt with until it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          gets to the HttpServer.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; HttpException    When headers aren&#39;t in key/value pairs separated&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                          by &quot;: &quot;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpServer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parseRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, SocketException, HttpException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Used to read in from the socket&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        BufferedReader input = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(getConnection().getInputStream()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder requestBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  The HTTP spec (Section 4.1) says that a blank first line should be&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ignored, and that the next line SHOULD have the request line. To be&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            extra sure, all initial blank lines are discarded.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String firstLine = input.readLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstLine == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpException(&lt;span class=&quot;string&quot;&gt;&quot;Input is returning nulls...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (firstLine.isEmpty()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            firstLine = input.readLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// start with the first non-empty line.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setRequestLine(firstLine);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBuilder.append(getRequestLine());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestBuilder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  Every line after the first, but before an empty line is a header,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            which is a key/value pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            The key is before the &quot;: &quot;, the value, after&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; parse this to spec. Spec says it&#39;s cool to have any number of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            whitespace characters following the colon, and the values&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            can be spread accross multiple lines provided each following line&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            starts with a whitespace character.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            For more information, see issue 12 and RFC 2616#4.2.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Issue 12: https://github.com/dkuntz2/java-httpserver/issues/12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            RFC 2616#4.2: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String line = input.readLine(); line != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !line.isEmpty(); line = input.readLine()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            requestBuilder.append(line);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            requestBuilder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String[] items = line.split(&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (items.length == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpException(&lt;span class=&quot;string&quot;&gt;&quot;No key value pair in \n\t&quot;&lt;/span&gt; + line);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String value = items[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt; items.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                value += &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + items[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            getHeaders().put(items[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  If the client sent over a POST, PUT, or DELETE request, there&#39;s *probably* still data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            in the stream. This reads in only the number of chars specified in the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &quot;Content-Length&quot; header.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((getRequestType().equals(POST_REQUEST_TYPE) || getRequestType().equals(DELETE_REQUEST_TYPE) || getRequestType().equals(PUT_REQUEST_TYPE)) &amp;amp;&amp;amp; getHeaders().containsKey(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contentLength = Integer.parseInt(getHeaders().get(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            StringBuilder b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; contentLength; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                b.append((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)input.read());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            requestBuilder.append(b.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            requestBody = b.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String[] data = requestBody.split(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            getParams().putAll(parseInputData(data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setHttpRequest(requestBuilder.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Turns an array of &quot;key=value&quot; strings into a map. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Any item in the array missing an &quot;=&quot; is given a value of null.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; data  List of strings in &quot;key=value&quot; form, you know, like HTTP GET&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *              or POST lines?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;  Map of key value pairs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt; &lt;span class=&quot;title&quot;&gt;parseInputData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Map&amp;lt;String, String&amp;gt; out = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String item : data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt;) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                out.put(item, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String value = item.substring(item.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*  Attempt to URL decode the value, because it *might* be user input.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                If it can&#39;t be decoded, it doesn&#39;t matter, the original, undecoded&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                value is still used.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                value = URLDecoder.decode(value, &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            out.put(item.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, item.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;)), value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; out;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Figure out what kind of HttpHandler you want, based on the path. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * This uses the statically set &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; HttpRouter&amp;#125; to determine the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * correct HttpHandler to be used for the current request. If there isn&#39;t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * a statically set HttpRouter, a 500 error is sent back to the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * client.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a new instance of some form of HttpHandler.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRouter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRouter#determineHandler&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpHandler&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpHandler &lt;span class=&quot;title&quot;&gt;determineHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (router == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DeathHandler();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String path = getSplitPath().isEmpty() ? &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; : getSplitPath().get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; router.route(path, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Return if the request type is the passed in type.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; requestTypeCheck The type to check.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; whether the request type equals the passed in String.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String requestTypeCheck)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getRequestType().equalsIgnoreCase(requestTypeCheck);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Sets the requestLine, and all derived items. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Based off of the passed in line, the request type, request path, and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * request protocol can be set.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; line  The first line in an HTTP request. Should be in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *              &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; [type] [full path] [protocol]&amp;#125; form.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; HttpException  When the first line does not contain two spaces,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                        signifying that the passed in line is not in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                        HTTP 1.1. When the type is not an expected type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *                        (currently GET, POST, and HEAD).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#setRequestType&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#setFullPath&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#setRequestProtocol&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRequestLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String line)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; HttpException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.requestLine = line;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  Split apart the request line by spaces, as per the protocol.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            The request line should be:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            [request type] [path] [protocol]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String[] splitty = requestLine.trim().split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (splitty.length != &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpException(&lt;span class=&quot;string&quot;&gt;&quot;Request line has a number of spaces other than 3.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Set the request type&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setRequestType(splitty[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].toUpperCase());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// set the path&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setFullPath(splitty[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// set the protocol type&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setRequestProtocol(splitty[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Return the request line.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;  the request line.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getRequestLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; requestLine;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Set the full path, and path list. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Because the path list is derived from the full path, it&#39;s set at the same&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * time.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; inPath  The full requested path (in `/path/to/request` form)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#setPath&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#setSplitPath&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFullPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String inPath)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fullPath = inPath;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setPath(inPath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setSplitPath(inPath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Gets the full path of the request.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; The full path.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getFullPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fullPath;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.path = path;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Gets the path relative to the handler&#39;s path.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; Everything in the path after the handler&#39;s path.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; path;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Given a full path, set the splitPath to the path, split by `/`. &amp;lt;p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * If there&#39;s a query string attached to the path, it gets removed from the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * splitPath, and the request&#39;s associated GET data is parsed from the query&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * string.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; HttpRequest#getGetData&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSplitPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String fullPath)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  Split apart the path for future reference by the handlers&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            The split path should be used by handlers to figure out what&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            action should be taken. It&#39;s also used to parse out GET request&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            data.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            The first character *should* always be a `/`, and that could cause&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            an error with splitting (as in, the first split could be an empty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            string, which we don&#39;t want).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String segment : fullPath.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (segment.isEmpty()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            getSplitPath().add(segment);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getSplitPath().isEmpty()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*  Parse out any GET data in the request URL.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            This could occur on any request.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getSplitPath().get(getSplitPath().size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).indexOf(&lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;) != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String lastItem = getSplitPath().get(getSplitPath().size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// remove the ? onward from the last item in the path, because that&#39;s not&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// part of the requested URL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            getSplitPath().set(getSplitPath().size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, lastItem.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        lastItem.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// split apart the request query into an array of &quot;key=value&quot; strings.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String[] data = lastItem.substring(lastItem.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Set the GET data to the GET data...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            getParams().putAll(parseInputData(data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSplitPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;String&amp;gt; path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.splitPath = path;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Gets the path relative to the handler&#39;s path split by &#39;/&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; A List of Strings&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;getSplitPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; splitPath;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Socket connection)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.connection = connection;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Socket &lt;span class=&quot;title&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connection;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;String, String&amp;gt; headers)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.headers = headers;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, String&amp;gt; &lt;span class=&quot;title&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; headers;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;String, String&amp;gt; data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.params = data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, String&amp;gt; &lt;span class=&quot;title&quot;&gt;getParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; params;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;String, String&amp;gt; data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.params.putAll(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.params.get(key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeVarargs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;String&amp;gt; data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.varargs.addAll(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;getVarargs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.varargs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setHttpRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String httpRequest)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.httpRequest = httpRequest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getHttpRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; httpRequest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRequestType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String requestType)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.requestType = requestType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getRequestType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; requestType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRequestProtocol&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String requestProtocol)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.requestProtocol = requestProtocol;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getRequestProtocol&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; requestProtocol;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpHandler handler)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handler = handler;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpHandler &lt;span class=&quot;title&quot;&gt;getHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handler;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRouter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpRouter router)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.router = router;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpRouter &lt;span class=&quot;title&quot;&gt;getRouter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; router;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getRequestBody&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; requestBody;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;HttpRequest from &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(getConnection().getLocalAddress().getHostAddress());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n\t&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;Request Line: &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(getRequestLine());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n\t\t&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;Request Type &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(getRequestType());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;\n\t\t&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(&lt;span class=&quot;string&quot;&gt;&quot;Request Path &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        builder.append(getFullPath());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;今天主要就先说说封装好请求的HttpRequest类，下一节我们将封装进行应答的HttpResponse类&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现在服务端的设计都有许多的框架可以选择，很方便的完成我们的需求。虽然说程序员大多数站在前人的肩膀上，用前人造的轮子来造汽车。何况一些框架已经不仅仅是轮子那么简单了，甚至可以是一辆马上就可以开的跑车。但是直接使用框架和现成工具并不利于我们的学习，从学习的角度来说，我们还是最好能够自己深入了解技术原理并自己实现它。虽然自己写的程序功能可能不及它们强大，但是只要学会了其中的原理，就已经达到了我们的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;平时在进行web解析的时候，我们一般都使用tomcat这个庞然大物来对client的请求进行解析，它返回给我们一个完整的HttpRequest对象，其中含有client向我们传输的所需要的各种信息。今天我们就来说说如何模仿tomcat服务器解析程序的雏形，自己写一个http服务器解析程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端与服务端的通信有三步：&lt;/strong&gt;&lt;br&gt;1.与服务端进行连接(当然，连接还是用socket来实现的)&lt;br&gt;2.向服务端发出请求&lt;br&gt;3.服务端返回结果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/超文本传输协议&quot;&gt;http&lt;/a&gt;其实就是一个web交互协议，通过一套完整的协议约束，对于不同的浏览器只要能够解析http协议就可以和服务器进行通信。&lt;/p&gt;
&lt;p&gt;我们在设计一个服务端的时候，当连接完成后的第一步就是能够正确解析客户端发出的请求。&lt;br&gt;在原始的时候，没有协议，我们一般都是通过在向服务器发送命令的时候在String前含有几位保留字符，用数字或者其他来标识此条命令，告诉服务器应该使用哪个部分进行解析，但是当程序扩展之后，这种方式难免不利于维护。同时也不利于复用，于是各种通信协议就产生了，在web上用得最多的就是http协议。今天要说的就是http服务器的解析。&lt;/p&gt;
&lt;p&gt;在服务端，通过一个客户端线程，获取客户端的输入流就可以得到一个客户端封装好的http请求信息。而一般来说，一些现成的工具（tomcat）已经帮我们自动对这些信息进行解析。如果我们要自己动手造一个解析程序，此时我们获取到的信息首先是一串字节流，通过解码还原成string，但这还远远达不到我们要求，我们需要一个HttpRequest类来存储request中各个部分的信息。所以第一步就是对这串string进行切割解析。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="Java" scheme="http://blublu.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java与C++的异同</title>
    <link href="http://blublu.xyz/programming/Java%E4%B8%8EC++%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>http://blublu.xyz/programming/Java与C++的异同/</id>
    <published>2016-01-31T05:27:48.000Z</published>
    <updated>2016-07-18T02:53:40.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;C++与Java的区别大致分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java不支持的C++特性&lt;/li&gt;
&lt;li&gt;Java的独特之处&lt;/li&gt;
&lt;li&gt;C++和Java都有但是不相同的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Java摈弃的C-的内容&quot;&gt;&lt;a href=&quot;#Java摈弃的C-的内容&quot; class=&quot;headerlink&quot; title=&quot;Java摈弃的C++的内容&quot;&gt;&lt;/a&gt;Java摈弃的C++的内容&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;有相当一部分C++的特性Java不再支持。在某些情况下，一个特殊的C++特性和Java的运行环境不想关。另一情况下，Java的设计者摈弃了C++中某些重复的内容。还有就是出于对网络应用运行安全的考虑，Java不再支持某些C++的特点。
Java与C++之间最大的不同就是Java不再支持指针，指针是使C++语言成为世界上功能最强大语言的主要原因。但是对于指针的使用有着一定程序的危险。
Java不支持指针出于以下两个原因：
（1）指针本身就不安全。如，使用C++的状态指针，可以访问程序代码和数据段外的内存地址。一个恶意程序可以利用这个特点破坏系统，完成一次或多次非法的访问（获取你的密码）或是违反安全限制。
（2）即使指针可以被限制在Java的运行系统中（理论上），但是设计者仍然认为它的使用是麻烦的Java中不存在指针，所以也没有-&amp;gt;操作符
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;细举Java中的“省略”内容：&quot;&gt;&lt;a href=&quot;#细举Java中的“省略”内容：&quot; class=&quot;headerlink&quot; title=&quot;细举Java中的“省略”内容：&quot;&gt;&lt;/a&gt;细举Java中的“省略”内容：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;（1）Java不再包含结构或者联合。在可以完全包含它们的类出现之后，这些结构就是多余的
（2）Java不再支持操作符重载。操作符的重载在某些情况下造成类C++程序的含糊不清，它带来的麻烦要远远大于它带来的好处
（3）Java中不再包括预处理，也不再支持预处理命令。预处理在C++语言中已经不如在C中那么重要，Java中就彻底弃用了它
（4）Java不支持自动的类型转换，因为这种类型转换会导致精度的降低。在Java中，如果要将长整型转换为整型的时候，必须显式强制执行类型转换。
（5）在Java中的代码必须封装在一个或多个类中，所以Java中不再包括所谓全局变量或是全局函数的概念。
（6）Java中不再允许默认的参数，在C++中，当过程调用时存在没有对应值的参数的时候可以使用一个预先指定的值，Java中不允许这样的做法。
（7）Java不支持多重继承，不允许一个子类继承多个父类
（8）Java支持构造函数，但不支持析构函数，Java增加了finalize()函数。
（9）Java不支持typedef.
（10）Java中不能声明一个无符号的整数。
（11）Java不再支持goto语句
（12）Java没有delete操作符
（13）Java中的《and》不再重载I/O操作
（14）Java中，对象只能由引用传递，C++中对象可由值或引用传递。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Java的新特性：&quot;&gt;&lt;a href=&quot;#Java的新特性：&quot; class=&quot;headerlink&quot; title=&quot;Java的新特性：&quot;&gt;&lt;/a&gt;Java的新特性：&lt;/h3&gt;&lt;p&gt;Java的许多特点是C++没有的，比如多线程，包和接口，还有其它许多独特多之处。&lt;br&gt;（1）多线程允许两个或者多个相同的线程并发运行。这是一种由语言级支持的并发机制。而C++中并没有这样的机制。如果要并发执行一个C++的程序，必须利用操作系统的功能手工启动，虽然这样也可以执行两个或多个线程，但是很麻烦。&lt;br&gt;（2）C++中没有可以和Java包对应的特性。相对接近的就是用一个公用头文件的一组库函数。而C++中构建和使用函数库与在Java中构建包和使用包是完全不同的方法。&lt;br&gt;（3）Java的接口与C++中的抽象类很像（C++中的抽象类定义为包括至少一个纯虚函数的类）。相同之处就是，Java中的接口与C++中的抽象类不能创建一个实例，两都都用于指定一个子类实现的一致的接口。两者之间最大的区别就在于接口对于这样的功能的实现更为清楚。&lt;br&gt;（4）Java提供一个流线型的内存分配机制，与C++相同，Java支持new关键字，但不支持delete关键字。当一个对象的最后一个引用撤销的时候，对象本身被自动的删除，并进行内存垃圾回收。&lt;br&gt;（5）Java丢弃了C++的标准库，将它替换成自己的API集合类，它们在功能上是相似的，但名字和参数有着明显的不同。同时，因为所有的Java API库都是面向对象的，而C++的标准库中只有一部分是，所以例程调用的方式不同&lt;br&gt;（6）Java增加了break和continue语句以接收标记&lt;br&gt;（7）Java中的char类型是16位的unicode字符。与C++中的wchar_t类型想似，使用时unicode字符增加了代码的可移植性。&lt;br&gt;（8）Java增加了&amp;gt;&amp;gt;&amp;gt;操作，完成无符号的右移&lt;br&gt;（9）除支持单行和多行的注释之外，Java增加了第三种注释方法：文档注释。文档注释以结尾。&lt;br&gt;（10）Java包含一个内置的字符串类型叫做String,String在某种程序上和C++提供的标准string类型相像。当然C++中的String只有在程序中声明后才可以使用，它并不是内置的类型。&lt;/p&gt;
&lt;h3 id=&quot;Java与C-的不同特性：&quot;&gt;&lt;a href=&quot;#Java与C-的不同特性：&quot; class=&quot;headerlink&quot; title=&quot;Java与C++的不同特性：&quot;&gt;&lt;/a&gt;Java与C++的不同特性：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java和C+都支持布尔类型的数据，但是Java实现true和false的方式和C++不同。在C++中，true是非零值，false是零值。在Java中，true和false都是预先定义好的常量，而且是一个布尔表达式能得到的惟一的两个值。虽然C++也定义了true和false,并指定为布尔变量，但C++自动将非零值转换为true,零值转换为false。Java中是不会出现的。&lt;/li&gt;
&lt;li&gt;在创建C++的类的时候，访问说明符应用到一组声明中。在Java中，访问说明符仅应用于其限定的声明中。&lt;/li&gt;
&lt;li&gt;C++支持异常的处理，这与Java类似，但是在C++中无需捕捉一个被引发的异常。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;C++与Java的区别大致分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java不支持的C++特性&lt;/li&gt;
&lt;li&gt;Java的独特之处&lt;/li&gt;
&lt;li&gt;C++和Java都有但是不相同的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Java摈弃的C-的内容&quot;&gt;&lt;a href=&quot;#Java摈弃的C-的内容&quot; class=&quot;headerlink&quot; title=&quot;Java摈弃的C++的内容&quot;&gt;&lt;/a&gt;Java摈弃的C++的内容&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;有相当一部分C++的特性Java不再支持。在某些情况下，一个特殊的C++特性和Java的运行环境不想关。另一情况下，Java的设计者摈弃了C++中某些重复的内容。还有就是出于对网络应用运行安全的考虑，Java不再支持某些C++的特点。
Java与C++之间最大的不同就是Java不再支持指针，指针是使C++语言成为世界上功能最强大语言的主要原因。但是对于指针的使用有着一定程序的危险。
Java不支持指针出于以下两个原因：
（1）指针本身就不安全。如，使用C++的状态指针，可以访问程序代码和数据段外的内存地址。一个恶意程序可以利用这个特点破坏系统，完成一次或多次非法的访问（获取你的密码）或是违反安全限制。
（2）即使指针可以被限制在Java的运行系统中（理论上），但是设计者仍然认为它的使用是麻烦的Java中不存在指针，所以也没有-&amp;gt;操作符
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="C/C++" scheme="http://blublu.xyz/tags/C-C/"/>
    
      <category term="Java" scheme="http://blublu.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux下使用shadowsocks科学上网</title>
    <link href="http://blublu.xyz/hack-gwf/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8shadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://blublu.xyz/hack-gwf/Linux下使用shadowsocks科学上网/</id>
    <published>2016-01-13T14:45:23.000Z</published>
    <updated>2016-07-18T02:46:37.000Z</updated>
    
    <content type="html">&lt;p&gt;因为最近在家，都是在用ubuntu，所以使用unbutu来进行解释。&lt;br&gt;因为shadowsocks在windows和osx都有客户端，所以不再详细说明。可以从github上clone源码自行编译。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用PIP安装很简单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install python-pip&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;接着安装shadowsocks&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install shadowsocks&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;启动SS客户端&lt;br&gt;前两步很简单，可是有人就纳闷了安装好了不知道怎么用，其实可以用sslocal -help来查看帮助就知道了。&lt;/p&gt;
&lt;p&gt;sslocal -s server_ip -p server_port  -l 1080 -k password -t 600 -m aes-256-cfb&lt;/p&gt;
&lt;p&gt;-s表示服务IP, -p指的是服务端的端口，-l是本地端口默认是1080, -k 是密码（要加””）, -t超时默认300,-m是加密方法默认aes-256-cfb，&lt;/p&gt;
&lt;p&gt;可以简单的写为：sslocal -s ip  -p  port -k “password”    #用-s -p -k这三个参数就好，其他的默认将服务端的加密方法设为aes-256-cfb。然后就可以启动代理。&lt;/p&gt;
&lt;p&gt;现在试试打开你的终端，输入sslocal -s 服务端IP  -p  1080 -k “密码” 回车&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;## qt版shadowsocks&lt;/strong&gt;&lt;br&gt;我也是偶然才发现这个版本的shadowsocks的。图形版的嘛。对于一些用户来说也许更方便一些，于是我就把过程顺便在这写一下。&lt;/p&gt;
&lt;p&gt;第一步我们先添加该软件作者的 PPA 源以及密钥。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo add-apt-repository ppa:hzwhuang/ss-qt5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如图：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/f/8e/507293d85caaf4019ba9acbd6ff41.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;接着更新软件源：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后安装 shadowsocks-qt5：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install shadowsocks-qt5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/b/fd/57dcde843c25a1adcd2529b34ac4a.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;安装完成后打开 shadowsocks-qt5，填入对应信息：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/8/a3/74cd8ddea5aa5ac61bf14ed781f07.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后配置一下浏览器就可以科学上网了！&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/f/6d/c206fd9e144eaa2617f0c325797e8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/0/b2/990474a85c8e3c6f87089c815fc0c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###后记：&lt;br&gt;程序员都是很懒的，为了省事我觉得大部分人都会想到要开机自动运行的。于是我在网上找了相关的操作过程，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;br&gt;ubuntu开机后台自动运行&lt;br&gt;现在可以科学上网了，可是每次开机都要手动打开终端输入好长一串命令，关掉终端的时候代理就随着关闭了，这是不是很不舒服啊，至少我感觉是的，虽然我不是什么强迫症患者也不是不愿意动手的孩纸，但是一件事情明显可以有更简单的方法我却用不到那可就不舒服了…&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;写个sh脚本&lt;/p&gt;
&lt;p&gt;我们可以在比如/home下新建个文件叫做dl.sh ,在里面写上我们启动ss客户端需要的命令，然后保存。&lt;/p&gt;
&lt;p&gt;#!/bin/bash&lt;br&gt;#文件名:dl.sh&lt;br&gt;sslocal -s ip -p port  -k “password”&lt;/p&gt;
&lt;p&gt;看可不可以我们到终端执行命令 sh /home/dl.sh ,如果成功的下会有信息输出的。你也可以到浏览器去试试。这个时候你虽然输入的少了，可是关了终端还是会掉的，我们可以让他后台运行 nohup sh /home/dl.sh &amp;amp;试试看关掉终端还可以科学上网不。&lt;/p&gt;
&lt;p&gt;加入开机运行&lt;/p&gt;
&lt;p&gt;现在还不可以，你同样需要开机输入命令才可以。&lt;/p&gt;
&lt;p&gt;这个时候我们需要在/etc下编辑一个叫rc.local 的文件，需要root权限。在终端先su获取root权限如果你有root帐号的话，然后 vim  /etc/rc.local 编辑，在最下面输入 nohup bash /home/dl.sh&amp;gt;/home/d.txt &amp;amp; 保存。&lt;/p&gt;
&lt;p&gt;这个时候你可以reboot重启了，测试下看看能不能后台自动运行，重启后你可以先去看下我们要他输出d.txt，你会发现竟然是/home/dl.sh line 3 :sslocal:command not found,打开浏览器果然是无法连接代理服务器，擦！这什么情况，不能启动？别着急…&lt;/p&gt;
&lt;p&gt;经过一番搜索我们发现原来linux是找不到sslocal这条命令？需要添加路径，我们发现sslocal 和ssserver这两个命令是被存在 /usr/local/bin/下面的，其实不用去profile添加了，直接把这两个文件移动到/bin下（同样需要root权限，你可以在root终端下使用cp复制命令）&lt;/p&gt;
&lt;p&gt;这个时候reboot试试看？没错，现在你不用操心代理的事情了，开机直接科学自由网络冲浪！奔跑吧～少年！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在家，都是在用ubuntu，所以使用unbutu来进行解释。&lt;br&gt;因为shadowsocks在windows和osx都有客户端，所以不再详细说明。可以从github上clone源码自行编译。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用PIP安装很简单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install python-pip&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;接着安装shadowsocks&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install shadowsocks&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="科学上网" scheme="http://blublu.xyz/categories/hack-gwf/"/>
    
    
      <category term="Linux" scheme="http://blublu.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>即使被拖库，也可以保证密码不泄露</title>
    <link href="http://blublu.xyz/security/%E5%8D%B3%E4%BD%BF%E8%A2%AB%E6%8B%96%E5%BA%93%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E5%AF%86%E7%A0%81%E4%B8%8D%E6%B3%84%E9%9C%B2/"/>
    <id>http://blublu.xyz/security/即使被拖库，也可以保证密码不泄露/</id>
    <published>2016-01-12T01:57:31.000Z</published>
    <updated>2016-07-18T02:46:45.000Z</updated>
    
    <content type="html">&lt;p&gt;首先，我们明确一下安全加密方案的终极目标：&lt;/p&gt;
&lt;p&gt;即使在数据被拖库，代码被泄露，请求被劫持的情况下，也能保障用户的密码不被泄露。&lt;/p&gt;
&lt;p&gt;说具体一些，我们理想中的绝对安全的系统大概是这样的：&lt;/p&gt;
&lt;p&gt;首先保障数据很难被拖库。&lt;br&gt;即使数据被拖库，攻击者也无法从中破解出用户的密码。&lt;br&gt;即使数据被拖库，攻击者也无法伪造登录请求通过验证。&lt;br&gt;即使数据被拖库，攻击者劫持了用户的请求数据，也无法破解出用户的密码。&lt;br&gt;如何保障数据不被拖库，这里就不展开讲了。首先我们来说说密码加密。现在应该很少系统会直接保存用户的密码了吧，至少也是会计算密码的 &lt;code&gt;md5&lt;/code&gt; 后保存。&lt;code&gt;md5&lt;/code&gt; 这种不可逆的加密方法理论上已经很安全了，但是随着彩虹表的出现，使得大量长度不够的密码可以直接从彩虹表里反推出来。&lt;/p&gt;
&lt;p&gt;所以，只对密码进行 &lt;code&gt;md5&lt;/code&gt; 加密是肯定不够的。聪明的程序员想出了个办法，即使用户的密码很短，只要我在他的短密码后面加上一段很长的字符，再计算 &lt;code&gt;md5&lt;/code&gt; ，那反推出原始密码就变得非常困难了。加上的这段长字符，我们称为==盐（Salt）==，通过这种方式加密的结果，我们称为 ==加盐 Hash== 。比如：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/a/a0/01a5423571060b8d1d7428749e133.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;上一篇我们讲过，常用的哈希函数中，&lt;code&gt;SHA-256、SHA-512&lt;/code&gt; 会比 &lt;code&gt;md5&lt;/code&gt; 更安全，更难破解，出于更高安全性的考虑，我的这个方案中，会使用 &lt;code&gt;SHA-512&lt;/code&gt; 代替 &lt;code&gt;md5&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/7/9b/9d5bd7bee3d45ebbc4a4bf1484206.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过上面的加盐哈希运算，即使攻击者拿到了最终结果，也很难反推出原始的密码。不能反推，但可以正着推，假设攻击者将 salt 值也拿到了，那么他可以枚举遍历所有 6 位数的简单密码，加盐哈希，计算出一个结果对照表，从而破解出简单的密码。这就是通常所说的暴力破解。&lt;/p&gt;
&lt;p&gt;为了应对暴力破解，我使用了加盐的慢哈希。慢哈希是指执行这个哈希函数非常慢，这样暴力破解需要枚举遍历所有可能结果时，就需要花上非常非常长的时间。比如：&lt;code&gt;bcrypt&lt;/code&gt; 就是这样一个慢哈希函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/7/69/ecd0a880832f59676acbc87e8c520.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过调整 &lt;code&gt;cost&lt;/code&gt; 参数，可以调整该函数慢到什么程度。假设让 &lt;code&gt;bcrypt&lt;/code&gt; 计算一次需要 0.5 秒，遍历 6 位的简单密码，需要的时间为：((26 * 2 + 10)^6) / 2 秒，约 900 年。&lt;/p&gt;
&lt;p&gt;好了，有了上面的基础，来看看我的最终解决方案：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/4/c4/da94c77729b0bfc12eb0274ba0ec4.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;上图里有很多细节，我分阶段来讲：&lt;/p&gt;
&lt;p&gt;######1. 协商密钥&lt;/p&gt;
&lt;p&gt;基于非对称加密的密钥协商算法，可以在通信内容完全被公开的情况下，双方协商出一个只有双方才知道的密钥，然后使用该密钥进行对称加密传输数据。比如图中所用的 ECDH 密钥协商。&lt;/p&gt;
&lt;p&gt;######2. 请求 Salt&lt;/p&gt;
&lt;p&gt;双方协商出一个密钥 SharedKey 之后，就可以使用 SharedKey 作为 AES 对称加密的密钥进行通信，客户端传给服务端自己的公钥 A ，以及加密了的用户ID（uid）。服务端从数据库中查找到该 uid 对于的 Salt1 和 Salt2 ，然后再加密返回给客户端。&lt;/p&gt;
&lt;p&gt;注意，服务端保存的 Salt1 和 Salt2 最好和用户数据分开存储，存到其他服务器的数据库里，这样即使被 SQL 注入，想要获得 Salt1 和 Salt2 也会非常困难。&lt;/p&gt;
&lt;p&gt;######3. 验证密码&lt;/p&gt;
&lt;p&gt;这是最重要的一步了。客户端拿到 Salt1 和 Salt2 之后，可以计算出两个加盐哈希：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;SaltHash1 = bcrypt(SHA512(password), uid + salt1, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SaltHash2 = SHA512(SaltHash1 + uid + salt2)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 SaltHash2 做为 AES 密钥，加密包括 uid，time，SaltHash1，RandKey 等内容传输给服务端：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Ticket = AES(SaltHash2, uid + time + SaltHash1 + RandKey)`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;AES(SharedKey, Ticket)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务端使用 SharedKey 解密出 Ticket 之后，再从数据库中找到该 uid 对应的 SaltHash2 ，解密 Ticket ，得到 SaltHash1 ，使用 SaltHash1 重新计算 SaltHash2 看是否和数据库中的 SaltHash2 一致，从而验证密码是否正确。&lt;/p&gt;
&lt;p&gt;校验两个哈希值是否相等时，使用时间恒定的比较函数，防止试探性攻击。&lt;/p&gt;
&lt;p&gt;time 用于记录数据包发送的时间，用来防止录制回放攻击。&lt;/p&gt;
&lt;p&gt;######4.加密传输&lt;/p&gt;
&lt;p&gt;密码验证通过后，服务端生成一个随机的临时密钥 TempKey（使用安全的随机函数），并使用 RandKey 做为密钥，传输给客户端。之后双方的数据交互都通过 TempKey 作为 AES 密钥进行加密。&lt;/p&gt;
&lt;p&gt;假设被拖库了&lt;/p&gt;
&lt;p&gt;以上就是整个加密传输、存储的全过程。我们来假设几种攻击场景：&lt;/p&gt;
&lt;p&gt;假设数据被拖库了，密码会泄露吗？&lt;/p&gt;
&lt;p&gt;数据库中的 Salt1 ，Salt2 ， SaltHash2 暴露了，想从 SaltHash2 直接反解出原始密码几乎是不可能的事情。&lt;/p&gt;
&lt;p&gt;假设数据被拖库了，攻击者能不能伪造登录请求通过验证？&lt;/p&gt;
&lt;p&gt;攻击者在生成 Ticket 时，需要 SaltHash1 ，但由于并不知道密码，所以无法计算出 SaltHash1 ，又无法从 SaltHash2 反推 SaltHash1 ，所以无法伪造登录请求通过验证。&lt;/p&gt;
&lt;p&gt;假设数据被拖库了，攻击者使用中间人攻击，劫持了用户的请求，密码会被泄露吗？&lt;/p&gt;
&lt;p&gt;中间人拥有真实服务器所有的数据，仿冒了真实的 Server ，因此，他可以解密出 Ticket 中的 SaltHash1 ，但是 SaltHash1 是无法解密出原始密码的。所以，密码也不会被泄露。&lt;/p&gt;
&lt;p&gt;但是，中间人攻击可以获取到最后的 TempKey ，从而能监听后续的所有通信过程。这是很难解决的问题，因为在服务端所有东西都暴露的情况下，中间人假设可以劫持用户数据，仿冒真实 Server , 是很难和真实的 Server 区分开的。解决的方法也许只有防止被中间人攻击，保证 Server 的公钥在客户端不被篡改。&lt;/p&gt;
&lt;p&gt;假设攻击已经进展到了这样的程度，还有办法补救吗？有。由于攻击者只能监听用户的登录过程，并不知道真实的密码。所以，只需要在服务端对 Salt2 进行升级，即可生成新的 SaltHash2 ，从而让攻击者所有攻击失效。&lt;/p&gt;
&lt;p&gt;具体是这样的：用户正常的登录，服务端验证通过后，生成新的 Salt2 ，然后根据传过来的 SaltHash1 重新计算了 SaltHash2 存入数据库。下次用户再次登录时，获取到的是新的 Salt2 ，密码没有变，同样能登录，攻击者之前拖库的那份数据也失效了。&lt;/p&gt;
&lt;p&gt;##Q &amp;amp; A&lt;/p&gt;
&lt;p&gt;使用 bcrypt 慢哈希函数，服务端应对大量的用户登录请求，性能承受的了吗？&lt;/p&gt;
&lt;p&gt;该方案中，细心一点会注意到， bcrypt 只是在客户端进行运算的，服务端是直接拿到客户端运算好的结果（ SaltHash1 ）后 SHA-512 计算结果进行验证的。所以，把性能压力分摊到了各个客户端。&lt;/p&gt;
&lt;p&gt;为什么要使用两个 Salt 值？&lt;/p&gt;
&lt;p&gt;使用两个 Salt 值，是为了防止拖库后，劫持了用户请求后将密码破解出来。只有拥有密码的用户，才能用第一个 Salt 值计算出 SaltHash1 ，并且不能反推回原始密码。第二个 Salt 值可以加大被拖库后直接解密出 SaltHash1 的难度。&lt;/p&gt;
&lt;p&gt;为什么要动态请求 Salt1 和 Salt2 ？&lt;/p&gt;
&lt;p&gt;Salt 值直接写在客户端肯定不好，而且写死了要修改还得升级客户端。动态请求 Salt 值，还可以实现不升级客户端的情况下，对密码进行动态升级：服务端可定期更换 Salt2 ，重新计算 SaltHash2 ，让攻击者即使拖了一次数据也很快处于失效状态。&lt;/p&gt;
&lt;p&gt;数据库都已经全被拖走了，密码不泄露还有什么意义呢？&lt;/p&gt;
&lt;p&gt;其实是有意义的，正如刚刚提到的升级 Salt2 的补救方案，用户可以在完全不知情的情况下，不需要修改密码就升级了账号体系。同时，保护好用户的密码，不被攻击者拿去撞别家网站的库，也是一份责任。&lt;/p&gt;
&lt;p&gt;欢迎大家针对本文的方案进行讨论，如有不实或者考虑不周的地方，请尽情指出。或者有更好的建议或意见，欢迎交流！&lt;/p&gt;
&lt;p&gt;作者：CoderZh&lt;br&gt;微信关注：hacker-thinking （一个程序员的思考）&lt;br&gt;本文出处：&lt;a href=&quot;http://blog.coderzh.com/2016/01/10/a-password-security-design-example/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.coderzh.com/2016/01/10/a-password-security-design-example/&lt;/a&gt;&lt;br&gt;文章版权归本人所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我们明确一下安全加密方案的终极目标：&lt;/p&gt;
&lt;p&gt;即使在数据被拖库，代码被泄露，请求被劫持的情况下，也能保障用户的密码不被泄露。&lt;/p&gt;
&lt;p&gt;说具体一些，我们理想中的绝对安全的系统大概是这样的：&lt;/p&gt;
&lt;p&gt;首先保障数据很难被拖库。&lt;br&gt;即使数据被拖库，攻击者也无法从中破解出用户的密码。&lt;br&gt;即使数据被拖库，攻击者也无法伪造登录请求通过验证。&lt;br&gt;即使数据被拖库，攻击者劫持了用户的请求数据，也无法破解出用户的密码。&lt;br&gt;如何保障数据不被拖库，这里就不展开讲了。首先我们来说说密码加密。现在应该很少系统会直接保存用户的密码了吧，至少也是会计算密码的 &lt;code&gt;md5&lt;/code&gt; 后保存。&lt;code&gt;md5&lt;/code&gt; 这种不可逆的加密方法理论上已经很安全了，但是随着彩虹表的出现，使得大量长度不够的密码可以直接从彩虹表里反推出来。&lt;/p&gt;
&lt;p&gt;所以，只对密码进行 &lt;code&gt;md5&lt;/code&gt; 加密是肯定不够的。聪明的程序员想出了个办法，即使用户的密码很短，只要我在他的短密码后面加上一段很长的字符，再计算 &lt;code&gt;md5&lt;/code&gt; ，那反推出原始密码就变得非常困难了。加上的这段长字符，我们称为==盐（Salt）==，通过这种方式加密的结果，我们称为 ==加盐 Hash== 。比如：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/a/a0/01a5423571060b8d1d7428749e133.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全" scheme="http://blublu.xyz/categories/security/"/>
    
    
      <category term="Database" scheme="http://blublu.xyz/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>C++中关于数组的引用</title>
    <link href="http://blublu.xyz/programming/C++%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%BC%95%E7%94%A8/"/>
    <id>http://blublu.xyz/programming/C++中关于数组的引用/</id>
    <published>2015-12-14T15:12:41.000Z</published>
    <updated>2016-07-18T02:45:36.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在编译一份代码的时候遇到了引用数组作为形参的函数，后来编译遇到了一些问题，虽然数组可以用指针传递来解决。不过既然碰到了用引用数组来作形参的，我是一定要深究下去的，不撞南墙不回头。随后查看了很多资料。感觉有所理解了。所以记录下来，以备过后查看。&lt;/p&gt;
&lt;p&gt;首先，当传递一个数组作为参数的时候我们通常的做法就是通过传递数组名指针来作为参数的，但是这样就会有一个问题，传递进来之后你不知道它的具体大小，容易引发越界操作的问题。同时有时候我们希望传递进来的数组仅供读取而不允许修改，那么此时我们可以如以下代码所示，在参数中加上const即可&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * ary)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而要确保传进来的数组能够控制大小，可以采用引用的方式。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;ary[] ary首先向右结合，所以这个相当于 (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp;)ary[] ary是个数组，其中的元素是引用。不过这个是非法的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (&amp;amp;ary)[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] ary首先和&amp;amp;结合，所以ary是引用，引用的对象是数组&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么我们可以得出&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp; &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//wrong&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//ok&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;再列举几个比较清晰的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;using namespace std;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void function_test(int (&amp;amp;ary)[5])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; sizeof(ary)&amp;lt;&amp;lt;endl;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void function_test(int (&amp;amp;ary)[10])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; sizeof(ary)&amp;lt;&amp;lt;endl;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void function_test1(int (&amp;amp;ary)[5])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; sizeof(ary)&amp;lt;&amp;lt;endl;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int main( void )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int a[5]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int b[10];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function_test(a);    // 函数重载， 输出为 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function_test(b);    // 函数重载， 输出为 40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function_test1(a);   // OK，输出为20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function_test1(b);   // 错误，参数类型不对&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到这样是编译不了的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/0/d0/8321e90e935cfdc80d693a133735f.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接着我们把&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function_test1(b)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注释掉再编译&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/2/ca/c1654d03fe44d1c606147732a8c61.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时编译已经成功了，而且和我们预期的输出是一样的.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在编译一份代码的时候遇到了引用数组作为形参的函数，后来编译遇到了一些问题，虽然数组可以用指针传递来解决。不过既然碰到了用引用数组来作形参的，我是一定要深究下去的，不撞南墙不回头。随后查看了很多资料。感觉有所理解了。所以记录下来，以备过后查看。&lt;/p&gt;
&lt;p&gt;首先，当传递一个数组作为参数的时候我们通常的做法就是通过传递数组名指针来作为参数的，但是这样就会有一个问题，传递进来之后你不知道它的具体大小，容易引发越界操作的问题。同时有时候我们希望传递进来的数组仅供读取而不允许修改，那么此时我们可以如以下代码所示，在参数中加上const即可&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * ary)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而要确保传进来的数组能够控制大小，可以采用引用的方式。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;ary[] ary首先向右结合，所以这个相当于 (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp;)ary[] ary是个数组，其中的元素是引用。不过这个是非法的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (&amp;amp;ary)[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] ary首先和&amp;amp;结合，所以ary是引用，引用的对象是数组&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么我们可以得出&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp; &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//wrong&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//ok&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blublu.xyz/categories/programming/"/>
    
    
      <category term="C/C++" scheme="http://blublu.xyz/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>最短路径-Floyd算法</title>
    <link href="http://blublu.xyz/algorithm/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-Floyd%E7%AE%97%E6%B3%95/"/>
    <id>http://blublu.xyz/algorithm/最短路径-Floyd算法/</id>
    <published>2015-12-13T09:34:15.000Z</published>
    <updated>2016-07-18T02:45:46.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在做数据结构作业的时候遇到最短路径求解问题，书上一大堆工程代码看得真心令人眼花缭乱。醉得不行，不过好在在挣扎中摸索了一番之后大概了解了它的具体思想以及编码方案。故在此记录一下想法。希望对大家有一些理解上的帮助。&lt;/p&gt;
&lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;求一张有向图中任意两点中最短路径方案。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt; 思路：&lt;/strong&gt;&lt;br&gt;依照Floyd算法的总体思想来说，求出最短路径不外乎两种情况，一种是两点之间直接可达，另一种就是通过若干个节点之后也可达。若第一种情况下花费代价最小，那么最短路径即为两点之间直接路径；反之，若通过走若干节点之后到达目的地代价较小，那么最短路径即为第二种情况下的所走过的路径。由此我们可以考虑用邻接矩阵来存储各点之间的权值，通过三层循环刷新之后可以得出两点之间代价最小值。（原先某些不可达点通过第二种方案之后也可达，且代价总为最小）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;假设求从Vi走到Vj的最短路径，通过图我们得到，经过k点要比直接从Vi走到Vj代价小，即Vi+Vk+Vj要优于Vi+Vj。那么很容易我们就可以得到代码，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(Graph[i][k] + Graph[k][j] &amp;lt; Graph[i][j])  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Graph[i][j] = Graph[i][k] + Graph[k][j];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以总的代码就应该是&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;k &amp;lt; Vexs_Len; k++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Vexs_Len; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; Vexs_Len; j++) &amp;#123;	    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(dist_Money[i][k] == Inf || dist_Money[k][j] == Inf) &amp;amp;&amp;amp; dist_Money[i][k] + dist_Money[k][j] &amp;lt; dist_Money[i][j])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				dist_Money[i][j] = dist_Money[i][k] + dist_Money[k][j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    		path[i][j] = path[k][j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个k的位置很重要，似乎把k放在最里层更合乎我们的实际想法。但其实如果把k放在内层，则会出现ij位置过早确定，如果有其余点代价更小的时候则无法刷新。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做数据结构作业的时候遇到最短路径求解问题，书上一大堆工程代码看得真心令人眼花缭乱。醉得不行，不过好在在挣扎中摸索了一番之后大概了解了它的具体思想以及编码方案。故在此记录一下想法。希望对大家有一些理解上的帮助。&lt;/p&gt;
&lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;求一张有向图中任意两点中最短路径方案。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt; 思路：&lt;/strong&gt;&lt;br&gt;依照Floyd算法的总体思想来说，求出最短路径不外乎两种情况，一种是两点之间直接可达，另一种就是通过若干个节点之后也可达。若第一种情况下花费代价最小，那么最短路径即为两点之间直接路径；反之，若通过走若干节点之后到达目的地代价较小，那么最短路径即为第二种情况下的所走过的路径。由此我们可以考虑用邻接矩阵来存储各点之间的权值，通过三层循环刷新之后可以得出两点之间代价最小值。（原先某些不可达点通过第二种方案之后也可达，且代价总为最小）。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://blublu.xyz/categories/algorithm/"/>
    
    
      <category term="C/C++" scheme="http://blublu.xyz/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>程序员最恐怖的梦魇是什么</title>
    <link href="http://blublu.xyz/programer/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E6%81%90%E6%80%96%E7%9A%84%E6%A2%A6%E9%AD%87%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://blublu.xyz/programer/程序员最恐怖的梦魇是什么/</id>
    <published>2015-12-07T01:57:46.000Z</published>
    <updated>2016-07-18T02:47:03.000Z</updated>
    
    <content type="html">&lt;p&gt;这是Quora上的一个问题，其中Mick的回答获得了13.5k“赞同”，他如此回忆道：&lt;/p&gt;
&lt;p&gt;曾经有位心理学的博士雇我查一个BUG，程序是他的一个学生写的，经常会出现奇怪的输出。程序的功能是，从文件中读取数据，提出50个问题，进行一系列计算，然后基于这位博士的研究来得出一个分数。程序跑在大学的一台3B2上。他给我演示了程序，确认这个Bug可以重现——每次在问题之间切换的时候，总会闪出一些奇怪的字符。我觉得这应该很简单，所以答应了他，并且我们同意按小时付费。&lt;/p&gt;
&lt;p&gt;Day1&lt;br&gt;我来到这台3B2面前，用那个学生的帐号登录，找到了用C写的源代码，并开始测试。代码可读性非常差，所有的代码都写在了一行，变量名都是三个字母，而且还是随机组合的！真庆幸我当初选择按小时收费。我把代码格式化为习惯的风格，这样看起来多少还能读。&lt;/p&gt;
&lt;p&gt;做完之后，我用curses库移到屏幕上一个点，打印一个问题和答案，然后等待回应。但是在打印出第一行之后，出现了一些乱码，过了大约1/2秒之后，乱码被问题覆盖掉。这个问题应该很容易解决，只有五个地方需要打印信息，所有的地方都出现了一闪而过的乱码。小意思，只要删掉mvpwintw()应该就ok了。我删掉之后开始编译，觉得问题差不多解决了。但是运行的时候，干扰信息又出现了！只是乱码变了，但是症状还是一样！&lt;/p&gt;
&lt;p&gt;我检查了一下代码，发现竟然回到了我改之前的样子！15个文件，混乱的格式，三个字母的变量。当初为什么不备份一下代码呢，真想射自己一枪。我再一次格式化它们，这次把代码放到三个文件中，以不同的名字命名。然后备份了整个文件夹，并且将权限设置为只读。编译之后，一切正常。一运行，这个文件夹中又出现了15个文件！我改过之后的源代码没有被删除，然后干扰信息又回来了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我明白了，这一定是在硬盘的某个地方的代码，在编译的时候会将程序添加到我修改的代码中去。所以我准备搜索一下include区域（/usr/include），因为我们用的是研究的版本，所以除了kernel别的代码都在机器上。头文件太多了，所以在3B2上搜索需要花一些时间。以上，就是第一天的工作了。&lt;/p&gt;
&lt;p&gt;Day2&lt;br&gt;从磁盘的搜索中没有得到什么结果，这说明这些乱码要么是被加密了，要么就是在lib中的某个地方。但是我没有搜到，我决定搜索所有的文本文件，这次花的时间比昨天更长，第二天就这这样过去了。&lt;/p&gt;
&lt;p&gt;Day3&lt;br&gt;没有结果。字符串是加密的。我只好根据所有的头文件来一点一点查了。这会花费相当多的时间，我们同时还警告了学校，可能有人得到了Phelps博士计算机的root权限。但他们却对此并不关心，可能只是一台实验室的计算机吧。&lt;/p&gt;
&lt;p&gt;我打开#include文件，却没有发现代码。后来发现这些都被编译成一个文件了。也没什么关系，毕竟我们有源代码，大不了就重新编译所有的库。&lt;/p&gt;
&lt;p&gt;Days4-6&lt;br&gt;接下来是最难的部分了，我们好不容易向学校的书呆子说明了问题。然后让Mark（我觉得他能做Unix管理员完全是因为娶了Dean的女儿）开始学习编译。最后他终于同意交给我来做，因为他什么都不会。在第6天最后，编译工作终于完成了。&lt;/p&gt;
&lt;p&gt;我拿出修改之后的代码，重新开始编译。一切正常，然后我运行了一下，天呐！这问题又出现了。源代码分成了15个文件，干扰信息又出来了。简直跟魔法一样，我觉得自己被打败了，问题肯定不在源代码里。Phelps博士也有点不乐意了，他觉得这么长时间，即使重新写一个也该完成了。“当然”，我失落地说，“你是对的，说不定重写比较好。”“好的，我们明天开始重写。”博士说。&lt;/p&gt;
&lt;p&gt;Day7&lt;br&gt;见鬼去吧，我不会认输的！我跟Phelps博士说：“你不用付给我钱了，只要给我时间，我一定要找到这个bug。”&lt;/p&gt;
&lt;p&gt;Days8-14&lt;br&gt;我学聪明了，他一定是修改了一些库，我开始研究编译出来的汇编（虽然我之前根本就不懂汇编），从开始学习，到最后看懂汇编代码，花了六天。虽然根本没发现什么异常，完全就是在浪费时间。&lt;/p&gt;
&lt;p&gt;Day 15&lt;br&gt;突然，我意识到，问题可能出在编译器上，一定是。每次编译代码的时候，编译器就会往源代码中添加干扰信息。我以前也听说过这种情况。&lt;/p&gt;
&lt;p&gt;啊耶！我找到了！我们也有编译器的源代码，我查了一下，谢天谢地，终于找到了。编译器链接器中的代码是这样的：&lt;/p&gt;
&lt;p&gt;1)检测所有对fopen（）的调用，在打开的文件中查找Phelps博士的问题，如果找到&lt;br&gt;2）编译的时候，重写15个文件&lt;br&gt;3）使用这15个文件编译博士的程序，在链接的时候会输出-o形式的名字&lt;/p&gt;
&lt;p&gt;编译器被这个学生修改了，以便往Phelps博士的程序中添加代码。&lt;/p&gt;
&lt;p&gt;几天之后，AT&amp;amp;T的技术支持提供了原版的编译器和链接器代码，我们重新编译，替换了被修改的编译器和链接器。&lt;/p&gt;
&lt;p&gt;但是，问题还没有解决。编译器被其他我们没有的源代码污染了。这些代码存在于现在可执行的编译器中，在编译编译器的时候，会加入污染代码。但是它并不修改/usr/src中的代码，而是将其复制到一个隐藏文件夹，修改编译器源代码，编译，最后删除隐藏文件夹。AT&amp;amp;T发现这个问题花了好长时间。这个学生修改了编译器，让编译器重新编译的时候加入污染代码。最后我们不得不从另一台3B2机器上复制过来编译器的字节码文件版本，才终于解决这个问题。&lt;/p&gt;
&lt;p&gt;通过编译器的代码我们还发现，如果编译/sbin/login的话会加入一些后门代码，可以允许任何人使用特定的密码来登入root。这台电脑可以通过调制解调器或Tymnet接入。终于，这件事引起了校方注意。&lt;/p&gt;
&lt;p&gt;这人真是个天才，不过，也太恐怖了！&lt;/p&gt;
&lt;p&gt;其他网友回答&lt;br&gt;Bug只在产品中有，开发版本中却没有或者不可重现&lt;br&gt;bug触发的几率很小很小，却又不能小到可以忽视&lt;br&gt;去改不是你写的代码中的bug，原来写代码的这家伙已经离职了&lt;br&gt;发生bug的地方是99.9%可靠的库，是你绝对不会怀疑的地方&lt;br&gt;几年来很多人尝试去修改的bug，但是没有人成功过&lt;br&gt;存在逻辑错误的bug，只有在运行一段时间之后才会触发&lt;br&gt;debug需要特定领域的知识，正是你不懂的&lt;br&gt;debug的deadline很紧&lt;br&gt;Stack Overflow挂了&lt;br&gt;在Stack Overflow上搜索问题，发现有人一年前问了同样的问题，但是没有人回答。&lt;br&gt;分号键失灵&lt;br&gt;看自己一年以前的代码，有种“这真他妈是我写的”的感觉&lt;br&gt;库没有文档&lt;br&gt;客户又改需求了&lt;br&gt;==写成了=&lt;br&gt;IE（如果你做前端）&lt;br&gt;Github merge冲突&lt;br&gt;在错误的目录下 rm -rf&lt;br&gt;“My code works, I don’t know why”（这句话不需要翻译了）&lt;br&gt;开会，开会，开会……作为程序员让我去死吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是Quora上的一个问题，其中Mick的回答获得了13.5k“赞同”，他如此回忆道：&lt;/p&gt;
&lt;p&gt;曾经有位心理学的博士雇我查一个BUG，程序是他的一个学生写的，经常会出现奇怪的输出。程序的功能是，从文件中读取数据，提出50个问题，进行一系列计算，然后基于这位博士的研究来得出一个分数。程序跑在大学的一台3B2上。他给我演示了程序，确认这个Bug可以重现——每次在问题之间切换的时候，总会闪出一些奇怪的字符。我觉得这应该很简单，所以答应了他，并且我们同意按小时付费。&lt;/p&gt;
&lt;p&gt;Day1&lt;br&gt;我来到这台3B2面前，用那个学生的帐号登录，找到了用C写的源代码，并开始测试。代码可读性非常差，所有的代码都写在了一行，变量名都是三个字母，而且还是随机组合的！真庆幸我当初选择按小时收费。我把代码格式化为习惯的风格，这样看起来多少还能读。&lt;/p&gt;
&lt;p&gt;做完之后，我用curses库移到屏幕上一个点，打印一个问题和答案，然后等待回应。但是在打印出第一行之后，出现了一些乱码，过了大约1/2秒之后，乱码被问题覆盖掉。这个问题应该很容易解决，只有五个地方需要打印信息，所有的地方都出现了一闪而过的乱码。小意思，只要删掉mvpwintw()应该就ok了。我删掉之后开始编译，觉得问题差不多解决了。但是运行的时候，干扰信息又出现了！只是乱码变了，但是症状还是一样！&lt;/p&gt;
&lt;p&gt;我检查了一下代码，发现竟然回到了我改之前的样子！15个文件，混乱的格式，三个字母的变量。当初为什么不备份一下代码呢，真想射自己一枪。我再一次格式化它们，这次把代码放到三个文件中，以不同的名字命名。然后备份了整个文件夹，并且将权限设置为只读。编译之后，一切正常。一运行，这个文件夹中又出现了15个文件！我改过之后的源代码没有被删除，然后干扰信息又回来了。&lt;br&gt;
    
    </summary>
    
      <category term="程序员的那些事" scheme="http://blublu.xyz/categories/programer/"/>
    
    
      <category term="碎片" scheme="http://blublu.xyz/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://blublu.xyz/knowledge/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blublu.xyz/knowledge/正则表达式/</id>
    <published>2015-07-14T10:36:57.000Z</published>
    <updated>2016-07-18T02:46:41.000Z</updated>
    
    <content type="html">&lt;p&gt;字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。&lt;/p&gt;
&lt;p&gt;正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。&lt;/p&gt;
&lt;p&gt;所以我们判断一个字符串是否是合法的Email的方法是：&lt;/p&gt;
&lt;p&gt;创建一个匹配Email的正则表达式；&lt;/p&gt;
&lt;p&gt;用该正则表达式去匹配用户的输入来判断是否合法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。&lt;/p&gt;
&lt;p&gt;在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;00\d&#39;&lt;/span&gt;可以匹配&lt;span class=&quot;string&quot;&gt;&#39;007&#39;&lt;/span&gt;，但无法匹配&lt;span class=&quot;string&quot;&gt;&#39;00A&#39;&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;\d\d\d&#39;&lt;/span&gt;可以匹配&lt;span class=&quot;string&quot;&gt;&#39;010&#39;&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;\w\w\d&#39;&lt;/span&gt;可以匹配&lt;span class=&quot;string&quot;&gt;&#39;py3&#39;&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.可以匹配任意字符，所以：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;py.&#39;&lt;/span&gt;可以匹配&lt;span class=&quot;string&quot;&gt;&#39;pyc&#39;&lt;/span&gt;、&lt;span class=&quot;string&quot;&gt;&#39;pyo&#39;&lt;/span&gt;、&lt;span class=&quot;string&quot;&gt;&#39;py!&#39;&lt;/span&gt;等等。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：&lt;/p&gt;
&lt;p&gt;来看一个复杂的例子：&lt;code&gt;\d{3}\s+\d{3,8}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们来从左到右解读一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\d{3}表示匹配3个数字，例如’010’；&lt;/li&gt;
&lt;li&gt;\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配’ ‘，’ ‘等；&lt;/li&gt;
&lt;li&gt;\d{3,8}表示3-8个数字，例如’1234567’。&lt;br&gt;综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要匹配’010-12345’这样的号码呢？由于’-‘是特殊字符，在正则表达式中，要用’\’转义，所以，上面的正则是&lt;code&gt;\d{3}\-\d{3,8}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，仍然无法匹配’010 - 12345’，因为带有空格。所以我们需要更复杂的匹配方式。&lt;/p&gt;
&lt;h3 id=&quot;进阶&quot;&gt;&lt;a href=&quot;#进阶&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;p&gt;要做更精确地匹配，可以用[]表示范围，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0-9a-zA-Z\_]&lt;/code&gt;可以匹配一个数字、字母或者下划线；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9a-zA-Z\_]+&lt;/code&gt;可以匹配至少由一个数字、字母或者下划线组成的字符串，比如’a100’，’0_Z’，’Py3000’等等；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z\_][0-9a-zA-Z\_]*&lt;/code&gt;可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}&lt;/code&gt;更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A|B&lt;/code&gt;可以匹配A或B，所以&lt;code&gt;[P|p]ython&lt;/code&gt;可以匹配’Python’或者’python’。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;表示行的开头，&lt;code&gt;^\d&lt;/code&gt;表示必须以数字开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;表示行的结束，&lt;code&gt;\d$&lt;/code&gt;表示必须以数字结束。&lt;br&gt;你可能注意到了，&lt;code&gt;py&lt;/code&gt;也可以匹配&lt;code&gt;&amp;#39;python&amp;#39;&lt;/code&gt;，但是加上&lt;code&gt;^py$&lt;/code&gt;就变成了整行匹配，就只能匹配&lt;code&gt;&amp;#39;py&amp;#39;&lt;/code&gt;了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;re模块&quot;&gt;&lt;a href=&quot;#re模块&quot; class=&quot;headerlink&quot; title=&quot;re模块&quot;&gt;&lt;/a&gt;re模块&lt;/h3&gt;&lt;p&gt;有了准备知识，我们就可以在Python中使用正则表达式了。Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用&lt;code&gt;\&lt;/code&gt;转义，所以要特别注意：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s = &amp;#39;ABC\\-001&amp;#39;&lt;/code&gt; # Python的字符串&lt;br&gt;对应的正则表达式字符串变成：&lt;code&gt;&amp;#39;ABC\-001&amp;#39;&lt;/code&gt;&lt;br&gt;因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：&lt;code&gt;s = r&amp;#39;ABC\-001&amp;#39;&lt;/code&gt;# Python的字符串&lt;br&gt;对应的正则表达式字符串不变：&lt;code&gt;&amp;#39;ABC\-001&amp;#39;&lt;/code&gt;&lt;br&gt;先看看如何判断正则表达式是否匹配：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.match(&lt;span class=&quot;string&quot;&gt;r&#39;^\d&amp;#123;3&amp;#125;\-\d&amp;#123;3,8&amp;#125;$&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;_sre.SRE_Match object; span=(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;), match=&lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.match(&lt;span class=&quot;string&quot;&gt;r&#39;^\d&amp;#123;3&amp;#125;\-\d&amp;#123;3,8&amp;#125;$&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;010 12345&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;test = &lt;span class=&quot;string&quot;&gt;&#39;用户输入的字符串&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; re.match(&lt;span class=&quot;string&quot;&gt;r&#39;正则表达式&#39;&lt;/span&gt;, test):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;failed&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;切分字符串&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;a b   c&#39;&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;嗯，无法识别连续的空格，用正则表达式试试：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.split(&lt;span class=&quot;string&quot;&gt;r&#39;\s+&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a b   c&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;无论多少个空格都可以正常分割。加入,试试：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.split(&lt;span class=&quot;string&quot;&gt;r&#39;[\s\,]+&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a,b, c  d&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;再加入;试试：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re.split(&lt;span class=&quot;string&quot;&gt;r&#39;[\s\,\;]+&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a,b;; c  d&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;分组&quot;&gt;&lt;a href=&quot;#分组&quot; class=&quot;headerlink&quot; title=&quot;分组&quot;&gt;&lt;/a&gt;分组&lt;/h3&gt;&lt;p&gt;除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：&lt;br&gt;&lt;code&gt;^(\d{3})-(\d{3,8})$&lt;/code&gt;分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = re.match(&lt;span class=&quot;string&quot;&gt;r&#39;^(\d&amp;#123;3&amp;#125;)-(\d&amp;#123;3,8&amp;#125;)$&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;_sre.SRE_Match object; span=(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;), match=&lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m.group(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;010&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m.group(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;12345&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。&lt;br&gt;注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。&lt;br&gt;&lt;strong&gt;提取子串非常有用。来看一个更凶残的例子：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t = &lt;span class=&quot;string&quot;&gt;&#39;19:05:30&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = re.match(&lt;span class=&quot;string&quot;&gt;r&#39;^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$&#39;&lt;/span&gt;, t)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m.groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;19&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;05&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;对于&lt;span class=&quot;string&quot;&gt;&#39;2-30&#39;&lt;/span&gt;，&lt;span class=&quot;string&quot;&gt;&#39;4-31&#39;&lt;/span&gt;这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;贪婪匹配&quot;&gt;&lt;a href=&quot;#贪婪匹配&quot; class=&quot;headerlink&quot; title=&quot;贪婪匹配&quot;&gt;&lt;/a&gt;贪婪匹配&lt;/h3&gt;&lt;p&gt;最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&#39;^(\d+)(0*)$&#39;, &#39;102300&#39;).groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&#39;102300&#39;, &#39;&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&#39;^(\d+?)(0*)$&#39;, &#39;102300&#39;).groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&#39;1023&#39;, &#39;00&#39;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;p&gt;当我们在Python中使用正则表达式时，re模块内部会干两件事情：&lt;br&gt;编译正则表达式，如果正则表达式的字符串本身不合法，会报错；&lt;br&gt;用编译后的正则表达式去匹配字符串。&lt;br&gt;如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#编译:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re_telephone = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;^(\d&amp;#123;3&amp;#125;)-(\d&amp;#123;3,8&amp;#125;)$&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re_telephone.match(&lt;span class=&quot;string&quot;&gt;&#39;010-12345&#39;&lt;/span&gt;).groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;010&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12345&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;re_telephone.match(&lt;span class=&quot;string&quot;&gt;&#39;010-8086&#39;&lt;/span&gt;).groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;010&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8086&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。&lt;/p&gt;
&lt;p&gt;正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。&lt;/p&gt;
&lt;p&gt;所以我们判断一个字符串是否是合法的Email的方法是：&lt;/p&gt;
&lt;p&gt;创建一个匹配Email的正则表达式；&lt;/p&gt;
&lt;p&gt;用该正则表达式去匹配用户的输入来判断是否合法。&lt;br&gt;
    
    </summary>
    
      <category term="必备知识" scheme="http://blublu.xyz/categories/knowledge/"/>
    
    
      <category term="web后端" scheme="http://blublu.xyz/tags/web-background/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装brew</title>
    <link href="http://blublu.xyz/tools/Mac%E4%B8%8B%E5%AE%89%E8%A3%85brew/"/>
    <id>http://blublu.xyz/tools/Mac下安装brew/</id>
    <published>2015-06-19T05:36:52.000Z</published>
    <updated>2016-07-18T02:46:20.000Z</updated>
    
    <content type="html">&lt;p&gt;先说说什么是brew，brew又叫Homebrew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，只需要一个命令， 非常方便，brew类似ubuntu系统下的apt-get的功能。从Ubuntu换到MacOS之后就很感叹为什么没有apt-get这样方便快捷的安装命令，后来找到了brew。不用多说，真的相当好用！！！&lt;/p&gt;
&lt;p&gt;直接用terminal来进行安装&lt;/p&gt;
&lt;p&gt;安装命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; --strip 1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/8/5c/5640b169b14244d4fece87654939c.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查看版本号：&lt;br&gt;&lt;img src=&quot;http://7xpajj.com1.z0.glb.clouddn.com/image/f/65/eaa487bc223d56a3e99e3489a99c2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;当brew安装成功后，我们就可以随意安装自己想要安装的软件了，例如wget，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo brew install wget&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;当我们想卸载的时候，使用以下命令：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo brew uninstall wget&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，有时候，你不知道你安装的软件的名字， 那么你需要先搜索下, 查到包的名字。&lt;/p&gt;
&lt;p&gt;比如我要安装wget,那么我们可以用正则表达式来进行搜索：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew search /wge*/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;==注意：==&lt;br&gt;&lt;strong&gt;/wge*/是个正则表达式，需要用/分割&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其它的brew命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew list       列出已安装的软件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;brew update     更新brew&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;brew home       用浏览器打开brew的官方网站&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;brew info       显示软件信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;brew deps       显示包依赖&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;先说说什么是brew，brew又叫Homebrew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，只需要一个命令， 非常方便，brew类似ubuntu系统下的apt-get的功能。从Ubuntu换到MacOS之后就很感叹为什么没有apt-get这样方便快捷的安装命令，后来找到了brew。不用多说，真的相当好用！！！&lt;/p&gt;
&lt;p&gt;直接用terminal来进行安装&lt;/p&gt;
&lt;p&gt;安装命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; --strip 1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="必备工具" scheme="http://blublu.xyz/categories/tools/"/>
    
    
      <category term="OSX" scheme="http://blublu.xyz/tags/OSX/"/>
    
  </entry>
  
</feed>
